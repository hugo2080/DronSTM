
DronSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ea4  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08007fe0  08007fe0  00008fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008370  08008370  00009370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008378  08008378  00009378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800837c  0800837c  0000937c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000024  20000008  08008380  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  2000002c  080083a4  0000a02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  2000006c  080083e1  0000a06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000080  080083f2  0000a080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  080083f2  0000a310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000aa67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000b000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000b000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  080083f2  0000a1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   000221b0  00000000  00000000  0000aa97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000503e  00000000  00000000  0002cc47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000020d8  00000000  00000000  00031c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000018d4  00000000  00000000  00033d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002a9bc  00000000  00000000  00035634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00027afd  00000000  00000000  0005fff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ef278  00000000  00000000  00087aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00176d65  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000085ec  00000000  00000000  00176da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000041  00000000  00000000  0017f394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000080 	.word	0x20000080
 8000158:	00000000 	.word	0x00000000
 800015c:	08007fc8 	.word	0x08007fc8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000084 	.word	0x20000084
 8000178:	08007fc8 	.word	0x08007fc8

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000192:	4b0b      	ldr	r3, [pc, #44]	@ (80001c0 <APPD_EnableCPU2+0x34>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	c403      	stmia	r4!, {r0, r1}
 80001a2:	8022      	strh	r2, [r4, #0]
 80001a4:	3402      	adds	r4, #2
 80001a6:	0c13      	lsrs	r3, r2, #16
 80001a8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001aa:	f006 fc79 	bl	8006aa0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4618      	mov	r0, r3
 80001b2:	f005 ff0a 	bl	8005fca <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001b6:	bf00      	nop
}
 80001b8:	3720      	adds	r7, #32
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bdb0      	pop	{r4, r5, r7, pc}
 80001be:	bf00      	nop
 80001c0:	08007fe0 	.word	0x08007fe0

080001c4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80001cc:	4b07      	ldr	r3, [pc, #28]	@ (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80001d2:	f023 0207 	bic.w	r2, r3, #7
 80001d6:	4905      	ldr	r1, [pc, #20]	@ (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4313      	orrs	r3, r2
 80001dc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	58000400 	.word	0x58000400

080001f0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80001f8:	4b06      	ldr	r3, [pc, #24]	@ (8000214 <LL_EXTI_EnableIT_32_63+0x24>)
 80001fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80001fe:	4905      	ldr	r1, [pc, #20]	@ (8000214 <LL_EXTI_EnableIT_32_63+0x24>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4313      	orrs	r3, r2
 8000204:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	58000800 	.word	0x58000800

08000218 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000224:	4a0a      	ldr	r2, [pc, #40]	@ (8000250 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000226:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800022a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800022e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000232:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	021b      	lsls	r3, r3, #8
 800023a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800023e:	4313      	orrs	r3, r2
 8000240:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	cafecafe 	.word	0xcafecafe

08000254 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800025c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000266:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4313      	orrs	r3, r2
 800026e:	608b      	str	r3, [r1, #8]
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000280:	4b04      	ldr	r3, [pc, #16]	@ (8000294 <LL_DBGMCU_GetDeviceID+0x18>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000288:	4618      	mov	r0, r3
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	e0042000 	.word	0xe0042000

08000298 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800029c:	4b04      	ldr	r3, [pc, #16]	@ (80002b0 <LL_DBGMCU_GetRevisionID+0x18>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	0c1b      	lsrs	r3, r3, #16
 80002a2:	b29b      	uxth	r3, r3
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	e0042000 	.word	0xe0042000

080002b4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	22ff      	movs	r2, #255	@ 0xff
 80002c0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80002c2:	bf00      	nop
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr

080002ce <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80002ce:	b480      	push	{r7}
 80002d0:	b083      	sub	sp, #12
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	22ca      	movs	r2, #202	@ 0xca
 80002da:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2253      	movs	r2, #83	@ 0x53
 80002e0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr

080002ee <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80002ee:	b480      	push	{r7}
 80002f0:	b083      	sub	sp, #12
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	6078      	str	r0, [r7, #4]
 80002f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	f023 0207 	bic.w	r2, r3, #7
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	431a      	orrs	r2, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	609a      	str	r2, [r3, #8]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000318:	4b04      	ldr	r3, [pc, #16]	@ (800032c <MX_APPE_Config+0x18>)
 800031a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800031e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000320:	f000 f824 	bl	800036c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000324:	f000 f829 	bl	800037a <Config_HSE>

  return;
 8000328:	bf00      	nop
}
 800032a:	bd80      	pop	{r7, pc}
 800032c:	58004000 	.word	0x58004000

08000330 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000334:	f000 f835 	bl	80003a2 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000338:	f000 f84e 	bl	80003d8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800033c:	4903      	ldr	r1, [pc, #12]	@ (800034c <MX_APPE_Init+0x1c>)
 800033e:	2000      	movs	r0, #0
 8000340:	f000 fdac 	bl	8000e9c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000344:	f000 f856 	bl	80003f4 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000348:	bf00      	nop
}
 800034a:	bd80      	pop	{r7, pc}
 800034c:	2000013c 	.word	0x2000013c

08000350 <Init_Smps>:

void Init_Smps(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000354:	bf00      	nop
}
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr

0800035e <Init_Exti>:

void Init_Exti(void)
{
 800035e:	b580      	push	{r7, lr}
 8000360:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000362:	2050      	movs	r0, #80	@ 0x50
 8000364:	f7ff ff44 	bl	80001f0 <LL_EXTI_EnableIT_32_63>

  return;
 8000368:	bf00      	nop
}
 800036a:	bd80      	pop	{r7, pc}

0800036c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000370:	bf00      	nop
}
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800037a:	b580      	push	{r7, lr}
 800037c:	b082      	sub	sp, #8
 800037e:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000380:	2000      	movs	r0, #0
 8000382:	f006 fc19 	bl	8006bb8 <OTP_Read>
 8000386:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d005      	beq.n	800039a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	799b      	ldrb	r3, [r3, #6]
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ff40 	bl	8000218 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000398:	bf00      	nop
 800039a:	bf00      	nop
}
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}

080003a2 <System_Init>:

static void System_Init(void)
{
 80003a2:	b580      	push	{r7, lr}
 80003a4:	af00      	add	r7, sp, #0
  Init_Smps();
 80003a6:	f7ff ffd3 	bl	8000350 <Init_Smps>

  Init_Exti();
 80003aa:	f7ff ffd8 	bl	800035e <Init_Exti>

  Init_Rtc();
 80003ae:	f000 f803 	bl	80003b8 <Init_Rtc>

  return;
 80003b2:	bf00      	nop
}
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <Init_Rtc>:

static void Init_Rtc(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80003bc:	4805      	ldr	r0, [pc, #20]	@ (80003d4 <Init_Rtc+0x1c>)
 80003be:	f7ff ff86 	bl	80002ce <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80003c2:	2100      	movs	r1, #0
 80003c4:	4803      	ldr	r0, [pc, #12]	@ (80003d4 <Init_Rtc+0x1c>)
 80003c6:	f7ff ff92 	bl	80002ee <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80003ca:	4802      	ldr	r0, [pc, #8]	@ (80003d4 <Init_Rtc+0x1c>)
 80003cc:	f7ff ff72 	bl	80002b4 <LL_RTC_EnableWriteProtection>

  return;
 80003d0:	bf00      	nop
}
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40002800 	.word	0x40002800

080003d8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80003dc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80003e0:	f7ff ff38 	bl	8000254 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80003e4:	f007 fb4c 	bl	8007a80 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80003e8:	2004      	movs	r0, #4
 80003ea:	f7ff feeb 	bl	80001c4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80003ee:	bf00      	nop
}
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80003fa:	f006 f99b 	bl	8006734 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80003fe:	4a11      	ldr	r2, [pc, #68]	@ (8000444 <appe_Tl_Init+0x50>)
 8000400:	2100      	movs	r1, #0
 8000402:	2004      	movs	r0, #4
 8000404:	f007 fc7a 	bl	8007cfc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000408:	4b0f      	ldr	r3, [pc, #60]	@ (8000448 <appe_Tl_Init+0x54>)
 800040a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800040c:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <appe_Tl_Init+0x58>)
 800040e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000410:	463b      	mov	r3, r7
 8000412:	4619      	mov	r1, r3
 8000414:	480e      	ldr	r0, [pc, #56]	@ (8000450 <appe_Tl_Init+0x5c>)
 8000416:	f006 f84f 	bl	80064b8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800041a:	4b0e      	ldr	r3, [pc, #56]	@ (8000454 <appe_Tl_Init+0x60>)
 800041c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800041e:	4b0e      	ldr	r3, [pc, #56]	@ (8000458 <appe_Tl_Init+0x64>)
 8000420:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000422:	4b0e      	ldr	r3, [pc, #56]	@ (800045c <appe_Tl_Init+0x68>)
 8000424:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000426:	f240 533c 	movw	r3, #1340	@ 0x53c
 800042a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800042c:	f107 0308 	add.w	r3, r7, #8
 8000430:	4618      	mov	r0, r3
 8000432:	f006 fac1 	bl	80069b8 <TL_MM_Init>

  TL_Enable();
 8000436:	f006 f977 	bl	8006728 <TL_Enable>

  return;
 800043a:	bf00      	nop
}
 800043c:	3720      	adds	r7, #32
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	080064f1 	.word	0x080064f1
 8000448:	20030734 	.word	0x20030734
 800044c:	08000461 	.word	0x08000461
 8000450:	08000479 	.word	0x08000479
 8000454:	2003094c 	.word	0x2003094c
 8000458:	20030840 	.word	0x20030840
 800045c:	200301f8 	.word	0x200301f8

08000460 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800046a:	bf00      	nop
}
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
	...

08000478 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b088      	sub	sp, #32
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	330b      	adds	r3, #11
 8000486:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	881b      	ldrh	r3, [r3, #0]
 800048c:	b29b      	uxth	r3, r3
 800048e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000492:	2b07      	cmp	r3, #7
 8000494:	d81f      	bhi.n	80004d6 <APPE_SysUserEvtRx+0x5e>
 8000496:	a201      	add	r2, pc, #4	@ (adr r2, 800049c <APPE_SysUserEvtRx+0x24>)
 8000498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800049c:	080004bd 	.word	0x080004bd
 80004a0:	080004cf 	.word	0x080004cf
 80004a4:	080004d7 	.word	0x080004d7
 80004a8:	080004d7 	.word	0x080004d7
 80004ac:	080004d7 	.word	0x080004d7
 80004b0:	080004d7 	.word	0x080004d7
 80004b4:	080004d7 	.word	0x080004d7
 80004b8:	080004d7 	.word	0x080004d7
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80004bc:	f107 030c 	add.w	r3, r7, #12
 80004c0:	4618      	mov	r0, r3
 80004c2:	f005 fdaf 	bl	8006024 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80004c6:	6878      	ldr	r0, [r7, #4]
 80004c8:	f000 f81b 	bl	8000502 <APPE_SysEvtReadyProcessing>
    break;
 80004cc:	e004      	b.n	80004d8 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f000 f806 	bl	80004e0 <APPE_SysEvtError>
    break;
 80004d4:	e000      	b.n	80004d8 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80004d6:	bf00      	nop
  }

  return;
 80004d8:	bf00      	nop
}
 80004da:	3720      	adds	r7, #32
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	330b      	adds	r3, #11
 80004ee:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	3302      	adds	r3, #2
 80004f4:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80004f6:	bf00      	nop
}
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b08a      	sub	sp, #40	@ 0x28
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800050a:	f107 0308 	add.w	r3, r7, #8
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000518:	2300      	movs	r3, #0
 800051a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800051c:	2300      	movs	r3, #0
 800051e:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	330b      	adds	r3, #11
 8000526:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000528:	69fb      	ldr	r3, [r7, #28]
 800052a:	3302      	adds	r3, #2
 800052c:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800052e:	69bb      	ldr	r3, [r7, #24]
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d11d      	bne.n	8000572 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000536:	f7ff fe29 	bl	800018c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800053a:	230f      	movs	r3, #15
 800053c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800053e:	237f      	movs	r3, #127	@ 0x7f
 8000540:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000542:	f7ff fea9 	bl	8000298 <LL_DBGMCU_GetRevisionID>
 8000546:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800054a:	b29b      	uxth	r3, r3
 800054c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800054e:	f7ff fe95 	bl	800027c <LL_DBGMCU_GetDeviceID>
 8000552:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000554:	6a3b      	ldr	r3, [r7, #32]
 8000556:	b29b      	uxth	r3, r3
 8000558:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800055a:	f107 0308 	add.w	r3, r7, #8
 800055e:	4618      	mov	r0, r3
 8000560:	f005 fd4a 	bl	8005ff8 <SHCI_C2_Config>

    APP_BLE_Init();
 8000564:	f006 fc32 	bl	8006dcc <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000568:	2100      	movs	r1, #0
 800056a:	2001      	movs	r0, #1
 800056c:	f007 fa9a 	bl	8007aa4 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000570:	e007      	b.n	8000582 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000572:	69bb      	ldr	r3, [r7, #24]
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d103      	bne.n	8000582 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
  return;
 8000580:	bf00      	nop
 8000582:	bf00      	nop
}
 8000584:	3728      	adds	r7, #40	@ 0x28
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800058e:	f04f 30ff 	mov.w	r0, #4294967295
 8000592:	f007 fab7 	bl	8007b04 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}

0800059a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800059e:	bf00      	nop
}
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80005b0:	2100      	movs	r1, #0
 80005b2:	2004      	movs	r0, #4
 80005b4:	f007 fbc4 	bl	8007d40 <UTIL_SEQ_SetTask>
  return;
 80005b8:	bf00      	nop
}
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80005c8:	2002      	movs	r0, #2
 80005ca:	f007 fc25 	bl	8007e18 <UTIL_SEQ_SetEvt>
  return;
 80005ce:	bf00      	nop
}
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80005de:	2002      	movs	r0, #2
 80005e0:	f007 fc3a 	bl	8007e58 <UTIL_SEQ_WaitEvt>
  return;
 80005e4:	bf00      	nop
}
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4313      	orrs	r3, r2
 8000602:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000604:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000608:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4013      	ands	r3, r2
 800060e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000610:	68fb      	ldr	r3, [r7, #12]
}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
	...

08000620 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	2001      	movs	r0, #1
 8000636:	f7ff ffd9 	bl	80005ec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800063a:	2008      	movs	r0, #8
 800063c:	f7ff ffd6 	bl	80005ec <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SOLENOID_GPIO_Port, SOLENOID_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000646:	480a      	ldr	r0, [pc, #40]	@ (8000670 <MX_GPIO_Init+0x50>)
 8000648:	f001 fd7c 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SOLENOID_Pin */
  GPIO_InitStruct.Pin = SOLENOID_Pin;
 800064c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000650:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SOLENOID_GPIO_Port, &GPIO_InitStruct);
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	4619      	mov	r1, r3
 8000662:	4803      	ldr	r0, [pc, #12]	@ (8000670 <MX_GPIO_Init+0x50>)
 8000664:	f001 fb3e 	bl	8001ce4 <HAL_GPIO_Init>

}
 8000668:	bf00      	nop
 800066a:	3718      	adds	r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	48000c00 	.word	0x48000c00

08000674 <LL_EXTI_EnableIT_0_31>:
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800067c:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <LL_EXTI_EnableIT_0_31+0x24>)
 800067e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000682:	4905      	ldr	r1, [pc, #20]	@ (8000698 <LL_EXTI_EnableIT_0_31+0x24>)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4313      	orrs	r3, r2
 8000688:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	58000800 	.word	0x58000800

0800069c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80006a4:	4b05      	ldr	r3, [pc, #20]	@ (80006bc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4904      	ldr	r1, [pc, #16]	@ (80006bc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4313      	orrs	r3, r2
 80006ae:	600b      	str	r3, [r1, #0]

}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	58000800 	.word	0x58000800

080006c0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006c6:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <ReadRtcSsrValue+0x3c>)
 80006c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <ReadRtcSsrValue+0x3c>)
 80006d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80006d6:	e005      	b.n	80006e4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <ReadRtcSsrValue+0x3c>)
 80006de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d1f5      	bne.n	80006d8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80006ec:	683b      	ldr	r3, [r7, #0]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40002800 	.word	0x40002800

08000700 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	460a      	mov	r2, r1
 800070a:	71fb      	strb	r3, [r7, #7]
 800070c:	4613      	mov	r3, r2
 800070e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000710:	79ba      	ldrb	r2, [r7, #6]
 8000712:	491d      	ldr	r1, [pc, #116]	@ (8000788 <LinkTimerAfter+0x88>)
 8000714:	4613      	mov	r3, r2
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	4413      	add	r3, r2
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	440b      	add	r3, r1
 800071e:	3315      	adds	r3, #21
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	2b06      	cmp	r3, #6
 8000728:	d009      	beq.n	800073e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800072a:	7bfa      	ldrb	r2, [r7, #15]
 800072c:	4916      	ldr	r1, [pc, #88]	@ (8000788 <LinkTimerAfter+0x88>)
 800072e:	4613      	mov	r3, r2
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	4413      	add	r3, r2
 8000734:	00db      	lsls	r3, r3, #3
 8000736:	440b      	add	r3, r1
 8000738:	3314      	adds	r3, #20
 800073a:	79fa      	ldrb	r2, [r7, #7]
 800073c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800073e:	79fa      	ldrb	r2, [r7, #7]
 8000740:	4911      	ldr	r1, [pc, #68]	@ (8000788 <LinkTimerAfter+0x88>)
 8000742:	4613      	mov	r3, r2
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	4413      	add	r3, r2
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	440b      	add	r3, r1
 800074c:	3315      	adds	r3, #21
 800074e:	7bfa      	ldrb	r2, [r7, #15]
 8000750:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000752:	79fa      	ldrb	r2, [r7, #7]
 8000754:	490c      	ldr	r1, [pc, #48]	@ (8000788 <LinkTimerAfter+0x88>)
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	440b      	add	r3, r1
 8000760:	3314      	adds	r3, #20
 8000762:	79ba      	ldrb	r2, [r7, #6]
 8000764:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000766:	79ba      	ldrb	r2, [r7, #6]
 8000768:	4907      	ldr	r1, [pc, #28]	@ (8000788 <LinkTimerAfter+0x88>)
 800076a:	4613      	mov	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	4413      	add	r3, r2
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	440b      	add	r3, r1
 8000774:	3315      	adds	r3, #21
 8000776:	79fa      	ldrb	r2, [r7, #7]
 8000778:	701a      	strb	r2, [r3, #0]

  return;
 800077a:	bf00      	nop
}
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	2000009c 	.word	0x2000009c

0800078c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	460a      	mov	r2, r1
 8000796:	71fb      	strb	r3, [r7, #7]
 8000798:	4613      	mov	r3, r2
 800079a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800079c:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <LinkTimerBefore+0xb8>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	79ba      	ldrb	r2, [r7, #6]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d032      	beq.n	800080e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80007a8:	79ba      	ldrb	r2, [r7, #6]
 80007aa:	4927      	ldr	r1, [pc, #156]	@ (8000848 <LinkTimerBefore+0xbc>)
 80007ac:	4613      	mov	r3, r2
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	4413      	add	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	440b      	add	r3, r1
 80007b6:	3314      	adds	r3, #20
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	4922      	ldr	r1, [pc, #136]	@ (8000848 <LinkTimerBefore+0xbc>)
 80007c0:	4613      	mov	r3, r2
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	4413      	add	r3, r2
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	440b      	add	r3, r1
 80007ca:	3315      	adds	r3, #21
 80007cc:	79fa      	ldrb	r2, [r7, #7]
 80007ce:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80007d0:	79fa      	ldrb	r2, [r7, #7]
 80007d2:	491d      	ldr	r1, [pc, #116]	@ (8000848 <LinkTimerBefore+0xbc>)
 80007d4:	4613      	mov	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	4413      	add	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	440b      	add	r3, r1
 80007de:	3315      	adds	r3, #21
 80007e0:	79ba      	ldrb	r2, [r7, #6]
 80007e2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80007e4:	79fa      	ldrb	r2, [r7, #7]
 80007e6:	4918      	ldr	r1, [pc, #96]	@ (8000848 <LinkTimerBefore+0xbc>)
 80007e8:	4613      	mov	r3, r2
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	4413      	add	r3, r2
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	440b      	add	r3, r1
 80007f2:	3314      	adds	r3, #20
 80007f4:	7bfa      	ldrb	r2, [r7, #15]
 80007f6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80007f8:	79ba      	ldrb	r2, [r7, #6]
 80007fa:	4913      	ldr	r1, [pc, #76]	@ (8000848 <LinkTimerBefore+0xbc>)
 80007fc:	4613      	mov	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	4413      	add	r3, r2
 8000802:	00db      	lsls	r3, r3, #3
 8000804:	440b      	add	r3, r1
 8000806:	3314      	adds	r3, #20
 8000808:	79fa      	ldrb	r2, [r7, #7]
 800080a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800080c:	e014      	b.n	8000838 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800080e:	79fa      	ldrb	r2, [r7, #7]
 8000810:	490d      	ldr	r1, [pc, #52]	@ (8000848 <LinkTimerBefore+0xbc>)
 8000812:	4613      	mov	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4413      	add	r3, r2
 8000818:	00db      	lsls	r3, r3, #3
 800081a:	440b      	add	r3, r1
 800081c:	3315      	adds	r3, #21
 800081e:	79ba      	ldrb	r2, [r7, #6]
 8000820:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000822:	79ba      	ldrb	r2, [r7, #6]
 8000824:	4908      	ldr	r1, [pc, #32]	@ (8000848 <LinkTimerBefore+0xbc>)
 8000826:	4613      	mov	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	4413      	add	r3, r2
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	440b      	add	r3, r1
 8000830:	3314      	adds	r3, #20
 8000832:	79fa      	ldrb	r2, [r7, #7]
 8000834:	701a      	strb	r2, [r3, #0]
  return;
 8000836:	bf00      	nop
}
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	2000012c 	.word	0x2000012c
 8000848:	2000009c 	.word	0x2000009c

0800084c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000856:	4b4e      	ldr	r3, [pc, #312]	@ (8000990 <linkTimer+0x144>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	2b06      	cmp	r3, #6
 800085e:	d118      	bne.n	8000892 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000860:	4b4b      	ldr	r3, [pc, #300]	@ (8000990 <linkTimer+0x144>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4b4b      	ldr	r3, [pc, #300]	@ (8000994 <linkTimer+0x148>)
 8000868:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800086a:	4a49      	ldr	r2, [pc, #292]	@ (8000990 <linkTimer+0x144>)
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000870:	79fa      	ldrb	r2, [r7, #7]
 8000872:	4949      	ldr	r1, [pc, #292]	@ (8000998 <linkTimer+0x14c>)
 8000874:	4613      	mov	r3, r2
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	4413      	add	r3, r2
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	440b      	add	r3, r1
 800087e:	3315      	adds	r3, #21
 8000880:	2206      	movs	r2, #6
 8000882:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000884:	4b45      	ldr	r3, [pc, #276]	@ (800099c <linkTimer+0x150>)
 8000886:	f04f 32ff 	mov.w	r2, #4294967295
 800088a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	81fb      	strh	r3, [r7, #14]
 8000890:	e078      	b.n	8000984 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000892:	f000 f909 	bl	8000aa8 <ReturnTimeElapsed>
 8000896:	4603      	mov	r3, r0
 8000898:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800089a:	79fa      	ldrb	r2, [r7, #7]
 800089c:	493e      	ldr	r1, [pc, #248]	@ (8000998 <linkTimer+0x14c>)
 800089e:	4613      	mov	r3, r2
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	4413      	add	r3, r2
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	440b      	add	r3, r1
 80008a8:	3308      	adds	r3, #8
 80008aa:	6819      	ldr	r1, [r3, #0]
 80008ac:	89fb      	ldrh	r3, [r7, #14]
 80008ae:	79fa      	ldrb	r2, [r7, #7]
 80008b0:	4419      	add	r1, r3
 80008b2:	4839      	ldr	r0, [pc, #228]	@ (8000998 <linkTimer+0x14c>)
 80008b4:	4613      	mov	r3, r2
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	4413      	add	r3, r2
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	4403      	add	r3, r0
 80008be:	3308      	adds	r3, #8
 80008c0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80008c2:	79fa      	ldrb	r2, [r7, #7]
 80008c4:	4934      	ldr	r1, [pc, #208]	@ (8000998 <linkTimer+0x14c>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	440b      	add	r3, r1
 80008d0:	3308      	adds	r3, #8
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80008d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000990 <linkTimer+0x144>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4619      	mov	r1, r3
 80008de:	4a2e      	ldr	r2, [pc, #184]	@ (8000998 <linkTimer+0x14c>)
 80008e0:	460b      	mov	r3, r1
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	440b      	add	r3, r1
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	4413      	add	r3, r2
 80008ea:	3308      	adds	r3, #8
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d337      	bcc.n	8000964 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80008f4:	4b26      	ldr	r3, [pc, #152]	@ (8000990 <linkTimer+0x144>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80008fa:	7b7a      	ldrb	r2, [r7, #13]
 80008fc:	4926      	ldr	r1, [pc, #152]	@ (8000998 <linkTimer+0x14c>)
 80008fe:	4613      	mov	r3, r2
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	4413      	add	r3, r2
 8000904:	00db      	lsls	r3, r3, #3
 8000906:	440b      	add	r3, r1
 8000908:	3315      	adds	r3, #21
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800090e:	e013      	b.n	8000938 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000910:	7b7a      	ldrb	r2, [r7, #13]
 8000912:	4921      	ldr	r1, [pc, #132]	@ (8000998 <linkTimer+0x14c>)
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	440b      	add	r3, r1
 800091e:	3315      	adds	r3, #21
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000924:	7b7a      	ldrb	r2, [r7, #13]
 8000926:	491c      	ldr	r1, [pc, #112]	@ (8000998 <linkTimer+0x14c>)
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	440b      	add	r3, r1
 8000932:	3315      	adds	r3, #21
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000938:	7b3b      	ldrb	r3, [r7, #12]
 800093a:	2b06      	cmp	r3, #6
 800093c:	d00b      	beq.n	8000956 <linkTimer+0x10a>
 800093e:	7b3a      	ldrb	r2, [r7, #12]
 8000940:	4915      	ldr	r1, [pc, #84]	@ (8000998 <linkTimer+0x14c>)
 8000942:	4613      	mov	r3, r2
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	4413      	add	r3, r2
 8000948:	00db      	lsls	r3, r3, #3
 800094a:	440b      	add	r3, r1
 800094c:	3308      	adds	r3, #8
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	68ba      	ldr	r2, [r7, #8]
 8000952:	429a      	cmp	r2, r3
 8000954:	d2dc      	bcs.n	8000910 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000956:	7b7a      	ldrb	r2, [r7, #13]
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	4611      	mov	r1, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fecf 	bl	8000700 <LinkTimerAfter>
 8000962:	e00f      	b.n	8000984 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000964:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <linkTimer+0x144>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b2da      	uxtb	r2, r3
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ff0c 	bl	800078c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <linkTimer+0x144>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <linkTimer+0x148>)
 800097c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800097e:	4a04      	ldr	r2, [pc, #16]	@ (8000990 <linkTimer+0x144>)
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000984:	89fb      	ldrh	r3, [r7, #14]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000012c 	.word	0x2000012c
 8000994:	2000012d 	.word	0x2000012d
 8000998:	2000009c 	.word	0x2000009c
 800099c:	20000130 	.word	0x20000130

080009a0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	460a      	mov	r2, r1
 80009aa:	71fb      	strb	r3, [r7, #7]
 80009ac:	4613      	mov	r3, r2
 80009ae:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80009b0:	4b39      	ldr	r3, [pc, #228]	@ (8000a98 <UnlinkTimer+0xf8>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	79fa      	ldrb	r2, [r7, #7]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d111      	bne.n	80009e0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80009bc:	4b36      	ldr	r3, [pc, #216]	@ (8000a98 <UnlinkTimer+0xf8>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b36      	ldr	r3, [pc, #216]	@ (8000a9c <UnlinkTimer+0xfc>)
 80009c4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80009c6:	79fa      	ldrb	r2, [r7, #7]
 80009c8:	4935      	ldr	r1, [pc, #212]	@ (8000aa0 <UnlinkTimer+0x100>)
 80009ca:	4613      	mov	r3, r2
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	4413      	add	r3, r2
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	440b      	add	r3, r1
 80009d4:	3315      	adds	r3, #21
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b2f      	ldr	r3, [pc, #188]	@ (8000a98 <UnlinkTimer+0xf8>)
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	e03e      	b.n	8000a5e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80009e0:	79fa      	ldrb	r2, [r7, #7]
 80009e2:	492f      	ldr	r1, [pc, #188]	@ (8000aa0 <UnlinkTimer+0x100>)
 80009e4:	4613      	mov	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	4413      	add	r3, r2
 80009ea:	00db      	lsls	r3, r3, #3
 80009ec:	440b      	add	r3, r1
 80009ee:	3314      	adds	r3, #20
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80009f4:	79fa      	ldrb	r2, [r7, #7]
 80009f6:	492a      	ldr	r1, [pc, #168]	@ (8000aa0 <UnlinkTimer+0x100>)
 80009f8:	4613      	mov	r3, r2
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	4413      	add	r3, r2
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	440b      	add	r3, r1
 8000a02:	3315      	adds	r3, #21
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000a08:	79f9      	ldrb	r1, [r7, #7]
 8000a0a:	7bfa      	ldrb	r2, [r7, #15]
 8000a0c:	4824      	ldr	r0, [pc, #144]	@ (8000aa0 <UnlinkTimer+0x100>)
 8000a0e:	460b      	mov	r3, r1
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	440b      	add	r3, r1
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	4403      	add	r3, r0
 8000a18:	3315      	adds	r3, #21
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2d8      	uxtb	r0, r3
 8000a1e:	4920      	ldr	r1, [pc, #128]	@ (8000aa0 <UnlinkTimer+0x100>)
 8000a20:	4613      	mov	r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	4413      	add	r3, r2
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	440b      	add	r3, r1
 8000a2a:	3315      	adds	r3, #21
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a30:	7bbb      	ldrb	r3, [r7, #14]
 8000a32:	2b06      	cmp	r3, #6
 8000a34:	d013      	beq.n	8000a5e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000a36:	79f9      	ldrb	r1, [r7, #7]
 8000a38:	7bba      	ldrb	r2, [r7, #14]
 8000a3a:	4819      	ldr	r0, [pc, #100]	@ (8000aa0 <UnlinkTimer+0x100>)
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	440b      	add	r3, r1
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	4403      	add	r3, r0
 8000a46:	3314      	adds	r3, #20
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	b2d8      	uxtb	r0, r3
 8000a4c:	4914      	ldr	r1, [pc, #80]	@ (8000aa0 <UnlinkTimer+0x100>)
 8000a4e:	4613      	mov	r3, r2
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	4413      	add	r3, r2
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	440b      	add	r3, r1
 8000a58:	3314      	adds	r3, #20
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000a5e:	79fa      	ldrb	r2, [r7, #7]
 8000a60:	490f      	ldr	r1, [pc, #60]	@ (8000aa0 <UnlinkTimer+0x100>)
 8000a62:	4613      	mov	r3, r2
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	4413      	add	r3, r2
 8000a68:	00db      	lsls	r3, r3, #3
 8000a6a:	440b      	add	r3, r1
 8000a6c:	330c      	adds	r3, #12
 8000a6e:	2201      	movs	r2, #1
 8000a70:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000a72:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <UnlinkTimer+0xf8>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b06      	cmp	r3, #6
 8000a7a:	d107      	bne.n	8000a8c <UnlinkTimer+0xec>
 8000a7c:	79bb      	ldrb	r3, [r7, #6]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d104      	bne.n	8000a8c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <UnlinkTimer+0x104>)
 8000a84:	f04f 32ff 	mov.w	r2, #4294967295
 8000a88:	601a      	str	r2, [r3, #0]
  }

  return;
 8000a8a:	bf00      	nop
 8000a8c:	bf00      	nop
}
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	2000012c 	.word	0x2000012c
 8000a9c:	2000012d 	.word	0x2000012d
 8000aa0:	2000009c 	.word	0x2000009c
 8000aa4:	20000130 	.word	0x20000130

08000aa8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000aae:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <ReturnTimeElapsed+0x70>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab6:	d026      	beq.n	8000b06 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000ab8:	f7ff fe02 	bl	80006c0 <ReadRtcSsrValue>
 8000abc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000abe:	4b16      	ldr	r3, [pc, #88]	@ (8000b18 <ReturnTimeElapsed+0x70>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d805      	bhi.n	8000ad4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000ac8:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <ReturnTimeElapsed+0x70>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	e00a      	b.n	8000aea <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <ReturnTimeElapsed+0x74>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <ReturnTimeElapsed+0x70>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000aea:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <ReturnTimeElapsed+0x78>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	fb02 f303 	mul.w	r3, r2, r3
 8000af6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <ReturnTimeElapsed+0x7c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	40d3      	lsrs	r3, r2
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	e001      	b.n	8000b0a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	b29b      	uxth	r3, r3
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000130 	.word	0x20000130
 8000b1c:	20000138 	.word	0x20000138
 8000b20:	20000136 	.word	0x20000136
 8000b24:	20000135 	.word	0x20000135

08000b28 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d108      	bne.n	8000b4a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b38:	f7ff fdc2 	bl	80006c0 <ReadRtcSsrValue>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4a21      	ldr	r2, [pc, #132]	@ (8000bc4 <RestartWakeupCounter+0x9c>)
 8000b40:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000b42:	2003      	movs	r0, #3
 8000b44:	f001 f89a 	bl	8001c7c <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000b48:	e039      	b.n	8000bbe <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d803      	bhi.n	8000b58 <RestartWakeupCounter+0x30>
 8000b50:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc8 <RestartWakeupCounter+0xa0>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d002      	beq.n	8000b5e <RestartWakeupCounter+0x36>
      Value -= 1;
 8000b58:	88fb      	ldrh	r3, [r7, #6]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000b5e:	bf00      	nop
 8000b60:	4b1a      	ldr	r3, [pc, #104]	@ (8000bcc <RestartWakeupCounter+0xa4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	f003 0304 	and.w	r3, r3, #4
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d0f8      	beq.n	8000b60 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000b6e:	4b17      	ldr	r3, [pc, #92]	@ (8000bcc <RestartWakeupCounter+0xa4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <RestartWakeupCounter+0xa4>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000b7e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000b80:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <RestartWakeupCounter+0xa8>)
 8000b82:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000b86:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f001 f891 	bl	8001cb0 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <RestartWakeupCounter+0xac>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	0c1b      	lsrs	r3, r3, #16
 8000b94:	041b      	lsls	r3, r3, #16
 8000b96:	88fa      	ldrh	r2, [r7, #6]
 8000b98:	490e      	ldr	r1, [pc, #56]	@ (8000bd4 <RestartWakeupCounter+0xac>)
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b9e:	f7ff fd8f 	bl	80006c0 <ReadRtcSsrValue>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a07      	ldr	r2, [pc, #28]	@ (8000bc4 <RestartWakeupCounter+0x9c>)
 8000ba6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <RestartWakeupCounter+0xa4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <RestartWakeupCounter+0xa4>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000bb6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000bb8:	f3af 8000 	nop.w
  return ;
 8000bbc:	bf00      	nop
}
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000130 	.word	0x20000130
 8000bc8:	20000135 	.word	0x20000135
 8000bcc:	2000013c 	.word	0x2000013c
 8000bd0:	58000800 	.word	0x58000800
 8000bd4:	40002800 	.word	0x40002800

08000bd8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000bde:	4b45      	ldr	r3, [pc, #276]	@ (8000cf4 <RescheduleTimerList+0x11c>)
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bea:	d107      	bne.n	8000bfc <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000bec:	bf00      	nop
 8000bee:	4b42      	ldr	r3, [pc, #264]	@ (8000cf8 <RescheduleTimerList+0x120>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d1f8      	bne.n	8000bee <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000bfc:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf8 <RescheduleTimerList+0x120>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	4b3d      	ldr	r3, [pc, #244]	@ (8000cf8 <RescheduleTimerList+0x120>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000c0a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000cfc <RescheduleTimerList+0x124>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000c12:	7bfa      	ldrb	r2, [r7, #15]
 8000c14:	493a      	ldr	r1, [pc, #232]	@ (8000d00 <RescheduleTimerList+0x128>)
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	440b      	add	r3, r1
 8000c20:	3308      	adds	r3, #8
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000c26:	f7ff ff3f 	bl	8000aa8 <ReturnTimeElapsed>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	68ba      	ldr	r2, [r7, #8]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d205      	bcs.n	8000c42 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c3a:	4b32      	ldr	r3, [pc, #200]	@ (8000d04 <RescheduleTimerList+0x12c>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
 8000c40:	e04d      	b.n	8000cde <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	4a30      	ldr	r2, [pc, #192]	@ (8000d08 <RescheduleTimerList+0x130>)
 8000c46:	8812      	ldrh	r2, [r2, #0]
 8000c48:	b292      	uxth	r2, r2
 8000c4a:	4413      	add	r3, r2
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d906      	bls.n	8000c62 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000c54:	4b2c      	ldr	r3, [pc, #176]	@ (8000d08 <RescheduleTimerList+0x130>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d04 <RescheduleTimerList+0x12c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
 8000c60:	e03d      	b.n	8000cde <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c6c:	4b25      	ldr	r3, [pc, #148]	@ (8000d04 <RescheduleTimerList+0x12c>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c72:	e034      	b.n	8000cde <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000c74:	7bfa      	ldrb	r2, [r7, #15]
 8000c76:	4922      	ldr	r1, [pc, #136]	@ (8000d00 <RescheduleTimerList+0x128>)
 8000c78:	4613      	mov	r3, r2
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	4413      	add	r3, r2
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	440b      	add	r3, r1
 8000c82:	3308      	adds	r3, #8
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d20a      	bcs.n	8000ca2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000c8c:	7bfa      	ldrb	r2, [r7, #15]
 8000c8e:	491c      	ldr	r1, [pc, #112]	@ (8000d00 <RescheduleTimerList+0x128>)
 8000c90:	4613      	mov	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	4413      	add	r3, r2
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	440b      	add	r3, r1
 8000c9a:	3308      	adds	r3, #8
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	e013      	b.n	8000cca <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000ca2:	7bfa      	ldrb	r2, [r7, #15]
 8000ca4:	4916      	ldr	r1, [pc, #88]	@ (8000d00 <RescheduleTimerList+0x128>)
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	4413      	add	r3, r2
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	440b      	add	r3, r1
 8000cb0:	3308      	adds	r3, #8
 8000cb2:	6819      	ldr	r1, [r3, #0]
 8000cb4:	88fb      	ldrh	r3, [r7, #6]
 8000cb6:	7bfa      	ldrb	r2, [r7, #15]
 8000cb8:	1ac9      	subs	r1, r1, r3
 8000cba:	4811      	ldr	r0, [pc, #68]	@ (8000d00 <RescheduleTimerList+0x128>)
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	4403      	add	r3, r0
 8000cc6:	3308      	adds	r3, #8
 8000cc8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000cca:	7bfa      	ldrb	r2, [r7, #15]
 8000ccc:	490c      	ldr	r1, [pc, #48]	@ (8000d00 <RescheduleTimerList+0x128>)
 8000cce:	4613      	mov	r3, r2
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	4413      	add	r3, r2
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	440b      	add	r3, r1
 8000cd8:	3315      	adds	r3, #21
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	2b06      	cmp	r3, #6
 8000ce2:	d1c7      	bne.n	8000c74 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000ce4:	89bb      	ldrh	r3, [r7, #12]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff1e 	bl	8000b28 <RestartWakeupCounter>

  return ;
 8000cec:	bf00      	nop
}
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40002800 	.word	0x40002800
 8000cf8:	2000013c 	.word	0x2000013c
 8000cfc:	2000012c 	.word	0x2000012c
 8000d00:	2000009c 	.word	0x2000009c
 8000d04:	20000134 	.word	0x20000134
 8000d08:	2000013a 	.word	0x2000013a

08000d0c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	@ 0x28
 8000d10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d12:	f3ef 8310 	mrs	r3, PRIMASK
 8000d16:	617b      	str	r3, [r7, #20]
  return(result);
 8000d18:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000d20:	4b59      	ldr	r3, [pc, #356]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	22ca      	movs	r2, #202	@ 0xca
 8000d26:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d28:	4b57      	ldr	r3, [pc, #348]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2253      	movs	r2, #83	@ 0x53
 8000d2e:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000d30:	4b55      	ldr	r3, [pc, #340]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	689a      	ldr	r2, [r3, #8]
 8000d36:	4b54      	ldr	r3, [pc, #336]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000d3e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000d40:	4b52      	ldr	r3, [pc, #328]	@ (8000e8c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000d48:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d4c:	4950      	ldr	r1, [pc, #320]	@ (8000e90 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d4e:	4613      	mov	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4413      	add	r3, r2
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	440b      	add	r3, r1
 8000d58:	330c      	adds	r3, #12
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d16e      	bne.n	8000e40 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000d62:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d66:	494a      	ldr	r1, [pc, #296]	@ (8000e90 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d68:	4613      	mov	r3, r2
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	4413      	add	r3, r2
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	440b      	add	r3, r1
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000d76:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d7a:	4945      	ldr	r1, [pc, #276]	@ (8000e90 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4413      	add	r3, r2
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	440b      	add	r3, r1
 8000d86:	3310      	adds	r3, #16
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000d8c:	4b41      	ldr	r3, [pc, #260]	@ (8000e94 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d04c      	beq.n	8000e30 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000d96:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d9a:	493d      	ldr	r1, [pc, #244]	@ (8000e90 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4413      	add	r3, r2
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	440b      	add	r3, r1
 8000da6:	330d      	adds	r3, #13
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d124      	bne.n	8000dfa <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000db0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000db4:	2101      	movs	r1, #1
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fdf2 	bl	80009a0 <UnlinkTimer>
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dbe:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	f383 8810 	msr	PRIMASK, r3
}
 8000dc6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000dc8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000dcc:	4930      	ldr	r1, [pc, #192]	@ (8000e90 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	440b      	add	r3, r1
 8000dd8:	3304      	adds	r3, #4
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000de0:	4611      	mov	r1, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 fa32 	bl	800124c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000de8:	4b27      	ldr	r3, [pc, #156]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	22ca      	movs	r2, #202	@ 0xca
 8000dee:	625a      	str	r2, [r3, #36]	@ 0x24
 8000df0:	4b25      	ldr	r3, [pc, #148]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2253      	movs	r2, #83	@ 0x53
 8000df6:	625a      	str	r2, [r3, #36]	@ 0x24
 8000df8:	e012      	b.n	8000e20 <HW_TS_RTC_Wakeup_Handler+0x114>
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dfc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f383 8810 	msr	PRIMASK, r3
}
 8000e04:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000e06:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f99a 	bl	8001144 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000e10:	4b1d      	ldr	r3, [pc, #116]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	22ca      	movs	r2, #202	@ 0xca
 8000e16:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e18:	4b1b      	ldr	r3, [pc, #108]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2253      	movs	r2, #83	@ 0x53
 8000e1e:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000e20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e24:	69fa      	ldr	r2, [r7, #28]
 8000e26:	4619      	mov	r1, r3
 8000e28:	69b8      	ldr	r0, [r7, #24]
 8000e2a:	f000 fa95 	bl	8001358 <HW_TS_RTC_Int_AppNot>
 8000e2e:	e022      	b.n	8000e76 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8000e30:	f7ff fed2 	bl	8000bd8 <RescheduleTimerList>
 8000e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e36:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	f383 8810 	msr	PRIMASK, r3
}
 8000e3e:	e01a      	b.n	8000e76 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000e40:	bf00      	nop
 8000e42:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0f8      	beq.n	8000e42 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000e50:	4b0d      	ldr	r3, [pc, #52]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000e60:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e62:	4b0d      	ldr	r3, [pc, #52]	@ (8000e98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e64:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e6c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f383 8810 	msr	PRIMASK, r3
}
 8000e74:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8000e76:	4b04      	ldr	r3, [pc, #16]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	22ff      	movs	r2, #255	@ 0xff
 8000e7c:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8000e7e:	bf00      	nop
}
 8000e80:	3728      	adds	r7, #40	@ 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	2000013c 	.word	0x2000013c
 8000e8c:	2000012c 	.word	0x2000012c
 8000e90:	2000009c 	.word	0x2000009c
 8000e94:	20000134 	.word	0x20000134
 8000e98:	58000800 	.word	0x58000800

08000e9c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000ea8:	4b5e      	ldr	r3, [pc, #376]	@ (8001024 <HW_TS_Init+0x188>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	22ca      	movs	r2, #202	@ 0xca
 8000eae:	625a      	str	r2, [r3, #36]	@ 0x24
 8000eb0:	4b5c      	ldr	r3, [pc, #368]	@ (8001024 <HW_TS_Init+0x188>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2253      	movs	r2, #83	@ 0x53
 8000eb6:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000eb8:	4b5b      	ldr	r3, [pc, #364]	@ (8001028 <HW_TS_Init+0x18c>)
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	4a5a      	ldr	r2, [pc, #360]	@ (8001028 <HW_TS_Init+0x18c>)
 8000ebe:	f043 0320 	orr.w	r3, r3, #32
 8000ec2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000ec4:	4b58      	ldr	r3, [pc, #352]	@ (8001028 <HW_TS_Init+0x18c>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	f1c3 0304 	rsb	r3, r3, #4
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b55      	ldr	r3, [pc, #340]	@ (800102c <HW_TS_Init+0x190>)
 8000ed8:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000eda:	4b53      	ldr	r3, [pc, #332]	@ (8001028 <HW_TS_Init+0x18c>)
 8000edc:	691b      	ldr	r3, [r3, #16]
 8000ede:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8000ee2:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8000ee6:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	fa92 f2a2 	rbit	r2, r2
 8000eee:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	2a00      	cmp	r2, #0
 8000ef8:	d101      	bne.n	8000efe <HW_TS_Init+0x62>
  {
    return 32U;
 8000efa:	2220      	movs	r2, #32
 8000efc:	e003      	b.n	8000f06 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	fab2 f282 	clz	r2, r2
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	40d3      	lsrs	r3, r2
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b48      	ldr	r3, [pc, #288]	@ (8001030 <HW_TS_Init+0x194>)
 8000f10:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000f12:	4b45      	ldr	r3, [pc, #276]	@ (8001028 <HW_TS_Init+0x18c>)
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	3301      	adds	r3, #1
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	4b44      	ldr	r3, [pc, #272]	@ (8001034 <HW_TS_Init+0x198>)
 8000f24:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000f26:	4b43      	ldr	r3, [pc, #268]	@ (8001034 <HW_TS_Init+0x198>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	4a40      	ldr	r2, [pc, #256]	@ (8001030 <HW_TS_Init+0x194>)
 8000f2e:	7812      	ldrb	r2, [r2, #0]
 8000f30:	fb02 f303 	mul.w	r3, r2, r3
 8000f34:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000f38:	4a3c      	ldr	r2, [pc, #240]	@ (800102c <HW_TS_Init+0x190>)
 8000f3a:	7812      	ldrb	r2, [r2, #0]
 8000f3c:	40d3      	lsrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d904      	bls.n	8000f54 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001038 <HW_TS_Init+0x19c>)
 8000f4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f50:	801a      	strh	r2, [r3, #0]
 8000f52:	e003      	b.n	8000f5c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	4b37      	ldr	r3, [pc, #220]	@ (8001038 <HW_TS_Init+0x19c>)
 8000f5a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f5c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000f60:	f7ff fb9c 	bl	800069c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f64:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000f68:	f7ff fb84 	bl	8000674 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d13d      	bne.n	8000fee <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f72:	4b32      	ldr	r3, [pc, #200]	@ (800103c <HW_TS_Init+0x1a0>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f78:	4b31      	ldr	r3, [pc, #196]	@ (8001040 <HW_TS_Init+0x1a4>)
 8000f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	77fb      	strb	r3, [r7, #31]
 8000f84:	e00c      	b.n	8000fa0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000f86:	7ffa      	ldrb	r2, [r7, #31]
 8000f88:	492e      	ldr	r1, [pc, #184]	@ (8001044 <HW_TS_Init+0x1a8>)
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	4413      	add	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	440b      	add	r3, r1
 8000f94:	330c      	adds	r3, #12
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f9a:	7ffb      	ldrb	r3, [r7, #31]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	77fb      	strb	r3, [r7, #31]
 8000fa0:	7ffb      	ldrb	r3, [r7, #31]
 8000fa2:	2b05      	cmp	r3, #5
 8000fa4:	d9ef      	bls.n	8000f86 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000fa6:	4b28      	ldr	r3, [pc, #160]	@ (8001048 <HW_TS_Init+0x1ac>)
 8000fa8:	2206      	movs	r2, #6
 8000faa:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8000fac:	4b1d      	ldr	r3, [pc, #116]	@ (8001024 <HW_TS_Init+0x188>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001024 <HW_TS_Init+0x188>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000fba:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000fbc:	4b19      	ldr	r3, [pc, #100]	@ (8001024 <HW_TS_Init+0x188>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	4b17      	ldr	r3, [pc, #92]	@ (8001024 <HW_TS_Init+0x188>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000fcc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000fce:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <HW_TS_Init+0x1b0>)
 8000fd0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000fd4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000fd6:	2003      	movs	r0, #3
 8000fd8:	f000 fe6a 	bl	8001cb0 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000fdc:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <HW_TS_Init+0x188>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <HW_TS_Init+0x188>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	e009      	b.n	8001002 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8000fee:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <HW_TS_Init+0x188>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d002      	beq.n	8001002 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f000 fe3d 	bl	8001c7c <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001002:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <HW_TS_Init+0x188>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	22ff      	movs	r2, #255	@ 0xff
 8001008:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800100a:	2200      	movs	r2, #0
 800100c:	2103      	movs	r1, #3
 800100e:	2003      	movs	r0, #3
 8001010:	f000 fdce 	bl	8001bb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001014:	2003      	movs	r0, #3
 8001016:	f000 fdf5 	bl	8001c04 <HAL_NVIC_EnableIRQ>

  return;
 800101a:	bf00      	nop
}
 800101c:	3720      	adds	r7, #32
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2000013c 	.word	0x2000013c
 8001028:	40002800 	.word	0x40002800
 800102c:	20000135 	.word	0x20000135
 8001030:	20000136 	.word	0x20000136
 8001034:	20000138 	.word	0x20000138
 8001038:	2000013a 	.word	0x2000013a
 800103c:	20000134 	.word	0x20000134
 8001040:	20000130 	.word	0x20000130
 8001044:	2000009c 	.word	0x2000009c
 8001048:	2000012c 	.word	0x2000012c
 800104c:	58000800 	.word	0x58000800

08001050 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001050:	b480      	push	{r7}
 8001052:	b08b      	sub	sp, #44	@ 0x2c
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	4613      	mov	r3, r2
 800105e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001066:	f3ef 8310 	mrs	r3, PRIMASK
 800106a:	61fb      	str	r3, [r7, #28]
  return(result);
 800106c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800106e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001074:	e004      	b.n	8001080 <HW_TS_Create+0x30>
  {
    loop++;
 8001076:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800107a:	3301      	adds	r3, #1
 800107c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001080:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001084:	2b05      	cmp	r3, #5
 8001086:	d80c      	bhi.n	80010a2 <HW_TS_Create+0x52>
 8001088:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800108c:	492c      	ldr	r1, [pc, #176]	@ (8001140 <HW_TS_Create+0xf0>)
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	440b      	add	r3, r1
 8001098:	330c      	adds	r3, #12
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1e9      	bne.n	8001076 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d038      	beq.n	800111c <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80010aa:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80010ae:	4924      	ldr	r1, [pc, #144]	@ (8001140 <HW_TS_Create+0xf0>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	440b      	add	r3, r1
 80010ba:	330c      	adds	r3, #12
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
 80010c0:	6a3b      	ldr	r3, [r7, #32]
 80010c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	f383 8810 	msr	PRIMASK, r3
}
 80010ca:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80010cc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80010d0:	491b      	ldr	r1, [pc, #108]	@ (8001140 <HW_TS_Create+0xf0>)
 80010d2:	4613      	mov	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	4413      	add	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	440b      	add	r3, r1
 80010dc:	3310      	adds	r3, #16
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80010e2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80010e6:	4916      	ldr	r1, [pc, #88]	@ (8001140 <HW_TS_Create+0xf0>)
 80010e8:	4613      	mov	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	440b      	add	r3, r1
 80010f2:	330d      	adds	r3, #13
 80010f4:	79fa      	ldrb	r2, [r7, #7]
 80010f6:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80010f8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80010fc:	4910      	ldr	r1, [pc, #64]	@ (8001140 <HW_TS_Create+0xf0>)
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	440b      	add	r3, r1
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001112:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001114:	2300      	movs	r3, #0
 8001116:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800111a:	e008      	b.n	800112e <HW_TS_Create+0xde>
 800111c:	6a3b      	ldr	r3, [r7, #32]
 800111e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f383 8810 	msr	PRIMASK, r3
}
 8001126:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001128:	2301      	movs	r3, #1
 800112a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 800112e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001132:	4618      	mov	r0, r3
 8001134:	372c      	adds	r7, #44	@ 0x2c
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	2000009c 	.word	0x2000009c

08001144 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800114e:	f3ef 8310 	mrs	r3, PRIMASK
 8001152:	60fb      	str	r3, [r7, #12]
  return(result);
 8001154:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001156:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i
}
 800115a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800115c:	2003      	movs	r0, #3
 800115e:	f000 fd69 	bl	8001c34 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001162:	4b34      	ldr	r3, [pc, #208]	@ (8001234 <HW_TS_Stop+0xf0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	22ca      	movs	r2, #202	@ 0xca
 8001168:	625a      	str	r2, [r3, #36]	@ 0x24
 800116a:	4b32      	ldr	r3, [pc, #200]	@ (8001234 <HW_TS_Stop+0xf0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2253      	movs	r2, #83	@ 0x53
 8001170:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001172:	79fa      	ldrb	r2, [r7, #7]
 8001174:	4930      	ldr	r1, [pc, #192]	@ (8001238 <HW_TS_Stop+0xf4>)
 8001176:	4613      	mov	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	440b      	add	r3, r1
 8001180:	330c      	adds	r3, #12
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d142      	bne.n	8001210 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fc06 	bl	80009a0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001194:	4b29      	ldr	r3, [pc, #164]	@ (800123c <HW_TS_Stop+0xf8>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800119a:	7cfb      	ldrb	r3, [r7, #19]
 800119c:	2b06      	cmp	r3, #6
 800119e:	d12f      	bne.n	8001200 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80011a0:	4b27      	ldr	r3, [pc, #156]	@ (8001240 <HW_TS_Stop+0xfc>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011ac:	d107      	bne.n	80011be <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80011ae:	bf00      	nop
 80011b0:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <HW_TS_Stop+0xf0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f8      	bne.n	80011b0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80011be:	4b1d      	ldr	r3, [pc, #116]	@ (8001234 <HW_TS_Stop+0xf0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <HW_TS_Stop+0xf0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011cc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80011ce:	bf00      	nop
 80011d0:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <HW_TS_Stop+0xf0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f8      	beq.n	80011d0 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HW_TS_Stop+0xf0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <HW_TS_Stop+0xf0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80011ee:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011f0:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <HW_TS_Stop+0x100>)
 80011f2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011f6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 fd59 	bl	8001cb0 <HAL_NVIC_ClearPendingIRQ>
 80011fe:	e007      	b.n	8001210 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001200:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <HW_TS_Stop+0x104>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	7cfa      	ldrb	r2, [r7, #19]
 8001208:	429a      	cmp	r2, r3
 800120a:	d001      	beq.n	8001210 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800120c:	f7ff fce4 	bl	8000bd8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001210:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <HW_TS_Stop+0xf0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	22ff      	movs	r2, #255	@ 0xff
 8001216:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001218:	2003      	movs	r0, #3
 800121a:	f000 fcf3 	bl	8001c04 <HAL_NVIC_EnableIRQ>
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	f383 8810 	msr	PRIMASK, r3
}
 8001228:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800122a:	bf00      	nop
}
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000013c 	.word	0x2000013c
 8001238:	2000009c 	.word	0x2000009c
 800123c:	2000012c 	.word	0x2000012c
 8001240:	40002800 	.word	0x40002800
 8001244:	58000800 	.word	0x58000800
 8001248:	2000012d 	.word	0x2000012d

0800124c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001258:	79fa      	ldrb	r2, [r7, #7]
 800125a:	493b      	ldr	r1, [pc, #236]	@ (8001348 <HW_TS_Start+0xfc>)
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	440b      	add	r3, r1
 8001266:	330c      	adds	r3, #12
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d103      	bne.n	8001278 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff66 	bl	8001144 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001278:	f3ef 8310 	mrs	r3, PRIMASK
 800127c:	60fb      	str	r3, [r7, #12]
  return(result);
 800127e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001280:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001282:	b672      	cpsid	i
}
 8001284:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001286:	2003      	movs	r0, #3
 8001288:	f000 fcd4 	bl	8001c34 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800128c:	4b2f      	ldr	r3, [pc, #188]	@ (800134c <HW_TS_Start+0x100>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	22ca      	movs	r2, #202	@ 0xca
 8001292:	625a      	str	r2, [r3, #36]	@ 0x24
 8001294:	4b2d      	ldr	r3, [pc, #180]	@ (800134c <HW_TS_Start+0x100>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2253      	movs	r2, #83	@ 0x53
 800129a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800129c:	79fa      	ldrb	r2, [r7, #7]
 800129e:	492a      	ldr	r1, [pc, #168]	@ (8001348 <HW_TS_Start+0xfc>)
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	440b      	add	r3, r1
 80012aa:	330c      	adds	r3, #12
 80012ac:	2202      	movs	r2, #2
 80012ae:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80012b0:	79fa      	ldrb	r2, [r7, #7]
 80012b2:	4925      	ldr	r1, [pc, #148]	@ (8001348 <HW_TS_Start+0xfc>)
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	440b      	add	r3, r1
 80012be:	3308      	adds	r3, #8
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80012c4:	79fa      	ldrb	r2, [r7, #7]
 80012c6:	4920      	ldr	r1, [pc, #128]	@ (8001348 <HW_TS_Start+0xfc>)
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	440b      	add	r3, r1
 80012d2:	3304      	adds	r3, #4
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fab6 	bl	800084c <linkTimer>
 80012e0:	4603      	mov	r3, r0
 80012e2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <HW_TS_Start+0x104>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80012ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <HW_TS_Start+0x108>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	7c7a      	ldrb	r2, [r7, #17]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d002      	beq.n	80012fc <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80012f6:	f7ff fc6f 	bl	8000bd8 <RescheduleTimerList>
 80012fa:	e013      	b.n	8001324 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80012fc:	79fa      	ldrb	r2, [r7, #7]
 80012fe:	4912      	ldr	r1, [pc, #72]	@ (8001348 <HW_TS_Start+0xfc>)
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	440b      	add	r3, r1
 800130a:	3308      	adds	r3, #8
 800130c:	6819      	ldr	r1, [r3, #0]
 800130e:	8a7b      	ldrh	r3, [r7, #18]
 8001310:	79fa      	ldrb	r2, [r7, #7]
 8001312:	1ac9      	subs	r1, r1, r3
 8001314:	480c      	ldr	r0, [pc, #48]	@ (8001348 <HW_TS_Start+0xfc>)
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	4403      	add	r3, r0
 8001320:	3308      	adds	r3, #8
 8001322:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001324:	4b09      	ldr	r3, [pc, #36]	@ (800134c <HW_TS_Start+0x100>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	22ff      	movs	r2, #255	@ 0xff
 800132a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800132c:	2003      	movs	r0, #3
 800132e:	f000 fc69 	bl	8001c04 <HAL_NVIC_EnableIRQ>
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	f383 8810 	msr	PRIMASK, r3
}
 800133c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800133e:	bf00      	nop
}
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000009c 	.word	0x2000009c
 800134c:	2000013c 	.word	0x2000013c
 8001350:	2000012c 	.word	0x2000012c
 8001354:	2000012d 	.word	0x2000012d

08001358 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	460b      	mov	r3, r1
 8001362:	607a      	str	r2, [r7, #4]
 8001364:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4798      	blx	r3

  return;
 800136a:	bf00      	nop
}
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <LL_RCC_LSE_SetDriveCapability>:
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800137a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800137e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001382:	f023 0218 	bic.w	r2, r3, #24
 8001386:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4313      	orrs	r3, r2
 800138e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a4:	f000 fa2e 	bl	8001804 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80013a8:	f7fe ffb4 	bl	8000314 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ac:	f000 f81a 	bl	80013e4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80013b0:	f000 f874 	bl	800149c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b4:	f7ff f934 	bl	8000620 <MX_GPIO_Init>
  MX_RTC_Init();
 80013b8:	f000 f8d2 	bl	8001560 <MX_RTC_Init>
  MX_RF_Init();
 80013bc:	f000 f89f 	bl	80014fe <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(SOLENOID_GPIO_Port, SOLENOID_Pin, GPIO_PIN_SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013c6:	4806      	ldr	r0, [pc, #24]	@ (80013e0 <main+0x40>)
 80013c8:	f000 febc 	bl	8002144 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80013cc:	f7fe ffb0 	bl	8000330 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80013d0:	f7ff f8db 	bl	800058a <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	f006 fb94 	bl	8007b04 <UTIL_SEQ_Run>
    MX_APPE_Process();
 80013dc:	bf00      	nop
 80013de:	e7f7      	b.n	80013d0 <main+0x30>
 80013e0:	48000c00 	.word	0x48000c00

080013e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b09a      	sub	sp, #104	@ 0x68
 80013e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ea:	f107 0320 	add.w	r3, r7, #32
 80013ee:	2248      	movs	r2, #72	@ 0x48
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f006 fdae 	bl	8007f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]
 8001406:	615a      	str	r2, [r3, #20]
 8001408:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800140a:	f000 feeb 	bl	80021e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800140e:	2010      	movs	r0, #16
 8001410:	f7ff ffaf 	bl	8001372 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001414:	4b20      	ldr	r3, [pc, #128]	@ (8001498 <SystemClock_Config+0xb4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800141c:	4a1e      	ldr	r2, [pc, #120]	@ (8001498 <SystemClock_Config+0xb4>)
 800141e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <SystemClock_Config+0xb4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001430:	2307      	movs	r3, #7
 8001432:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001434:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800143a:	2301      	movs	r3, #1
 800143c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800143e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001444:	2340      	movs	r3, #64	@ 0x40
 8001446:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001448:	2300      	movs	r3, #0
 800144a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144c:	f107 0320 	add.w	r3, r7, #32
 8001450:	4618      	mov	r0, r3
 8001452:	f001 fa43 	bl	80028dc <HAL_RCC_OscConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800145c:	f000 f83e 	bl	80014dc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001460:	236f      	movs	r3, #111	@ 0x6f
 8001462:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001464:	2302      	movs	r3, #2
 8001466:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2101      	movs	r1, #1
 8001480:	4618      	mov	r0, r3
 8001482:	f001 fedf 	bl	8003244 <HAL_RCC_ClockConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800148c:	f000 f826 	bl	80014dc <Error_Handler>
  }
}
 8001490:	bf00      	nop
 8001492:	3768      	adds	r7, #104	@ 0x68
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	58000400 	.word	0x58000400

0800149c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b094      	sub	sp, #80	@ 0x50
 80014a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a2:	463b      	mov	r3, r7
 80014a4:	2250      	movs	r2, #80	@ 0x50
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f006 fd53 	bl	8007f54 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80014ae:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80014b2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80014b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014b8:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80014ba:	2300      	movs	r3, #0
 80014bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80014be:	2310      	movs	r3, #16
 80014c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c2:	463b      	mov	r3, r7
 80014c4:	4618      	mov	r0, r3
 80014c6:	f002 fc23 	bl	8003d10 <HAL_RCCEx_PeriphCLKConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80014d0:	f000 f804 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80014d4:	bf00      	nop
 80014d6:	3750      	adds	r7, #80	@ 0x50
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014e0:	b672      	cpsid	i
}
 80014e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <Error_Handler+0x8>

080014e8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001518:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800151c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001520:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800152e:	b480      	push	{r7}
 8001530:	b085      	sub	sp, #20
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800153a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800153c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4313      	orrs	r3, r2
 8001544:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800154a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4013      	ands	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001552:	68fb      	ldr	r3, [r7, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <MX_RTC_Init+0x4c>)
 8001566:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <MX_RTC_Init+0x50>)
 8001568:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800156a:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <MX_RTC_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001570:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <MX_RTC_Init+0x4c>)
 8001572:	220f      	movs	r2, #15
 8001574:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001576:	4b0d      	ldr	r3, [pc, #52]	@ (80015ac <MX_RTC_Init+0x4c>)
 8001578:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800157c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <MX_RTC_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001584:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <MX_RTC_Init+0x4c>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800158a:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <MX_RTC_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <MX_RTC_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	@ (80015ac <MX_RTC_Init+0x4c>)
 8001598:	f003 f868 	bl	800466c <HAL_RTC_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80015a2:	f7ff ff9b 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000013c 	.word	0x2000013c
 80015b0:	40002800 	.word	0x40002800

080015b4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b096      	sub	sp, #88	@ 0x58
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015bc:	f107 0308 	add.w	r3, r7, #8
 80015c0:	2250      	movs	r2, #80	@ 0x50
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f006 fcc5 	bl	8007f54 <memset>
  if(rtcHandle->Instance==RTC)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001608 <HAL_RTC_MspInit+0x54>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d115      	bne.n	8001600 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80015d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015d8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80015da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015de:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e0:	f107 0308 	add.w	r3, r7, #8
 80015e4:	4618      	mov	r0, r3
 80015e6:	f002 fb93 	bl	8003d10 <HAL_RCCEx_PeriphCLKConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80015f0:	f7ff ff74 	bl	80014dc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015f4:	f7ff ff8a 	bl	800150c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80015f8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80015fc:	f7ff ff97 	bl	800152e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001600:	bf00      	nop
 8001602:	3758      	adds	r7, #88	@ 0x58
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40002800 	.word	0x40002800

0800160c <LL_AHB3_GRP1_EnableClock>:
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001618:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800161a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4313      	orrs	r3, r2
 8001622:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001628:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4013      	ands	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001630:	68fb      	ldr	r3, [r7, #12]
}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001642:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001646:	f7ff ffe1 	bl	800160c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	202e      	movs	r0, #46	@ 0x2e
 8001650:	f000 faae 	bl	8001bb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001654:	202e      	movs	r0, #46	@ 0x2e
 8001656:	f000 fad5 	bl	8001c04 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}

0800165e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001662:	bf00      	nop
 8001664:	e7fd      	b.n	8001662 <NMI_Handler+0x4>

08001666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166a:	bf00      	nop
 800166c:	e7fd      	b.n	800166a <HardFault_Handler+0x4>

0800166e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001672:	bf00      	nop
 8001674:	e7fd      	b.n	8001672 <MemManage_Handler+0x4>

08001676 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167a:	bf00      	nop
 800167c:	e7fd      	b.n	800167a <BusFault_Handler+0x4>

0800167e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001682:	bf00      	nop
 8001684:	e7fd      	b.n	8001682 <UsageFault_Handler+0x4>

08001686 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b4:	f000 f900 	bl	80018b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80016c0:	f000 fd6c 	bl	800219c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	HW_TS_RTC_Wakeup_Handler();
 80016cc:	f7ff fb1e 	bl	8000d0c <HW_TS_RTC_Wakeup_Handler>
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	HW_IPCC_Rx_Handler();
 80016d8:	f006 f818 	bl	800770c <HW_IPCC_Rx_Handler>
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}

080016e0 <IPCC_C1_TX_IRQHandler>:

void IPCC_C1_TX_IRQHandler(void) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	HW_IPCC_Tx_Handler();
 80016e4:	f006 f848 	bl	8007778 <HW_IPCC_Tx_Handler>
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}

080016ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80016f0:	4b24      	ldr	r3, [pc, #144]	@ (8001784 <SystemInit+0x98>)
 80016f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016f6:	4a23      	ldr	r2, [pc, #140]	@ (8001784 <SystemInit+0x98>)
 80016f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001710:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001714:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001718:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800171a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001724:	4b18      	ldr	r3, [pc, #96]	@ (8001788 <SystemInit+0x9c>)
 8001726:	4013      	ands	r3, r2
 8001728:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800172a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800172e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001732:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001736:	f023 0305 	bic.w	r3, r3, #5
 800173a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800173e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001742:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001746:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001756:	4a0d      	ldr	r2, [pc, #52]	@ (800178c <SystemInit+0xa0>)
 8001758:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800175a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800175e:	4a0b      	ldr	r2, [pc, #44]	@ (800178c <SystemInit+0xa0>)
 8001760:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800176c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001770:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00
 8001788:	faf6fefb 	.word	0xfaf6fefb
 800178c:	22041000 	.word	0x22041000

08001790 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001790:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001792:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001794:	3304      	adds	r3, #4

08001796 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001796:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001798:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800179a:	d3f9      	bcc.n	8001790 <CopyDataInit>
  bx lr
 800179c:	4770      	bx	lr

0800179e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800179e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80017a0:	3004      	adds	r0, #4

080017a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80017a2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80017a4:	d3fb      	bcc.n	800179e <FillZerobss>
  bx lr
 80017a6:	4770      	bx	lr

080017a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017a8:	480c      	ldr	r0, [pc, #48]	@ (80017dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017ac:	f7ff ff9e 	bl	80016ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80017b0:	480b      	ldr	r0, [pc, #44]	@ (80017e0 <LoopForever+0x6>)
 80017b2:	490c      	ldr	r1, [pc, #48]	@ (80017e4 <LoopForever+0xa>)
 80017b4:	4a0c      	ldr	r2, [pc, #48]	@ (80017e8 <LoopForever+0xe>)
 80017b6:	2300      	movs	r3, #0
 80017b8:	f7ff ffed 	bl	8001796 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80017bc:	480b      	ldr	r0, [pc, #44]	@ (80017ec <LoopForever+0x12>)
 80017be:	490c      	ldr	r1, [pc, #48]	@ (80017f0 <LoopForever+0x16>)
 80017c0:	4a0c      	ldr	r2, [pc, #48]	@ (80017f4 <LoopForever+0x1a>)
 80017c2:	2300      	movs	r3, #0
 80017c4:	f7ff ffe7 	bl	8001796 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80017c8:	480b      	ldr	r0, [pc, #44]	@ (80017f8 <LoopForever+0x1e>)
 80017ca:	490c      	ldr	r1, [pc, #48]	@ (80017fc <LoopForever+0x22>)
 80017cc:	2300      	movs	r3, #0
 80017ce:	f7ff ffe8 	bl	80017a2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017d2:	f006 fbc7 	bl	8007f64 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80017d6:	f7ff fde3 	bl	80013a0 <main>

080017da <LoopForever>:

LoopForever:
  b LoopForever
 80017da:	e7fe      	b.n	80017da <LoopForever>
  ldr   r0, =_estack
 80017dc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80017e0:	20000008 	.word	0x20000008
 80017e4:	2000002c 	.word	0x2000002c
 80017e8:	08008380 	.word	0x08008380
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80017ec:	200301e4 	.word	0x200301e4
 80017f0:	20030a67 	.word	0x20030a67
 80017f4:	080083f2 	.word	0x080083f2
  INIT_BSS _sbss, _ebss
 80017f8:	20000080 	.word	0x20000080
 80017fc:	20000310 	.word	0x20000310

08001800 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001800:	e7fe      	b.n	8001800 <ADC1_IRQHandler>
	...

08001804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800180e:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <HAL_Init+0x3c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a0b      	ldr	r2, [pc, #44]	@ (8001840 <HAL_Init+0x3c>)
 8001814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001818:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181a:	2003      	movs	r0, #3
 800181c:	f000 f9a8 	bl	8001b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001820:	200f      	movs	r0, #15
 8001822:	f000 f80f 	bl	8001844 <HAL_InitTick>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d002      	beq.n	8001832 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	71fb      	strb	r3, [r7, #7]
 8001830:	e001      	b.n	8001836 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001832:	f7ff ff04 	bl	800163e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001836:	79fb      	ldrb	r3, [r7, #7]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	58004000 	.word	0x58004000

08001844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001850:	4b17      	ldr	r3, [pc, #92]	@ (80018b0 <HAL_InitTick+0x6c>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d024      	beq.n	80018a2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001858:	f001 ffca 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 800185c:	4602      	mov	r2, r0
 800185e:	4b14      	ldr	r3, [pc, #80]	@ (80018b0 <HAL_InitTick+0x6c>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	4619      	mov	r1, r3
 8001864:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001868:	fbb3 f3f1 	udiv	r3, r3, r1
 800186c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001870:	4618      	mov	r0, r3
 8001872:	f000 f9f7 	bl	8001c64 <HAL_SYSTICK_Config>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10f      	bne.n	800189c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b0f      	cmp	r3, #15
 8001880:	d809      	bhi.n	8001896 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001882:	2200      	movs	r2, #0
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	f04f 30ff 	mov.w	r0, #4294967295
 800188a:	f000 f991 	bl	8001bb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800188e:	4a09      	ldr	r2, [pc, #36]	@ (80018b4 <HAL_InitTick+0x70>)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	e007      	b.n	80018a6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	73fb      	strb	r3, [r7, #15]
 800189a:	e004      	b.n	80018a6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	73fb      	strb	r3, [r7, #15]
 80018a0:	e001      	b.n	80018a6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000010 	.word	0x20000010
 80018b4:	2000000c 	.word	0x2000000c

080018b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018bc:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_IncTick+0x20>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <HAL_IncTick+0x24>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a04      	ldr	r2, [pc, #16]	@ (80018dc <HAL_IncTick+0x24>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000010 	.word	0x20000010
 80018dc:	20000160 	.word	0x20000160

080018e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b03      	ldr	r3, [pc, #12]	@ (80018f4 <HAL_GetTick+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000160 	.word	0x20000160

080018f8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80018fc:	4b03      	ldr	r3, [pc, #12]	@ (800190c <HAL_GetTickPrio+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	2000000c 	.word	0x2000000c

08001910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800192c:	4013      	ands	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001938:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800193c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001942:	4a04      	ldr	r2, [pc, #16]	@ (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	60d3      	str	r3, [r2, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800195c:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <__NVIC_GetPriorityGrouping+0x18>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	f003 0307 	and.w	r3, r3, #7
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	2b00      	cmp	r3, #0
 8001984:	db0b      	blt.n	800199e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	4907      	ldr	r1, [pc, #28]	@ (80019ac <__NVIC_EnableIRQ+0x38>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	095b      	lsrs	r3, r3, #5
 8001994:	2001      	movs	r0, #1
 8001996:	fa00 f202 	lsl.w	r2, r0, r2
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000e100 	.word	0xe000e100

080019b0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	db12      	blt.n	80019e8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	f003 021f 	and.w	r2, r3, #31
 80019c8:	490a      	ldr	r1, [pc, #40]	@ (80019f4 <__NVIC_DisableIRQ+0x44>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	2001      	movs	r0, #1
 80019d2:	fa00 f202 	lsl.w	r2, r0, r2
 80019d6:	3320      	adds	r3, #32
 80019d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80019dc:	f3bf 8f4f 	dsb	sy
}
 80019e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019e2:	f3bf 8f6f 	isb	sy
}
 80019e6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000e100 	.word	0xe000e100

080019f8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	db0c      	blt.n	8001a24 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	f003 021f 	and.w	r2, r3, #31
 8001a10:	4907      	ldr	r1, [pc, #28]	@ (8001a30 <__NVIC_SetPendingIRQ+0x38>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	2001      	movs	r0, #1
 8001a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1e:	3340      	adds	r3, #64	@ 0x40
 8001a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000e100 	.word	0xe000e100

08001a34 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	db0c      	blt.n	8001a60 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	f003 021f 	and.w	r2, r3, #31
 8001a4c:	4907      	ldr	r1, [pc, #28]	@ (8001a6c <__NVIC_ClearPendingIRQ+0x38>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	2001      	movs	r0, #1
 8001a56:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5a:	3360      	adds	r3, #96	@ 0x60
 8001a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000e100 	.word	0xe000e100

08001a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db0a      	blt.n	8001a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	490c      	ldr	r1, [pc, #48]	@ (8001abc <__NVIC_SetPriority+0x4c>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	440b      	add	r3, r1
 8001a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a98:	e00a      	b.n	8001ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4908      	ldr	r1, [pc, #32]	@ (8001ac0 <__NVIC_SetPriority+0x50>)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	440b      	add	r3, r1
 8001aae:	761a      	strb	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	@ 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f1c3 0307 	rsb	r3, r3, #7
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	bf28      	it	cs
 8001ae2:	2304      	movcs	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d902      	bls.n	8001af4 <NVIC_EncodePriority+0x30>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3b03      	subs	r3, #3
 8001af2:	e000      	b.n	8001af6 <NVIC_EncodePriority+0x32>
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	401a      	ands	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	4313      	orrs	r3, r2
         );
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3724      	adds	r7, #36	@ 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b3c:	d301      	bcc.n	8001b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00f      	b.n	8001b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b42:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <SysTick_Config+0x40>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4a:	210f      	movs	r1, #15
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f7ff ff8e 	bl	8001a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b54:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <SysTick_Config+0x40>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5a:	4b04      	ldr	r3, [pc, #16]	@ (8001b6c <SysTick_Config+0x40>)
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	e000e010 	.word	0xe000e010

08001b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b07      	cmp	r3, #7
 8001b7c:	d00f      	beq.n	8001b9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b06      	cmp	r3, #6
 8001b82:	d00c      	beq.n	8001b9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b05      	cmp	r3, #5
 8001b88:	d009      	beq.n	8001b9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d006      	beq.n	8001b9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d003      	beq.n	8001b9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001b96:	218c      	movs	r1, #140	@ 0x8c
 8001b98:	4804      	ldr	r0, [pc, #16]	@ (8001bac <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001b9a:	f7ff fca5 	bl	80014e8 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff feb6 	bl	8001910 <__NVIC_SetPriorityGrouping>
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	08007ffc 	.word	0x08007ffc

08001bb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b0f      	cmp	r3, #15
 8001bc2:	d903      	bls.n	8001bcc <HAL_NVIC_SetPriority+0x1c>
 8001bc4:	21a4      	movs	r1, #164	@ 0xa4
 8001bc6:	480e      	ldr	r0, [pc, #56]	@ (8001c00 <HAL_NVIC_SetPriority+0x50>)
 8001bc8:	f7ff fc8e 	bl	80014e8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b0f      	cmp	r3, #15
 8001bd0:	d903      	bls.n	8001bda <HAL_NVIC_SetPriority+0x2a>
 8001bd2:	21a5      	movs	r1, #165	@ 0xa5
 8001bd4:	480a      	ldr	r0, [pc, #40]	@ (8001c00 <HAL_NVIC_SetPriority+0x50>)
 8001bd6:	f7ff fc87 	bl	80014e8 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bda:	f7ff febd 	bl	8001958 <__NVIC_GetPriorityGrouping>
 8001bde:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	68b9      	ldr	r1, [r7, #8]
 8001be4:	6978      	ldr	r0, [r7, #20]
 8001be6:	f7ff ff6d 	bl	8001ac4 <NVIC_EncodePriority>
 8001bea:	4602      	mov	r2, r0
 8001bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ff3c 	bl	8001a70 <__NVIC_SetPriority>
}
 8001bf8:	bf00      	nop
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	08007ffc 	.word	0x08007ffc

08001c04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	da03      	bge.n	8001c1e <HAL_NVIC_EnableIRQ+0x1a>
 8001c16:	21b6      	movs	r1, #182	@ 0xb6
 8001c18:	4805      	ldr	r0, [pc, #20]	@ (8001c30 <HAL_NVIC_EnableIRQ+0x2c>)
 8001c1a:	f7ff fc65 	bl	80014e8 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fea6 	bl	8001974 <__NVIC_EnableIRQ>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	08007ffc 	.word	0x08007ffc

08001c34 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	da03      	bge.n	8001c4e <HAL_NVIC_DisableIRQ+0x1a>
 8001c46:	21c6      	movs	r1, #198	@ 0xc6
 8001c48:	4805      	ldr	r0, [pc, #20]	@ (8001c60 <HAL_NVIC_DisableIRQ+0x2c>)
 8001c4a:	f7ff fc4d 	bl	80014e8 <assert_failed>

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff feac 	bl	80019b0 <__NVIC_DisableIRQ>
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	08007ffc 	.word	0x08007ffc

08001c64 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff5d 	bl	8001b2c <SysTick_Config>
 8001c72:	4603      	mov	r3, r0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	da04      	bge.n	8001c98 <HAL_NVIC_SetPendingIRQ+0x1c>
 8001c8e:	f240 1127 	movw	r1, #295	@ 0x127
 8001c92:	4806      	ldr	r0, [pc, #24]	@ (8001cac <HAL_NVIC_SetPendingIRQ+0x30>)
 8001c94:	f7ff fc28 	bl	80014e8 <assert_failed>

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff feab 	bl	80019f8 <__NVIC_SetPendingIRQ>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	08007ffc 	.word	0x08007ffc

08001cb0 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	da04      	bge.n	8001ccc <HAL_NVIC_ClearPendingIRQ+0x1c>
 8001cc2:	f240 1149 	movw	r1, #329	@ 0x149
 8001cc6:	4806      	ldr	r0, [pc, #24]	@ (8001ce0 <HAL_NVIC_ClearPendingIRQ+0x30>)
 8001cc8:	f7ff fc0e 	bl	80014e8 <assert_failed>

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff feaf 	bl	8001a34 <__NVIC_ClearPendingIRQ>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	08007ffc 	.word	0x08007ffc

08001ce4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001cf8:	d017      	beq.n	8001d2a <HAL_GPIO_Init+0x46>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a39      	ldr	r2, [pc, #228]	@ (8001de4 <HAL_GPIO_Init+0x100>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d013      	beq.n	8001d2a <HAL_GPIO_Init+0x46>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a38      	ldr	r2, [pc, #224]	@ (8001de8 <HAL_GPIO_Init+0x104>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d00f      	beq.n	8001d2a <HAL_GPIO_Init+0x46>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a37      	ldr	r2, [pc, #220]	@ (8001dec <HAL_GPIO_Init+0x108>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00b      	beq.n	8001d2a <HAL_GPIO_Init+0x46>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a36      	ldr	r2, [pc, #216]	@ (8001df0 <HAL_GPIO_Init+0x10c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d007      	beq.n	8001d2a <HAL_GPIO_Init+0x46>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a35      	ldr	r2, [pc, #212]	@ (8001df4 <HAL_GPIO_Init+0x110>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x46>
 8001d22:	21ab      	movs	r1, #171	@ 0xab
 8001d24:	4834      	ldr	r0, [pc, #208]	@ (8001df8 <HAL_GPIO_Init+0x114>)
 8001d26:	f7ff fbdf 	bl	80014e8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d004      	beq.n	8001d3e <HAL_GPIO_Init+0x5a>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d3c:	d303      	bcc.n	8001d46 <HAL_GPIO_Init+0x62>
 8001d3e:	21ac      	movs	r1, #172	@ 0xac
 8001d40:	482d      	ldr	r0, [pc, #180]	@ (8001df8 <HAL_GPIO_Init+0x114>)
 8001d42:	f7ff fbd1 	bl	80014e8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d035      	beq.n	8001dba <HAL_GPIO_Init+0xd6>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d031      	beq.n	8001dba <HAL_GPIO_Init+0xd6>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b11      	cmp	r3, #17
 8001d5c:	d02d      	beq.n	8001dba <HAL_GPIO_Init+0xd6>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d029      	beq.n	8001dba <HAL_GPIO_Init+0xd6>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b12      	cmp	r3, #18
 8001d6c:	d025      	beq.n	8001dba <HAL_GPIO_Init+0xd6>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001d76:	d020      	beq.n	8001dba <HAL_GPIO_Init+0xd6>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001d80:	d01b      	beq.n	8001dba <HAL_GPIO_Init+0xd6>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8001d8a:	d016      	beq.n	8001dba <HAL_GPIO_Init+0xd6>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8001d94:	d011      	beq.n	8001dba <HAL_GPIO_Init+0xd6>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8001d9e:	d00c      	beq.n	8001dba <HAL_GPIO_Init+0xd6>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8001da8:	d007      	beq.n	8001dba <HAL_GPIO_Init+0xd6>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0xd6>
 8001db2:	21ad      	movs	r1, #173	@ 0xad
 8001db4:	4810      	ldr	r0, [pc, #64]	@ (8001df8 <HAL_GPIO_Init+0x114>)
 8001db6:	f7ff fb97 	bl	80014e8 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 81af 	beq.w	8002122 <HAL_GPIO_Init+0x43e>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	f000 81aa 	beq.w	8002122 <HAL_GPIO_Init+0x43e>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	f000 81a5 	beq.w	8002122 <HAL_GPIO_Init+0x43e>
 8001dd8:	21ae      	movs	r1, #174	@ 0xae
 8001dda:	4807      	ldr	r0, [pc, #28]	@ (8001df8 <HAL_GPIO_Init+0x114>)
 8001ddc:	f7ff fb84 	bl	80014e8 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de0:	e19f      	b.n	8002122 <HAL_GPIO_Init+0x43e>
 8001de2:	bf00      	nop
 8001de4:	48000400 	.word	0x48000400
 8001de8:	48000800 	.word	0x48000800
 8001dec:	48000c00 	.word	0x48000c00
 8001df0:	48001000 	.word	0x48001000
 8001df4:	48001c00 	.word	0x48001c00
 8001df8:	08008038 	.word	0x08008038
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	2101      	movs	r1, #1
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	fa01 f303 	lsl.w	r3, r1, r3
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8184 	beq.w	800211c <HAL_GPIO_Init+0x438>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d005      	beq.n	8001e2c <HAL_GPIO_Init+0x148>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d144      	bne.n	8001eb6 <HAL_GPIO_Init+0x1d2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00f      	beq.n	8001e54 <HAL_GPIO_Init+0x170>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d00b      	beq.n	8001e54 <HAL_GPIO_Init+0x170>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d007      	beq.n	8001e54 <HAL_GPIO_Init+0x170>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_Init+0x170>
 8001e4c:	21bd      	movs	r1, #189	@ 0xbd
 8001e4e:	4878      	ldr	r0, [pc, #480]	@ (8002030 <HAL_GPIO_Init+0x34c>)
 8001e50:	f7ff fb4a 	bl	80014e8 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	2203      	movs	r2, #3
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	f003 0201 	and.w	r2, r3, #1
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d017      	beq.n	8001ef2 <HAL_GPIO_Init+0x20e>
      {
        temp = GPIOx->PUPDR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	2203      	movs	r2, #3
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d147      	bne.n	8001f8e <HAL_GPIO_Init+0x2aa>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f04:	d017      	beq.n	8001f36 <HAL_GPIO_Init+0x252>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4a      	ldr	r2, [pc, #296]	@ (8002034 <HAL_GPIO_Init+0x350>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_GPIO_Init+0x252>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a49      	ldr	r2, [pc, #292]	@ (8002038 <HAL_GPIO_Init+0x354>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00f      	beq.n	8001f36 <HAL_GPIO_Init+0x252>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a48      	ldr	r2, [pc, #288]	@ (800203c <HAL_GPIO_Init+0x358>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00b      	beq.n	8001f36 <HAL_GPIO_Init+0x252>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a47      	ldr	r2, [pc, #284]	@ (8002040 <HAL_GPIO_Init+0x35c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d007      	beq.n	8001f36 <HAL_GPIO_Init+0x252>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a46      	ldr	r2, [pc, #280]	@ (8002044 <HAL_GPIO_Init+0x360>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x252>
 8001f2e:	21d8      	movs	r1, #216	@ 0xd8
 8001f30:	483f      	ldr	r0, [pc, #252]	@ (8002030 <HAL_GPIO_Init+0x34c>)
 8001f32:	f7ff fad9 	bl	80014e8 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	2b0f      	cmp	r3, #15
 8001f3c:	d903      	bls.n	8001f46 <HAL_GPIO_Init+0x262>
 8001f3e:	21d9      	movs	r1, #217	@ 0xd9
 8001f40:	483b      	ldr	r0, [pc, #236]	@ (8002030 <HAL_GPIO_Init+0x34c>)
 8001f42:	f7ff fad1 	bl	80014e8 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	08da      	lsrs	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3208      	adds	r2, #8
 8001f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	08da      	lsrs	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3208      	adds	r2, #8
 8001f88:	6939      	ldr	r1, [r7, #16]
 8001f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0203 	and.w	r2, r3, #3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 80a6 	beq.w	800211c <HAL_GPIO_Init+0x438>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8002048 <HAL_GPIO_Init+0x364>)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	089b      	lsrs	r3, r3, #2
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ffa:	d027      	beq.n	800204c <HAL_GPIO_Init+0x368>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a0d      	ldr	r2, [pc, #52]	@ (8002034 <HAL_GPIO_Init+0x350>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d013      	beq.n	800202c <HAL_GPIO_Init+0x348>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a0c      	ldr	r2, [pc, #48]	@ (8002038 <HAL_GPIO_Init+0x354>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d00d      	beq.n	8002028 <HAL_GPIO_Init+0x344>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a0b      	ldr	r2, [pc, #44]	@ (800203c <HAL_GPIO_Init+0x358>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d007      	beq.n	8002024 <HAL_GPIO_Init+0x340>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a0a      	ldr	r2, [pc, #40]	@ (8002040 <HAL_GPIO_Init+0x35c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d101      	bne.n	8002020 <HAL_GPIO_Init+0x33c>
 800201c:	2304      	movs	r3, #4
 800201e:	e016      	b.n	800204e <HAL_GPIO_Init+0x36a>
 8002020:	2307      	movs	r3, #7
 8002022:	e014      	b.n	800204e <HAL_GPIO_Init+0x36a>
 8002024:	2303      	movs	r3, #3
 8002026:	e012      	b.n	800204e <HAL_GPIO_Init+0x36a>
 8002028:	2302      	movs	r3, #2
 800202a:	e010      	b.n	800204e <HAL_GPIO_Init+0x36a>
 800202c:	2301      	movs	r3, #1
 800202e:	e00e      	b.n	800204e <HAL_GPIO_Init+0x36a>
 8002030:	08008038 	.word	0x08008038
 8002034:	48000400 	.word	0x48000400
 8002038:	48000800 	.word	0x48000800
 800203c:	48000c00 	.word	0x48000c00
 8002040:	48001000 	.word	0x48001000
 8002044:	48001c00 	.word	0x48001c00
 8002048:	40010000 	.word	0x40010000
 800204c:	2300      	movs	r3, #0
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	f002 0203 	and.w	r2, r2, #3
 8002054:	0092      	lsls	r2, r2, #2
 8002056:	4093      	lsls	r3, r2
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800205e:	4937      	ldr	r1, [pc, #220]	@ (800213c <HAL_GPIO_Init+0x458>)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	3302      	adds	r3, #2
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800206c:	4b34      	ldr	r3, [pc, #208]	@ (8002140 <HAL_GPIO_Init+0x45c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	43db      	mvns	r3, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x3ac>
        {
          temp |= iocurrent;
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002090:	4a2b      	ldr	r2, [pc, #172]	@ (8002140 <HAL_GPIO_Init+0x45c>)
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002096:	4b2a      	ldr	r3, [pc, #168]	@ (8002140 <HAL_GPIO_Init+0x45c>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	43db      	mvns	r3, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x3d6>
        {
          temp |= iocurrent;
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020ba:	4a21      	ldr	r2, [pc, #132]	@ (8002140 <HAL_GPIO_Init+0x45c>)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002140 <HAL_GPIO_Init+0x45c>)
 80020c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x402>
        {
          temp |= iocurrent;
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020e6:	4a16      	ldr	r2, [pc, #88]	@ (8002140 <HAL_GPIO_Init+0x45c>)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80020ee:	4b14      	ldr	r3, [pc, #80]	@ (8002140 <HAL_GPIO_Init+0x45c>)
 80020f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x430>
        {
          temp |= iocurrent;
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002114:	4a0a      	ldr	r2, [pc, #40]	@ (8002140 <HAL_GPIO_Init+0x45c>)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3301      	adds	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	fa22 f303 	lsr.w	r3, r2, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	f47f ae65 	bne.w	8001dfc <HAL_GPIO_Init+0x118>
  }
}
 8002132:	bf00      	nop
 8002134:	bf00      	nop
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40010000 	.word	0x40010000
 8002140:	58000800 	.word	0x58000800

08002144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
 8002150:	4613      	mov	r3, r2
 8002152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002154:	887b      	ldrh	r3, [r7, #2]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d104      	bne.n	8002164 <HAL_GPIO_WritePin+0x20>
 800215a:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 800215e:	480e      	ldr	r0, [pc, #56]	@ (8002198 <HAL_GPIO_WritePin+0x54>)
 8002160:	f7ff f9c2 	bl	80014e8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002164:	787b      	ldrb	r3, [r7, #1]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d007      	beq.n	800217a <HAL_GPIO_WritePin+0x36>
 800216a:	787b      	ldrb	r3, [r7, #1]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d004      	beq.n	800217a <HAL_GPIO_WritePin+0x36>
 8002170:	f240 1195 	movw	r1, #405	@ 0x195
 8002174:	4808      	ldr	r0, [pc, #32]	@ (8002198 <HAL_GPIO_WritePin+0x54>)
 8002176:	f7ff f9b7 	bl	80014e8 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800217a:	787b      	ldrb	r3, [r7, #1]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002180:	887a      	ldrh	r2, [r7, #2]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002186:	e002      	b.n	800218e <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002188:	887a      	ldrh	r2, [r7, #2]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	08008038 	.word	0x08008038

0800219c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80021a2:	4b0a      	ldr	r3, [pc, #40]	@ (80021cc <HAL_HSEM_IRQHandler+0x30>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80021a8:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <HAL_HSEM_IRQHandler+0x30>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	4906      	ldr	r1, [pc, #24]	@ (80021cc <HAL_HSEM_IRQHandler+0x30>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80021b6:	4a05      	ldr	r2, [pc, #20]	@ (80021cc <HAL_HSEM_IRQHandler+0x30>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f807 	bl	80021d0 <HAL_HSEM_FreeCallback>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	58001500 	.word	0x58001500

080021d0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e8:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a04      	ldr	r2, [pc, #16]	@ (8002200 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f2:	6013      	str	r3, [r2, #0]
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	58000400 	.word	0x58000400

08002204 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002208:	4b04      	ldr	r3, [pc, #16]	@ (800221c <HAL_PWREx_GetVoltageRange+0x18>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	58000400 	.word	0x58000400

08002220 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800222e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002232:	d101      	bne.n	8002238 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_RCC_HSE_Enable>:
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002256:	6013      	str	r3, [r2, #0]
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <LL_RCC_HSE_Disable>:
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002266:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002270:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002274:	6013      	str	r3, [r2, #0]
}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_RCC_HSE_IsReady>:
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002284:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002292:	d101      	bne.n	8002298 <LL_RCC_HSE_IsReady+0x18>
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <LL_RCC_HSE_IsReady+0x1a>
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_RCC_HSI_Enable>:
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80022a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <LL_RCC_HSI_Disable>:
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80022c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022d4:	6013      	str	r3, [r2, #0]
}
 80022d6:	bf00      	nop
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_RCC_HSI_IsReady>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80022e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022f2:	d101      	bne.n	80022f8 <LL_RCC_HSI_IsReady+0x18>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <LL_RCC_HSI_IsReady+0x1a>
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800230c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	061b      	lsls	r3, r3, #24
 800231a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800231e:	4313      	orrs	r3, r2
 8002320:	604b      	str	r3, [r1, #4]
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <LL_RCC_HSI48_Enable>:
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002336:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800233a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002346:	bf00      	nop
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_RCC_HSI48_Disable>:
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002358:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800235c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002360:	f023 0301 	bic.w	r3, r3, #1
 8002364:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <LL_RCC_HSI48_IsReady>:
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002376:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800237a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b02      	cmp	r3, #2
 8002384:	d101      	bne.n	800238a <LL_RCC_HSI48_IsReady+0x18>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <LL_RCC_HSI48_IsReady+0x1a>
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <LL_RCC_LSE_Enable>:
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800239a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800239e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <LL_RCC_LSE_Disable>:
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <LL_RCC_LSE_EnableBypass>:
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80023de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023ea:	f043 0304 	orr.w	r3, r3, #4
 80023ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80023f2:	bf00      	nop
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <LL_RCC_LSE_DisableBypass>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002408:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <LL_RCC_LSE_IsReady>:
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b02      	cmp	r3, #2
 8002430:	d101      	bne.n	8002436 <LL_RCC_LSE_IsReady+0x18>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <LL_RCC_LSE_IsReady+0x1a>
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <LL_RCC_LSI1_Enable>:
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002446:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800244a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800244e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_RCC_LSI1_Disable>:
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002468:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800246c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002470:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <LL_RCC_LSI1_IsReady>:
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800248a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800248e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b02      	cmp	r3, #2
 8002498:	d101      	bne.n	800249e <LL_RCC_LSI1_IsReady+0x18>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <LL_RCC_LSI1_IsReady+0x1a>
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <LL_RCC_LSI2_Enable>:
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80024ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_RCC_LSI2_Disable>:
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80024d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024dc:	f023 0304 	bic.w	r3, r3, #4
 80024e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <LL_RCC_LSI2_IsReady>:
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80024f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d101      	bne.n	8002506 <LL_RCC_LSI2_IsReady+0x18>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <LL_RCC_LSI2_IsReady+0x1a>
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <LL_RCC_LSI2_SetTrimming>:
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800251a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800251e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002522:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <LL_RCC_MSI_Enable>:
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002544:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6013      	str	r3, [r2, #0]
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <LL_RCC_MSI_Disable>:
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6013      	str	r3, [r2, #0]
}
 8002572:	bf00      	nop
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <LL_RCC_MSI_IsReady>:
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b02      	cmp	r3, #2
 800258c:	d101      	bne.n	8002592 <LL_RCC_MSI_IsReady+0x16>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <LL_RCC_MSI_IsReady+0x18>
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <LL_RCC_MSI_SetRange>:
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80025a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <LL_RCC_MSI_GetRange>:
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80025cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025d6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2bb0      	cmp	r3, #176	@ 0xb0
 80025dc:	d901      	bls.n	80025e2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80025de:	23b0      	movs	r3, #176	@ 0xb0
 80025e0:	607b      	str	r3, [r7, #4]
  return msiRange;
 80025e2:	687b      	ldr	r3, [r7, #4]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80025f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800260a:	4313      	orrs	r3, r2
 800260c:	604b      	str	r3, [r1, #4]
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <LL_RCC_SetSysClkSource>:
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f023 0203 	bic.w	r2, r3, #3
 800262c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4313      	orrs	r3, r2
 8002634:	608b      	str	r3, [r1, #8]
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <LL_RCC_GetSysClkSource>:
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002646:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 030c 	and.w	r3, r3, #12
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <LL_RCC_SetAHBPrescaler>:
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002662:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800266c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800268a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800268e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002692:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002696:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <LL_RCC_SetAHB4Prescaler>:
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80026b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80026be:	f023 020f 	bic.w	r2, r3, #15
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <LL_RCC_SetAPB1Prescaler>:
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80026e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	608b      	str	r3, [r1, #8]
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_RCC_SetAPB2Prescaler>:
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800270c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002716:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4313      	orrs	r3, r2
 800271e:	608b      	str	r3, [r1, #8]
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <LL_RCC_GetAHBPrescaler>:
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <LL_RCC_GetAHB4Prescaler>:
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800274c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002756:	4618      	mov	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002764:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800276e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002772:	6013      	str	r3, [r2, #0]
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002782:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800278c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002790:	6013      	str	r3, [r2, #0]
}
 8002792:	bf00      	nop
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80027a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027ae:	d101      	bne.n	80027b4 <LL_RCC_PLL_IsReady+0x18>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <LL_RCC_PLL_IsReady+0x1a>
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80027c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	0a1b      	lsrs	r3, r3, #8
 80027cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80027de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80027f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800280e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0303 	and.w	r3, r3, #3
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002834:	d101      	bne.n	800283a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002846:	b480      	push	{r7}
 8002848:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800284a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800284e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002856:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800285a:	d101      	bne.n	8002860 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002874:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002878:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800287c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002880:	d101      	bne.n	8002886 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002892:	b480      	push	{r7}
 8002894:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002896:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80028a4:	d101      	bne.n	80028aa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80028ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80028c8:	d101      	bne.n	80028ce <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b08d      	sub	sp, #52	@ 0x34
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d102      	bne.n	80028f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f000 bca4 	b.w	8003238 <HAL_RCC_OscConfig+0x95c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_RCC_OscConfig+0x2e>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80028fe:	d904      	bls.n	800290a <HAL_RCC_OscConfig+0x2e>
 8002900:	f240 118b 	movw	r1, #395	@ 0x18b
 8002904:	489d      	ldr	r0, [pc, #628]	@ (8002b7c <HAL_RCC_OscConfig+0x2a0>)
 8002906:	f7fe fdef 	bl	80014e8 <assert_failed>

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 80da 	beq.w	8002acc <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_RCC_OscConfig+0x56>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d004      	beq.n	8002932 <HAL_RCC_OscConfig+0x56>
 8002928:	f240 1191 	movw	r1, #401	@ 0x191
 800292c:	4893      	ldr	r0, [pc, #588]	@ (8002b7c <HAL_RCC_OscConfig+0x2a0>)
 800292e:	f7fe fddb 	bl	80014e8 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	2bff      	cmp	r3, #255	@ 0xff
 8002938:	d904      	bls.n	8002944 <HAL_RCC_OscConfig+0x68>
 800293a:	f44f 71c9 	mov.w	r1, #402	@ 0x192
 800293e:	488f      	ldr	r0, [pc, #572]	@ (8002b7c <HAL_RCC_OscConfig+0x2a0>)
 8002940:	f7fe fdd2 	bl	80014e8 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	2b00      	cmp	r3, #0
 800294a:	d030      	beq.n	80029ae <HAL_RCC_OscConfig+0xd2>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	2b10      	cmp	r3, #16
 8002952:	d02c      	beq.n	80029ae <HAL_RCC_OscConfig+0xd2>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002958:	2b20      	cmp	r3, #32
 800295a:	d028      	beq.n	80029ae <HAL_RCC_OscConfig+0xd2>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	2b30      	cmp	r3, #48	@ 0x30
 8002962:	d024      	beq.n	80029ae <HAL_RCC_OscConfig+0xd2>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	2b40      	cmp	r3, #64	@ 0x40
 800296a:	d020      	beq.n	80029ae <HAL_RCC_OscConfig+0xd2>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	2b50      	cmp	r3, #80	@ 0x50
 8002972:	d01c      	beq.n	80029ae <HAL_RCC_OscConfig+0xd2>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	2b60      	cmp	r3, #96	@ 0x60
 800297a:	d018      	beq.n	80029ae <HAL_RCC_OscConfig+0xd2>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	2b70      	cmp	r3, #112	@ 0x70
 8002982:	d014      	beq.n	80029ae <HAL_RCC_OscConfig+0xd2>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002988:	2b80      	cmp	r3, #128	@ 0x80
 800298a:	d010      	beq.n	80029ae <HAL_RCC_OscConfig+0xd2>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	2b90      	cmp	r3, #144	@ 0x90
 8002992:	d00c      	beq.n	80029ae <HAL_RCC_OscConfig+0xd2>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002998:	2ba0      	cmp	r3, #160	@ 0xa0
 800299a:	d008      	beq.n	80029ae <HAL_RCC_OscConfig+0xd2>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	2bb0      	cmp	r3, #176	@ 0xb0
 80029a2:	d004      	beq.n	80029ae <HAL_RCC_OscConfig+0xd2>
 80029a4:	f240 1193 	movw	r1, #403	@ 0x193
 80029a8:	4874      	ldr	r0, [pc, #464]	@ (8002b7c <HAL_RCC_OscConfig+0x2a0>)
 80029aa:	f7fe fd9d 	bl	80014e8 <assert_failed>

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ae:	f7ff fe48 	bl	8002642 <LL_RCC_GetSysClkSource>
 80029b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029b4:	f7ff ff29 	bl	800280a <LL_RCC_PLL_GetMainSource>
 80029b8:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80029ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_RCC_OscConfig+0xf0>
 80029c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c2:	2b0c      	cmp	r3, #12
 80029c4:	d149      	bne.n	8002a5a <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80029c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d146      	bne.n	8002a5a <HAL_RCC_OscConfig+0x17e>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d102      	bne.n	80029da <HAL_RCC_OscConfig+0xfe>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	f000 bc2f 	b.w	8003238 <HAL_RCC_OscConfig+0x95c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80029de:	f7ff fdf2 	bl	80025c6 <LL_RCC_MSI_GetRange>
 80029e2:	4603      	mov	r3, r0
 80029e4:	429c      	cmp	r4, r3
 80029e6:	d915      	bls.n	8002a14 <HAL_RCC_OscConfig+0x138>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 ff13 	bl	8003818 <RCC_SetFlashLatencyFromMSIRange>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	f000 bc1d 	b.w	8003238 <HAL_RCC_OscConfig+0x95c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fdcb 	bl	800259e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fdef 	bl	80025f0 <LL_RCC_MSI_SetCalibTrimming>
 8002a12:	e013      	b.n	8002a3c <HAL_RCC_OscConfig+0x160>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fdc0 	bl	800259e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fde4 	bl	80025f0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 fef3 	bl	8003818 <RCC_SetFlashLatencyFromMSIRange>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_OscConfig+0x160>
          {
            return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e3fd      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a3c:	f000 fed8 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4a4f      	ldr	r2, [pc, #316]	@ (8002b80 <HAL_RCC_OscConfig+0x2a4>)
 8002a44:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a46:	4b4f      	ldr	r3, [pc, #316]	@ (8002b84 <HAL_RCC_OscConfig+0x2a8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe fefa 	bl	8001844 <HAL_InitTick>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d039      	beq.n	8002aca <HAL_RCC_OscConfig+0x1ee>
        {
          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e3ee      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d01e      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x1c4>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a62:	f7ff fd6d 	bl	8002540 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a66:	f7fe ff3b 	bl	80018e0 <HAL_GetTick>
 8002a6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x1a4>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a6e:	f7fe ff37 	bl	80018e0 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x1a4>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e3db      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002a80:	f7ff fd7c 	bl	800257c <LL_RCC_MSI_IsReady>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f1      	beq.n	8002a6e <HAL_RCC_OscConfig+0x192>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fd85 	bl	800259e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fda9 	bl	80025f0 <LL_RCC_MSI_SetCalibTrimming>
 8002a9e:	e015      	b.n	8002acc <HAL_RCC_OscConfig+0x1f0>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002aa0:	f7ff fd5d 	bl	800255e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002aa4:	f7fe ff1c 	bl	80018e0 <HAL_GetTick>
 8002aa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x1e2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aac:	f7fe ff18 	bl	80018e0 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e3bc      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002abe:	f7ff fd5d 	bl	800257c <LL_RCC_MSI_IsReady>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f1      	bne.n	8002aac <HAL_RCC_OscConfig+0x1d0>
 8002ac8:	e000      	b.n	8002acc <HAL_RCC_OscConfig+0x1f0>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002aca:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d05c      	beq.n	8002b92 <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d009      	beq.n	8002af4 <HAL_RCC_OscConfig+0x218>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ae8:	d004      	beq.n	8002af4 <HAL_RCC_OscConfig+0x218>
 8002aea:	f44f 71fe 	mov.w	r1, #508	@ 0x1fc
 8002aee:	4823      	ldr	r0, [pc, #140]	@ (8002b7c <HAL_RCC_OscConfig+0x2a0>)
 8002af0:	f7fe fcfa 	bl	80014e8 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002af4:	f7ff fda5 	bl	8002642 <LL_RCC_GetSysClkSource>
 8002af8:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002afa:	f7ff fe86 	bl	800280a <LL_RCC_PLL_GetMainSource>
 8002afe:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d005      	beq.n	8002b12 <HAL_RCC_OscConfig+0x236>
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	2b0c      	cmp	r3, #12
 8002b0a:	d108      	bne.n	8002b1e <HAL_RCC_OscConfig+0x242>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d105      	bne.n	8002b1e <HAL_RCC_OscConfig+0x242>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d13b      	bne.n	8002b92 <HAL_RCC_OscConfig+0x2b6>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e38c      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b26:	d102      	bne.n	8002b2e <HAL_RCC_OscConfig+0x252>
 8002b28:	f7ff fb8c 	bl	8002244 <LL_RCC_HSE_Enable>
 8002b2c:	e001      	b.n	8002b32 <HAL_RCC_OscConfig+0x256>
 8002b2e:	f7ff fb98 	bl	8002262 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d012      	beq.n	8002b60 <HAL_RCC_OscConfig+0x284>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3a:	f7fe fed1 	bl	80018e0 <HAL_GetTick>
 8002b3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x278>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b42:	f7fe fecd 	bl	80018e0 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b64      	cmp	r3, #100	@ 0x64
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e371      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002b54:	f7ff fb94 	bl	8002280 <LL_RCC_HSE_IsReady>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f1      	beq.n	8002b42 <HAL_RCC_OscConfig+0x266>
 8002b5e:	e018      	b.n	8002b92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe febe 	bl	80018e0 <HAL_GetTick>
 8002b64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002b66:	e00f      	b.n	8002b88 <HAL_RCC_OscConfig+0x2ac>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b68:	f7fe feba 	bl	80018e0 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b64      	cmp	r3, #100	@ 0x64
 8002b74:	d908      	bls.n	8002b88 <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e35e      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
 8002b7a:	bf00      	nop
 8002b7c:	08008074 	.word	0x08008074
 8002b80:	20000008 	.word	0x20000008
 8002b84:	2000000c 	.word	0x2000000c
        while (LL_RCC_HSE_IsReady() != 0U)
 8002b88:	f7ff fb7a 	bl	8002280 <LL_RCC_HSE_IsReady>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1ea      	bne.n	8002b68 <HAL_RCC_OscConfig+0x28c>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d063      	beq.n	8002c66 <HAL_RCC_OscConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <HAL_RCC_OscConfig+0x2de>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bae:	d004      	beq.n	8002bba <HAL_RCC_OscConfig+0x2de>
 8002bb0:	f240 2132 	movw	r1, #562	@ 0x232
 8002bb4:	48a3      	ldr	r0, [pc, #652]	@ (8002e44 <HAL_RCC_OscConfig+0x568>)
 8002bb6:	f7fe fc97 	bl	80014e8 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bc0:	d904      	bls.n	8002bcc <HAL_RCC_OscConfig+0x2f0>
 8002bc2:	f240 2133 	movw	r1, #563	@ 0x233
 8002bc6:	489f      	ldr	r0, [pc, #636]	@ (8002e44 <HAL_RCC_OscConfig+0x568>)
 8002bc8:	f7fe fc8e 	bl	80014e8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bcc:	f7ff fd39 	bl	8002642 <LL_RCC_GetSysClkSource>
 8002bd0:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bd2:	f7ff fe1a 	bl	800280a <LL_RCC_PLL_GetMainSource>
 8002bd6:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d005      	beq.n	8002bea <HAL_RCC_OscConfig+0x30e>
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2b0c      	cmp	r3, #12
 8002be2:	d10e      	bne.n	8002c02 <HAL_RCC_OscConfig+0x326>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d10b      	bne.n	8002c02 <HAL_RCC_OscConfig+0x326>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e320      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff fb82 	bl	8002304 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c00:	e031      	b.n	8002c66 <HAL_RCC_OscConfig+0x38a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d019      	beq.n	8002c3e <HAL_RCC_OscConfig+0x362>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c0a:	f7ff fb4b 	bl	80022a4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0e:	f7fe fe67 	bl	80018e0 <HAL_GetTick>
 8002c12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x34c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c16:	f7fe fe63 	bl	80018e0 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e307      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002c28:	f7ff fb5a 	bl	80022e0 <LL_RCC_HSI_IsReady>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f1      	beq.n	8002c16 <HAL_RCC_OscConfig+0x33a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fb64 	bl	8002304 <LL_RCC_HSI_SetCalibTrimming>
 8002c3c:	e013      	b.n	8002c66 <HAL_RCC_OscConfig+0x38a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c3e:	f7ff fb40 	bl	80022c2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c42:	f7fe fe4d 	bl	80018e0 <HAL_GetTick>
 8002c46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4a:	f7fe fe49 	bl	80018e0 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e2ed      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002c5c:	f7ff fb40 	bl	80022e0 <LL_RCC_HSI_IsReady>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f1      	bne.n	8002c4a <HAL_RCC_OscConfig+0x36e>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_RCC_OscConfig+0x3a4>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 80b5 	beq.w	8002dea <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d008      	beq.n	8002c9a <HAL_RCC_OscConfig+0x3be>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	2b05      	cmp	r3, #5
 8002c8e:	d004      	beq.n	8002c9a <HAL_RCC_OscConfig+0x3be>
 8002c90:	f240 2177 	movw	r1, #631	@ 0x277
 8002c94:	486b      	ldr	r0, [pc, #428]	@ (8002e44 <HAL_RCC_OscConfig+0x568>)
 8002c96:	f7fe fc27 	bl	80014e8 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d07b      	beq.n	8002d9a <HAL_RCC_OscConfig+0x4be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d04f      	beq.n	8002d4e <HAL_RCC_OscConfig+0x472>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	2b0f      	cmp	r3, #15
 8002cb4:	d904      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x3e4>
 8002cb6:	f240 217f 	movw	r1, #639	@ 0x27f
 8002cba:	4862      	ldr	r0, [pc, #392]	@ (8002e44 <HAL_RCC_OscConfig+0x568>)
 8002cbc:	f7fe fc14 	bl	80014e8 <assert_failed>

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002cc0:	f7ff fbe1 	bl	8002486 <LL_RCC_LSI1_IsReady>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d113      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x416>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002cca:	f7ff fbba 	bl	8002442 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cce:	f7fe fe07 	bl	80018e0 <HAL_GetTick>
 8002cd2:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x40c>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002cd6:	f7fe fe03 	bl	80018e0 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x40c>
            {
              return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e2a7      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002ce8:	f7ff fbcd 	bl	8002486 <LL_RCC_LSI1_IsReady>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f1      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x3fa>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002cf2:	f7ff fbda 	bl	80024aa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf6:	f7fe fdf3 	bl	80018e0 <HAL_GetTick>
 8002cfa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x434>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002cfe:	f7fe fdef 	bl	80018e0 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x434>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e293      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002d10:	f7ff fbed 	bl	80024ee <LL_RCC_LSI2_IsReady>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f1      	beq.n	8002cfe <HAL_RCC_OscConfig+0x422>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff fbf7 	bl	8002512 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002d24:	f7ff fb9e 	bl	8002464 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7fe fdda 	bl	80018e0 <HAL_GetTick>
 8002d2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x466>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002d30:	f7fe fdd6 	bl	80018e0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x466>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e27a      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002d42:	f7ff fba0 	bl	8002486 <LL_RCC_LSI1_IsReady>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f1      	bne.n	8002d30 <HAL_RCC_OscConfig+0x454>
 8002d4c:	e04d      	b.n	8002dea <HAL_RCC_OscConfig+0x50e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002d4e:	f7ff fb78 	bl	8002442 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d52:	f7fe fdc5 	bl	80018e0 <HAL_GetTick>
 8002d56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x490>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002d5a:	f7fe fdc1 	bl	80018e0 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x490>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e265      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002d6c:	f7ff fb8b 	bl	8002486 <LL_RCC_LSI1_IsReady>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f1      	beq.n	8002d5a <HAL_RCC_OscConfig+0x47e>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002d76:	f7ff fba9 	bl	80024cc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x4b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002d7c:	f7fe fdb0 	bl	80018e0 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x4b2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e254      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002d8e:	f7ff fbae 	bl	80024ee <LL_RCC_LSI2_IsReady>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1f1      	bne.n	8002d7c <HAL_RCC_OscConfig+0x4a0>
 8002d98:	e027      	b.n	8002dea <HAL_RCC_OscConfig+0x50e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002d9a:	f7ff fb97 	bl	80024cc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9e:	f7fe fd9f 	bl	80018e0 <HAL_GetTick>
 8002da2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002da6:	f7fe fd9b 	bl	80018e0 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e23f      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002db8:	f7ff fb99 	bl	80024ee <LL_RCC_LSI2_IsReady>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f1      	bne.n	8002da6 <HAL_RCC_OscConfig+0x4ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002dc2:	f7ff fb4f 	bl	8002464 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc6:	f7fe fd8b 	bl	80018e0 <HAL_GetTick>
 8002dca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002dce:	f7fe fd87 	bl	80018e0 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e22b      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002de0:	f7ff fb51 	bl	8002486 <LL_RCC_LSI1_IsReady>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f1      	bne.n	8002dce <HAL_RCC_OscConfig+0x4f2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d071      	beq.n	8002eda <HAL_RCC_OscConfig+0x5fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00c      	beq.n	8002e18 <HAL_RCC_OscConfig+0x53c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d008      	beq.n	8002e18 <HAL_RCC_OscConfig+0x53c>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2b05      	cmp	r3, #5
 8002e0c:	d004      	beq.n	8002e18 <HAL_RCC_OscConfig+0x53c>
 8002e0e:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8002e12:	480c      	ldr	r0, [pc, #48]	@ (8002e44 <HAL_RCC_OscConfig+0x568>)
 8002e14:	f7fe fb68 	bl	80014e8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e18:	4b0b      	ldr	r3, [pc, #44]	@ (8002e48 <HAL_RCC_OscConfig+0x56c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d119      	bne.n	8002e58 <HAL_RCC_OscConfig+0x57c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002e24:	f7ff f9de 	bl	80021e4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e28:	f7fe fd5a 	bl	80018e0 <HAL_GetTick>
 8002e2c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e2e:	e00d      	b.n	8002e4c <HAL_RCC_OscConfig+0x570>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e30:	f7fe fd56 	bl	80018e0 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d906      	bls.n	8002e4c <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e1fa      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
 8002e42:	bf00      	nop
 8002e44:	08008074 	.word	0x08008074
 8002e48:	58000400 	.word	0x58000400
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e4c:	4b40      	ldr	r3, [pc, #256]	@ (8002f50 <HAL_RCC_OscConfig+0x674>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0eb      	beq.n	8002e30 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d102      	bne.n	8002e66 <HAL_RCC_OscConfig+0x58a>
 8002e60:	f7ff fa99 	bl	8002396 <LL_RCC_LSE_Enable>
 8002e64:	e00c      	b.n	8002e80 <HAL_RCC_OscConfig+0x5a4>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b05      	cmp	r3, #5
 8002e6c:	d104      	bne.n	8002e78 <HAL_RCC_OscConfig+0x59c>
 8002e6e:	f7ff fab4 	bl	80023da <LL_RCC_LSE_EnableBypass>
 8002e72:	f7ff fa90 	bl	8002396 <LL_RCC_LSE_Enable>
 8002e76:	e003      	b.n	8002e80 <HAL_RCC_OscConfig+0x5a4>
 8002e78:	f7ff fa9e 	bl	80023b8 <LL_RCC_LSE_Disable>
 8002e7c:	f7ff fabe 	bl	80023fc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d014      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e88:	f7fe fd2a 	bl	80018e0 <HAL_GetTick>
 8002e8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5ca>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f7fe fd26 	bl	80018e0 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e1c8      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002ea6:	f7ff faba 	bl	800241e <LL_RCC_LSE_IsReady>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0ef      	beq.n	8002e90 <HAL_RCC_OscConfig+0x5b4>
 8002eb0:	e013      	b.n	8002eda <HAL_RCC_OscConfig+0x5fe>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb2:	f7fe fd15 	bl	80018e0 <HAL_GetTick>
 8002eb6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCC_OscConfig+0x5f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7fe fd11 	bl	80018e0 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e1b3      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002ed0:	f7ff faa5 	bl	800241e <LL_RCC_LSE_IsReady>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1ef      	bne.n	8002eba <HAL_RCC_OscConfig+0x5de>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d03d      	beq.n	8002f62 <HAL_RCC_OscConfig+0x686>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d008      	beq.n	8002f00 <HAL_RCC_OscConfig+0x624>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d004      	beq.n	8002f00 <HAL_RCC_OscConfig+0x624>
 8002ef6:	f240 313b 	movw	r1, #827	@ 0x33b
 8002efa:	4816      	ldr	r0, [pc, #88]	@ (8002f54 <HAL_RCC_OscConfig+0x678>)
 8002efc:	f7fe faf4 	bl	80014e8 <assert_failed>

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d014      	beq.n	8002f32 <HAL_RCC_OscConfig+0x656>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f08:	f7ff fa11 	bl	800232e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7fe fce8 	bl	80018e0 <HAL_GetTick>
 8002f10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x64a>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f14:	f7fe fce4 	bl	80018e0 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x64a>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e188      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002f26:	f7ff fa24 	bl	8002372 <LL_RCC_HSI48_IsReady>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0f1      	beq.n	8002f14 <HAL_RCC_OscConfig+0x638>
 8002f30:	e017      	b.n	8002f62 <HAL_RCC_OscConfig+0x686>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f32:	f7ff fa0d 	bl	8002350 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f36:	f7fe fcd3 	bl	80018e0 <HAL_GetTick>
 8002f3a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002f3c:	e00c      	b.n	8002f58 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f3e:	f7fe fccf 	bl	80018e0 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d905      	bls.n	8002f58 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e173      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
 8002f50:	58000400 	.word	0x58000400
 8002f54:	08008074 	.word	0x08008074
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002f58:	f7ff fa0b 	bl	8002372 <LL_RCC_HSI48_IsReady>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1ed      	bne.n	8002f3e <HAL_RCC_OscConfig+0x662>
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00c      	beq.n	8002f84 <HAL_RCC_OscConfig+0x6a8>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d008      	beq.n	8002f84 <HAL_RCC_OscConfig+0x6a8>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d004      	beq.n	8002f84 <HAL_RCC_OscConfig+0x6a8>
 8002f7a:	f44f 7159 	mov.w	r1, #868	@ 0x364
 8002f7e:	489e      	ldr	r0, [pc, #632]	@ (80031f8 <HAL_RCC_OscConfig+0x91c>)
 8002f80:	f7fe fab2 	bl	80014e8 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 8154 	beq.w	8003236 <HAL_RCC_OscConfig+0x95a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f8e:	f7ff fb58 	bl	8002642 <LL_RCC_GetSysClkSource>
 8002f92:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002f94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	f040 811f 	bne.w	80031e4 <HAL_RCC_OscConfig+0x908>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d00c      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x6ec>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d008      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x6ec>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d004      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x6ec>
 8002fbe:	f240 316f 	movw	r1, #879	@ 0x36f
 8002fc2:	488d      	ldr	r0, [pc, #564]	@ (80031f8 <HAL_RCC_OscConfig+0x91c>)
 8002fc4:	f7fe fa90 	bl	80014e8 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d020      	beq.n	8003012 <HAL_RCC_OscConfig+0x736>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd4:	2b10      	cmp	r3, #16
 8002fd6:	d01c      	beq.n	8003012 <HAL_RCC_OscConfig+0x736>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d018      	beq.n	8003012 <HAL_RCC_OscConfig+0x736>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe4:	2b30      	cmp	r3, #48	@ 0x30
 8002fe6:	d014      	beq.n	8003012 <HAL_RCC_OscConfig+0x736>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fec:	2b40      	cmp	r3, #64	@ 0x40
 8002fee:	d010      	beq.n	8003012 <HAL_RCC_OscConfig+0x736>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ff4:	2b50      	cmp	r3, #80	@ 0x50
 8002ff6:	d00c      	beq.n	8003012 <HAL_RCC_OscConfig+0x736>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ffc:	2b60      	cmp	r3, #96	@ 0x60
 8002ffe:	d008      	beq.n	8003012 <HAL_RCC_OscConfig+0x736>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003004:	2b70      	cmp	r3, #112	@ 0x70
 8003006:	d004      	beq.n	8003012 <HAL_RCC_OscConfig+0x736>
 8003008:	f44f 715c 	mov.w	r1, #880	@ 0x370
 800300c:	487a      	ldr	r0, [pc, #488]	@ (80031f8 <HAL_RCC_OscConfig+0x91c>)
 800300e:	f7fe fa6b 	bl	80014e8 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003016:	2b05      	cmp	r3, #5
 8003018:	d903      	bls.n	8003022 <HAL_RCC_OscConfig+0x746>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003020:	d904      	bls.n	800302c <HAL_RCC_OscConfig+0x750>
 8003022:	f240 3171 	movw	r1, #881	@ 0x371
 8003026:	4874      	ldr	r0, [pc, #464]	@ (80031f8 <HAL_RCC_OscConfig+0x91c>)
 8003028:	f7fe fa5e 	bl	80014e8 <assert_failed>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003030:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003034:	d304      	bcc.n	8003040 <HAL_RCC_OscConfig+0x764>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303a:	f5b3 1f78 	cmp.w	r3, #4063232	@ 0x3e0000
 800303e:	d904      	bls.n	800304a <HAL_RCC_OscConfig+0x76e>
 8003040:	f240 3172 	movw	r1, #882	@ 0x372
 8003044:	486c      	ldr	r0, [pc, #432]	@ (80031f8 <HAL_RCC_OscConfig+0x91c>)
 8003046:	f7fe fa4f 	bl	80014e8 <assert_failed>
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003052:	d304      	bcc.n	800305e <HAL_RCC_OscConfig+0x782>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003058:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 800305c:	d904      	bls.n	8003068 <HAL_RCC_OscConfig+0x78c>
 800305e:	f240 3173 	movw	r1, #883	@ 0x373
 8003062:	4865      	ldr	r0, [pc, #404]	@ (80031f8 <HAL_RCC_OscConfig+0x91c>)
 8003064:	f7fe fa40 	bl	80014e8 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003070:	d304      	bcc.n	800307c <HAL_RCC_OscConfig+0x7a0>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003076:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800307a:	d904      	bls.n	8003086 <HAL_RCC_OscConfig+0x7aa>
 800307c:	f44f 715d 	mov.w	r1, #884	@ 0x374
 8003080:	485d      	ldr	r0, [pc, #372]	@ (80031f8 <HAL_RCC_OscConfig+0x91c>)
 8003082:	f7fe fa31 	bl	80014e8 <assert_failed>

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f003 0203 	and.w	r2, r3, #3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003090:	429a      	cmp	r2, r3
 8003092:	d123      	bne.n	80030dc <HAL_RCC_OscConfig+0x800>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309e:	429a      	cmp	r2, r3
 80030a0:	d11c      	bne.n	80030dc <HAL_RCC_OscConfig+0x800>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	0a1b      	lsrs	r3, r3, #8
 80030a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d114      	bne.n	80030dc <HAL_RCC_OscConfig+0x800>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80030bc:	429a      	cmp	r2, r3
 80030be:	d10d      	bne.n	80030dc <HAL_RCC_OscConfig+0x800>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d106      	bne.n	80030dc <HAL_RCC_OscConfig+0x800>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d05d      	beq.n	8003198 <HAL_RCC_OscConfig+0x8bc>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	2b0c      	cmp	r3, #12
 80030e0:	d058      	beq.n	8003194 <HAL_RCC_OscConfig+0x8b8>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_OscConfig+0x818>

          {
            return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0a1      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030f4:	f7ff fb43 	bl	800277e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030f8:	f7fe fbf2 	bl	80018e0 <HAL_GetTick>
 80030fc:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x836>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003100:	f7fe fbee 	bl	80018e0 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x836>
              {
                return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e092      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003112:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1ef      	bne.n	8003100 <HAL_RCC_OscConfig+0x824>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003120:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	4b35      	ldr	r3, [pc, #212]	@ (80031fc <HAL_RCC_OscConfig+0x920>)
 8003128:	4013      	ands	r3, r2
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003132:	4311      	orrs	r1, r2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003138:	0212      	lsls	r2, r2, #8
 800313a:	4311      	orrs	r1, r2
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003140:	4311      	orrs	r1, r2
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003146:	4311      	orrs	r1, r2
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800314c:	430a      	orrs	r2, r1
 800314e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003152:	4313      	orrs	r3, r2
 8003154:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003156:	f7ff fb03 	bl	8002760 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800315a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003168:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800316a:	f7fe fbb9 	bl	80018e0 <HAL_GetTick>
 800316e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x8a8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003172:	f7fe fbb5 	bl	80018e0 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x8a8>
              {
                return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e059      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0ef      	beq.n	8003172 <HAL_RCC_OscConfig+0x896>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003192:	e050      	b.n	8003236 <HAL_RCC_OscConfig+0x95a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e04f      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d147      	bne.n	8003236 <HAL_RCC_OscConfig+0x95a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031a6:	f7ff fadb 	bl	8002760 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031b8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031ba:	f7fe fb91 	bl	80018e0 <HAL_GetTick>
 80031be:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x8f8>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c2:	f7fe fb8d 	bl	80018e0 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x8f8>
            {
              return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e031      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0ef      	beq.n	80031c2 <HAL_RCC_OscConfig+0x8e6>
 80031e2:	e028      	b.n	8003236 <HAL_RCC_OscConfig+0x95a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	2b0c      	cmp	r3, #12
 80031e8:	d023      	beq.n	8003232 <HAL_RCC_OscConfig+0x956>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ea:	f7ff fac8 	bl	800277e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ee:	f7fe fb77 	bl	80018e0 <HAL_GetTick>
 80031f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031f4:	e00d      	b.n	8003212 <HAL_RCC_OscConfig+0x936>
 80031f6:	bf00      	nop
 80031f8:	08008074 	.word	0x08008074
 80031fc:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003200:	f7fe fb6e 	bl	80018e0 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x936>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e012      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003212:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1ef      	bne.n	8003200 <HAL_RCC_OscConfig+0x924>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800322a:	4b05      	ldr	r3, [pc, #20]	@ (8003240 <HAL_RCC_OscConfig+0x964>)
 800322c:	4013      	ands	r3, r2
 800322e:	60cb      	str	r3, [r1, #12]
 8003230:	e001      	b.n	8003236 <HAL_RCC_OscConfig+0x95a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_RCC_OscConfig+0x95c>
      }
    }
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3734      	adds	r7, #52	@ 0x34
 800323c:	46bd      	mov	sp, r7
 800323e:	bd90      	pop	{r4, r7, pc}
 8003240:	eefefffc 	.word	0xeefefffc

08003244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e255      	b.n	8003704 <HAL_RCC_ClockConfig+0x4c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_RCC_ClockConfig+0x24>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b6f      	cmp	r3, #111	@ 0x6f
 8003266:	d904      	bls.n	8003272 <HAL_RCC_ClockConfig+0x2e>
 8003268:	f240 412b 	movw	r1, #1067	@ 0x42b
 800326c:	4872      	ldr	r0, [pc, #456]	@ (8003438 <HAL_RCC_ClockConfig+0x1f4>)
 800326e:	f7fe f93b 	bl	80014e8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00d      	beq.n	8003294 <HAL_RCC_ClockConfig+0x50>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d00a      	beq.n	8003294 <HAL_RCC_ClockConfig+0x50>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d007      	beq.n	8003294 <HAL_RCC_ClockConfig+0x50>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2b03      	cmp	r3, #3
 8003288:	d004      	beq.n	8003294 <HAL_RCC_ClockConfig+0x50>
 800328a:	f240 412c 	movw	r1, #1068	@ 0x42c
 800328e:	486a      	ldr	r0, [pc, #424]	@ (8003438 <HAL_RCC_ClockConfig+0x1f4>)
 8003290:	f7fe f92a 	bl	80014e8 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003294:	4b69      	ldr	r3, [pc, #420]	@ (800343c <HAL_RCC_ClockConfig+0x1f8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d91b      	bls.n	80032da <HAL_RCC_ClockConfig+0x96>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a2:	4b66      	ldr	r3, [pc, #408]	@ (800343c <HAL_RCC_ClockConfig+0x1f8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 0207 	bic.w	r2, r3, #7
 80032aa:	4964      	ldr	r1, [pc, #400]	@ (800343c <HAL_RCC_ClockConfig+0x1f8>)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b2:	f7fe fb15 	bl	80018e0 <HAL_GetTick>
 80032b6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_ClockConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80032ba:	f7fe fb11 	bl	80018e0 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_ClockConfig+0x88>
      {
        return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e21b      	b.n	8003704 <HAL_RCC_ClockConfig+0x4c0>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032cc:	4b5b      	ldr	r3, [pc, #364]	@ (800343c <HAL_RCC_ClockConfig+0x1f8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d1ef      	bne.n	80032ba <HAL_RCC_ClockConfig+0x76>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d053      	beq.n	800338e <HAL_RCC_ClockConfig+0x14a>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d038      	beq.n	8003360 <HAL_RCC_ClockConfig+0x11c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b80      	cmp	r3, #128	@ 0x80
 80032f4:	d034      	beq.n	8003360 <HAL_RCC_ClockConfig+0x11c>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2b10      	cmp	r3, #16
 80032fc:	d030      	beq.n	8003360 <HAL_RCC_ClockConfig+0x11c>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	2b90      	cmp	r3, #144	@ 0x90
 8003304:	d02c      	beq.n	8003360 <HAL_RCC_ClockConfig+0x11c>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b20      	cmp	r3, #32
 800330c:	d028      	beq.n	8003360 <HAL_RCC_ClockConfig+0x11c>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b50      	cmp	r3, #80	@ 0x50
 8003314:	d024      	beq.n	8003360 <HAL_RCC_ClockConfig+0x11c>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2ba0      	cmp	r3, #160	@ 0xa0
 800331c:	d020      	beq.n	8003360 <HAL_RCC_ClockConfig+0x11c>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b60      	cmp	r3, #96	@ 0x60
 8003324:	d01c      	beq.n	8003360 <HAL_RCC_ClockConfig+0x11c>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2bb0      	cmp	r3, #176	@ 0xb0
 800332c:	d018      	beq.n	8003360 <HAL_RCC_ClockConfig+0x11c>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2b70      	cmp	r3, #112	@ 0x70
 8003334:	d014      	beq.n	8003360 <HAL_RCC_ClockConfig+0x11c>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2bc0      	cmp	r3, #192	@ 0xc0
 800333c:	d010      	beq.n	8003360 <HAL_RCC_ClockConfig+0x11c>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2bd0      	cmp	r3, #208	@ 0xd0
 8003344:	d00c      	beq.n	8003360 <HAL_RCC_ClockConfig+0x11c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2be0      	cmp	r3, #224	@ 0xe0
 800334c:	d008      	beq.n	8003360 <HAL_RCC_ClockConfig+0x11c>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	2bf0      	cmp	r3, #240	@ 0xf0
 8003354:	d004      	beq.n	8003360 <HAL_RCC_ClockConfig+0x11c>
 8003356:	f240 4149 	movw	r1, #1097	@ 0x449
 800335a:	4837      	ldr	r0, [pc, #220]	@ (8003438 <HAL_RCC_ClockConfig+0x1f4>)
 800335c:	f7fe f8c4 	bl	80014e8 <assert_failed>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff f978 	bl	800265a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800336a:	f7fe fab9 	bl	80018e0 <HAL_GetTick>
 800336e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003370:	e008      	b.n	8003384 <HAL_RCC_ClockConfig+0x140>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003372:	f7fe fab5 	bl	80018e0 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_ClockConfig+0x140>
      {
        return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e1bf      	b.n	8003704 <HAL_RCC_ClockConfig+0x4c0>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003384:	f7ff fa4d 	bl	8002822 <LL_RCC_IsActiveFlag_HPRE>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0f1      	beq.n	8003372 <HAL_RCC_ClockConfig+0x12e>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0320 	and.w	r3, r3, #32
 8003396:	2b00      	cmp	r3, #0
 8003398:	d057      	beq.n	800344a <HAL_RCC_ClockConfig+0x206>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d038      	beq.n	8003414 <HAL_RCC_ClockConfig+0x1d0>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	2b80      	cmp	r3, #128	@ 0x80
 80033a8:	d034      	beq.n	8003414 <HAL_RCC_ClockConfig+0x1d0>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	2b10      	cmp	r3, #16
 80033b0:	d030      	beq.n	8003414 <HAL_RCC_ClockConfig+0x1d0>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	2b90      	cmp	r3, #144	@ 0x90
 80033b8:	d02c      	beq.n	8003414 <HAL_RCC_ClockConfig+0x1d0>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d028      	beq.n	8003414 <HAL_RCC_ClockConfig+0x1d0>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	2b50      	cmp	r3, #80	@ 0x50
 80033c8:	d024      	beq.n	8003414 <HAL_RCC_ClockConfig+0x1d0>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80033d0:	d020      	beq.n	8003414 <HAL_RCC_ClockConfig+0x1d0>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	2b60      	cmp	r3, #96	@ 0x60
 80033d8:	d01c      	beq.n	8003414 <HAL_RCC_ClockConfig+0x1d0>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	2bb0      	cmp	r3, #176	@ 0xb0
 80033e0:	d018      	beq.n	8003414 <HAL_RCC_ClockConfig+0x1d0>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	2b70      	cmp	r3, #112	@ 0x70
 80033e8:	d014      	beq.n	8003414 <HAL_RCC_ClockConfig+0x1d0>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80033f0:	d010      	beq.n	8003414 <HAL_RCC_ClockConfig+0x1d0>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	2bd0      	cmp	r3, #208	@ 0xd0
 80033f8:	d00c      	beq.n	8003414 <HAL_RCC_ClockConfig+0x1d0>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	2be0      	cmp	r3, #224	@ 0xe0
 8003400:	d008      	beq.n	8003414 <HAL_RCC_ClockConfig+0x1d0>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	2bf0      	cmp	r3, #240	@ 0xf0
 8003408:	d004      	beq.n	8003414 <HAL_RCC_ClockConfig+0x1d0>
 800340a:	f240 415a 	movw	r1, #1114	@ 0x45a
 800340e:	480a      	ldr	r0, [pc, #40]	@ (8003438 <HAL_RCC_ClockConfig+0x1f4>)
 8003410:	f7fe f86a 	bl	80014e8 <assert_failed>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff f932 	bl	8002682 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800341e:	f7fe fa5f 	bl	80018e0 <HAL_GetTick>
 8003422:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003424:	e00c      	b.n	8003440 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003426:	f7fe fa5b 	bl	80018e0 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d905      	bls.n	8003440 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e165      	b.n	8003704 <HAL_RCC_ClockConfig+0x4c0>
 8003438:	08008074 	.word	0x08008074
 800343c:	58004000 	.word	0x58004000
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003440:	f7ff fa01 	bl	8002846 <LL_RCC_IsActiveFlag_C2HPRE>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0ed      	beq.n	8003426 <HAL_RCC_ClockConfig+0x1e2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d053      	beq.n	80034fe <HAL_RCC_ClockConfig+0x2ba>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d038      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x28c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b80      	cmp	r3, #128	@ 0x80
 8003464:	d034      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x28c>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	2b10      	cmp	r3, #16
 800346c:	d030      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x28c>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	2b90      	cmp	r3, #144	@ 0x90
 8003474:	d02c      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x28c>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b20      	cmp	r3, #32
 800347c:	d028      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x28c>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	2b50      	cmp	r3, #80	@ 0x50
 8003484:	d024      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x28c>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	2ba0      	cmp	r3, #160	@ 0xa0
 800348c:	d020      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x28c>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b60      	cmp	r3, #96	@ 0x60
 8003494:	d01c      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x28c>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	2bb0      	cmp	r3, #176	@ 0xb0
 800349c:	d018      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x28c>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	2b70      	cmp	r3, #112	@ 0x70
 80034a4:	d014      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x28c>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80034ac:	d010      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x28c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	2bd0      	cmp	r3, #208	@ 0xd0
 80034b4:	d00c      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x28c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2be0      	cmp	r3, #224	@ 0xe0
 80034bc:	d008      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x28c>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	2bf0      	cmp	r3, #240	@ 0xf0
 80034c4:	d004      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x28c>
 80034c6:	f240 416a 	movw	r1, #1130	@ 0x46a
 80034ca:	4890      	ldr	r0, [pc, #576]	@ (800370c <HAL_RCC_ClockConfig+0x4c8>)
 80034cc:	f7fe f80c 	bl	80014e8 <assert_failed>
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff f8ea 	bl	80026ae <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034da:	f7fe fa01 	bl	80018e0 <HAL_GetTick>
 80034de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_ClockConfig+0x2b0>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034e2:	f7fe f9fd 	bl	80018e0 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_ClockConfig+0x2b0>
      {
        return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e107      	b.n	8003704 <HAL_RCC_ClockConfig+0x4c0>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80034f4:	f7ff f9ba 	bl	800286c <LL_RCC_IsActiveFlag_SHDHPRE>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f1      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x29e>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	2b00      	cmp	r3, #0
 8003508:	d033      	beq.n	8003572 <HAL_RCC_ClockConfig+0x32e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d018      	beq.n	8003544 <HAL_RCC_ClockConfig+0x300>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800351a:	d013      	beq.n	8003544 <HAL_RCC_ClockConfig+0x300>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003524:	d00e      	beq.n	8003544 <HAL_RCC_ClockConfig+0x300>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800352e:	d009      	beq.n	8003544 <HAL_RCC_ClockConfig+0x300>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003538:	d004      	beq.n	8003544 <HAL_RCC_ClockConfig+0x300>
 800353a:	f240 417b 	movw	r1, #1147	@ 0x47b
 800353e:	4873      	ldr	r0, [pc, #460]	@ (800370c <HAL_RCC_ClockConfig+0x4c8>)
 8003540:	f7fd ffd2 	bl	80014e8 <assert_failed>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff f8c7 	bl	80026dc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800354e:	f7fe f9c7 	bl	80018e0 <HAL_GetTick>
 8003552:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_ClockConfig+0x324>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003556:	f7fe f9c3 	bl	80018e0 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_ClockConfig+0x324>
      {
        return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e0cd      	b.n	8003704 <HAL_RCC_ClockConfig+0x4c0>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003568:	f7ff f993 	bl	8002892 <LL_RCC_IsActiveFlag_PPRE1>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f1      	beq.n	8003556 <HAL_RCC_ClockConfig+0x312>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d034      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x3a4>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d018      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x374>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800358e:	d013      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x374>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003598:	d00e      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x374>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80035a2:	d009      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x374>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80035ac:	d004      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x374>
 80035ae:	f240 418c 	movw	r1, #1164	@ 0x48c
 80035b2:	4856      	ldr	r0, [pc, #344]	@ (800370c <HAL_RCC_ClockConfig+0x4c8>)
 80035b4:	f7fd ff98 	bl	80014e8 <assert_failed>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff f8a0 	bl	8002704 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035c4:	f7fe f98c 	bl	80018e0 <HAL_GetTick>
 80035c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80035ca:	e008      	b.n	80035de <HAL_RCC_ClockConfig+0x39a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035cc:	f7fe f988 	bl	80018e0 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_ClockConfig+0x39a>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e092      	b.n	8003704 <HAL_RCC_ClockConfig+0x4c0>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80035de:	f7ff f96a 	bl	80028b6 <LL_RCC_IsActiveFlag_PPRE2>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0f1      	beq.n	80035cc <HAL_RCC_ClockConfig+0x388>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d058      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x462>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d010      	beq.n	800361e <HAL_RCC_ClockConfig+0x3da>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d00c      	beq.n	800361e <HAL_RCC_ClockConfig+0x3da>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d008      	beq.n	800361e <HAL_RCC_ClockConfig+0x3da>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b03      	cmp	r3, #3
 8003612:	d004      	beq.n	800361e <HAL_RCC_ClockConfig+0x3da>
 8003614:	f240 419d 	movw	r1, #1181	@ 0x49d
 8003618:	483c      	ldr	r0, [pc, #240]	@ (800370c <HAL_RCC_ClockConfig+0x4c8>)
 800361a:	f7fd ff65 	bl	80014e8 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d106      	bne.n	8003634 <HAL_RCC_ClockConfig+0x3f0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003626:	f7fe fe2b 	bl	8002280 <LL_RCC_HSE_IsReady>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d11e      	bne.n	800366e <HAL_RCC_ClockConfig+0x42a>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e067      	b.n	8003704 <HAL_RCC_ClockConfig+0x4c0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b03      	cmp	r3, #3
 800363a:	d106      	bne.n	800364a <HAL_RCC_ClockConfig+0x406>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800363c:	f7ff f8ae 	bl	800279c <LL_RCC_PLL_IsReady>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d113      	bne.n	800366e <HAL_RCC_ClockConfig+0x42a>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e05c      	b.n	8003704 <HAL_RCC_ClockConfig+0x4c0>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_RCC_ClockConfig+0x41c>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003652:	f7fe ff93 	bl	800257c <LL_RCC_MSI_IsReady>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d108      	bne.n	800366e <HAL_RCC_ClockConfig+0x42a>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e051      	b.n	8003704 <HAL_RCC_ClockConfig+0x4c0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003660:	f7fe fe3e 	bl	80022e0 <LL_RCC_HSI_IsReady>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_RCC_ClockConfig+0x42a>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e04a      	b.n	8003704 <HAL_RCC_ClockConfig+0x4c0>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe ffd1 	bl	800261a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003678:	f7fe f932 	bl	80018e0 <HAL_GetTick>
 800367c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367e:	e00a      	b.n	8003696 <HAL_RCC_ClockConfig+0x452>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003680:	f7fe f92e 	bl	80018e0 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800368e:	4293      	cmp	r3, r2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_ClockConfig+0x452>
      {
        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e036      	b.n	8003704 <HAL_RCC_ClockConfig+0x4c0>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003696:	f7fe ffd4 	bl	8002642 <LL_RCC_GetSysClkSource>
 800369a:	4602      	mov	r2, r0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d1ec      	bne.n	8003680 <HAL_RCC_ClockConfig+0x43c>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003710 <HAL_RCC_ClockConfig+0x4cc>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d21b      	bcs.n	80036ec <HAL_RCC_ClockConfig+0x4a8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b4:	4b16      	ldr	r3, [pc, #88]	@ (8003710 <HAL_RCC_ClockConfig+0x4cc>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f023 0207 	bic.w	r2, r3, #7
 80036bc:	4914      	ldr	r1, [pc, #80]	@ (8003710 <HAL_RCC_ClockConfig+0x4cc>)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c4:	f7fe f90c 	bl	80018e0 <HAL_GetTick>
 80036c8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ca:	e008      	b.n	80036de <HAL_RCC_ClockConfig+0x49a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80036cc:	f7fe f908 	bl	80018e0 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_ClockConfig+0x49a>
      {
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e012      	b.n	8003704 <HAL_RCC_ClockConfig+0x4c0>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b0c      	ldr	r3, [pc, #48]	@ (8003710 <HAL_RCC_ClockConfig+0x4cc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d1ef      	bne.n	80036cc <HAL_RCC_ClockConfig+0x488>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80036ec:	f000 f880 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 80036f0:	4603      	mov	r3, r0
 80036f2:	4a08      	ldr	r2, [pc, #32]	@ (8003714 <HAL_RCC_ClockConfig+0x4d0>)
 80036f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80036f6:	f7fe f8ff 	bl	80018f8 <HAL_GetTickPrio>
 80036fa:	4603      	mov	r3, r0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fe f8a1 	bl	8001844 <HAL_InitTick>
 8003702:	4603      	mov	r3, r0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	08008074 	.word	0x08008074
 8003710:	58004000 	.word	0x58004000
 8003714:	20000008 	.word	0x20000008

08003718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003718:	b590      	push	{r4, r7, lr}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800371e:	f7fe ff90 	bl	8002642 <LL_RCC_GetSysClkSource>
 8003722:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10a      	bne.n	8003740 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800372a:	f7fe ff4c 	bl	80025c6 <LL_RCC_MSI_GetRange>
 800372e:	4603      	mov	r3, r0
 8003730:	091b      	lsrs	r3, r3, #4
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	4a2b      	ldr	r2, [pc, #172]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	e04b      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b04      	cmp	r3, #4
 8003744:	d102      	bne.n	800374c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003746:	4b28      	ldr	r3, [pc, #160]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	e045      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b08      	cmp	r3, #8
 8003750:	d10a      	bne.n	8003768 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003752:	f7fe fd65 	bl	8002220 <LL_RCC_HSE_IsEnabledDiv2>
 8003756:	4603      	mov	r3, r0
 8003758:	2b01      	cmp	r3, #1
 800375a:	d102      	bne.n	8003762 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800375c:	4b22      	ldr	r3, [pc, #136]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	e03a      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003762:	4b22      	ldr	r3, [pc, #136]	@ (80037ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	e037      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003768:	f7ff f84f 	bl	800280a <LL_RCC_PLL_GetMainSource>
 800376c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d003      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0x64>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2b03      	cmp	r3, #3
 8003778:	d003      	beq.n	8003782 <HAL_RCC_GetSysClockFreq+0x6a>
 800377a:	e00d      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800377c:	4b1a      	ldr	r3, [pc, #104]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800377e:	60bb      	str	r3, [r7, #8]
        break;
 8003780:	e015      	b.n	80037ae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003782:	f7fe fd4d 	bl	8002220 <LL_RCC_HSE_IsEnabledDiv2>
 8003786:	4603      	mov	r3, r0
 8003788:	2b01      	cmp	r3, #1
 800378a:	d102      	bne.n	8003792 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800378c:	4b16      	ldr	r3, [pc, #88]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800378e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003790:	e00d      	b.n	80037ae <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003792:	4b16      	ldr	r3, [pc, #88]	@ (80037ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8003794:	60bb      	str	r3, [r7, #8]
        break;
 8003796:	e00a      	b.n	80037ae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003798:	f7fe ff15 	bl	80025c6 <LL_RCC_MSI_GetRange>
 800379c:	4603      	mov	r3, r0
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	4a0f      	ldr	r2, [pc, #60]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80037a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037aa:	60bb      	str	r3, [r7, #8]
        break;
 80037ac:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80037ae:	f7ff f807 	bl	80027c0 <LL_RCC_PLL_GetN>
 80037b2:	4602      	mov	r2, r0
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	fb03 f402 	mul.w	r4, r3, r2
 80037ba:	f7ff f81a 	bl	80027f2 <LL_RCC_PLL_GetDivider>
 80037be:	4603      	mov	r3, r0
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	3301      	adds	r3, #1
 80037c4:	fbb4 f4f3 	udiv	r4, r4, r3
 80037c8:	f7ff f807 	bl	80027da <LL_RCC_PLL_GetR>
 80037cc:	4603      	mov	r3, r0
 80037ce:	0f5b      	lsrs	r3, r3, #29
 80037d0:	3301      	adds	r3, #1
 80037d2:	fbb4 f3f3 	udiv	r3, r4, r3
 80037d6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80037d8:	68fb      	ldr	r3, [r7, #12]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd90      	pop	{r4, r7, pc}
 80037e2:	bf00      	nop
 80037e4:	08008300 	.word	0x08008300
 80037e8:	00f42400 	.word	0x00f42400
 80037ec:	01e84800 	.word	0x01e84800

080037f0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f0:	b598      	push	{r3, r4, r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80037f4:	f7ff ff90 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 80037f8:	4604      	mov	r4, r0
 80037fa:	f7fe ff97 	bl	800272c <LL_RCC_GetAHBPrescaler>
 80037fe:	4603      	mov	r3, r0
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	4a03      	ldr	r2, [pc, #12]	@ (8003814 <HAL_RCC_GetHCLKFreq+0x24>)
 8003808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800380c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003810:	4618      	mov	r0, r3
 8003812:	bd98      	pop	{r3, r4, r7, pc}
 8003814:	080082c0 	.word	0x080082c0

08003818 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003818:	b590      	push	{r4, r7, lr}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d025      	beq.n	8003872 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b10      	cmp	r3, #16
 800382a:	d022      	beq.n	8003872 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b20      	cmp	r3, #32
 8003830:	d01f      	beq.n	8003872 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b30      	cmp	r3, #48	@ 0x30
 8003836:	d01c      	beq.n	8003872 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b40      	cmp	r3, #64	@ 0x40
 800383c:	d019      	beq.n	8003872 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b50      	cmp	r3, #80	@ 0x50
 8003842:	d016      	beq.n	8003872 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b60      	cmp	r3, #96	@ 0x60
 8003848:	d013      	beq.n	8003872 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b70      	cmp	r3, #112	@ 0x70
 800384e:	d010      	beq.n	8003872 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b80      	cmp	r3, #128	@ 0x80
 8003854:	d00d      	beq.n	8003872 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b90      	cmp	r3, #144	@ 0x90
 800385a:	d00a      	beq.n	8003872 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003860:	d007      	beq.n	8003872 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2bb0      	cmp	r3, #176	@ 0xb0
 8003866:	d004      	beq.n	8003872 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8003868:	f240 61b9 	movw	r1, #1721	@ 0x6b9
 800386c:	4817      	ldr	r0, [pc, #92]	@ (80038cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800386e:	f7fd fe3b 	bl	80014e8 <assert_failed>

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2bb0      	cmp	r3, #176	@ 0xb0
 8003876:	d903      	bls.n	8003880 <RCC_SetFlashLatencyFromMSIRange+0x68>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003878:	4b15      	ldr	r3, [pc, #84]	@ (80038d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800387a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	e007      	b.n	8003890 <RCC_SetFlashLatencyFromMSIRange+0x78>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	4a11      	ldr	r2, [pc, #68]	@ (80038d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800388a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388e:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003890:	f7fe ff58 	bl	8002744 <LL_RCC_GetAHB4Prescaler>
 8003894:	4603      	mov	r3, r0
 8003896:	091b      	lsrs	r3, r3, #4
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	4a0d      	ldr	r2, [pc, #52]	@ (80038d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800389e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a8:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	4a0a      	ldr	r2, [pc, #40]	@ (80038d8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80038ae:	fba2 2303 	umull	r2, r3, r2, r3
 80038b2:	0c9c      	lsrs	r4, r3, #18
 80038b4:	f7fe fca6 	bl	8002204 <HAL_PWREx_GetVoltageRange>
 80038b8:	4603      	mov	r3, r0
 80038ba:	4619      	mov	r1, r3
 80038bc:	4620      	mov	r0, r4
 80038be:	f000 f80d 	bl	80038dc <RCC_SetFlashLatency>
 80038c2:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd90      	pop	{r4, r7, pc}
 80038cc:	08008074 	.word	0x08008074
 80038d0:	08008300 	.word	0x08008300
 80038d4:	080082c0 	.word	0x080082c0
 80038d8:	431bde83 	.word	0x431bde83

080038dc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80038dc:	b590      	push	{r4, r7, lr}
 80038de:	b093      	sub	sp, #76	@ 0x4c
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80038e6:	4b37      	ldr	r3, [pc, #220]	@ (80039c4 <RCC_SetFlashLatency+0xe8>)
 80038e8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80038ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80038f2:	4a35      	ldr	r2, [pc, #212]	@ (80039c8 <RCC_SetFlashLatency+0xec>)
 80038f4:	f107 031c 	add.w	r3, r7, #28
 80038f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80038fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80038fe:	4b33      	ldr	r3, [pc, #204]	@ (80039cc <RCC_SetFlashLatency+0xf0>)
 8003900:	f107 040c 	add.w	r4, r7, #12
 8003904:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003906:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800390a:	2300      	movs	r3, #0
 800390c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003914:	d11a      	bne.n	800394c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003916:	2300      	movs	r3, #0
 8003918:	643b      	str	r3, [r7, #64]	@ 0x40
 800391a:	e013      	b.n	8003944 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800391c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	3348      	adds	r3, #72	@ 0x48
 8003922:	443b      	add	r3, r7
 8003924:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	429a      	cmp	r2, r3
 800392c:	d807      	bhi.n	800393e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800392e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	3348      	adds	r3, #72	@ 0x48
 8003934:	443b      	add	r3, r7
 8003936:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800393a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800393c:	e020      	b.n	8003980 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800393e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003940:	3301      	adds	r3, #1
 8003942:	643b      	str	r3, [r7, #64]	@ 0x40
 8003944:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003946:	2b03      	cmp	r3, #3
 8003948:	d9e8      	bls.n	800391c <RCC_SetFlashLatency+0x40>
 800394a:	e019      	b.n	8003980 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800394c:	2300      	movs	r3, #0
 800394e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003950:	e013      	b.n	800397a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	3348      	adds	r3, #72	@ 0x48
 8003958:	443b      	add	r3, r7
 800395a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	429a      	cmp	r2, r3
 8003962:	d807      	bhi.n	8003974 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	3348      	adds	r3, #72	@ 0x48
 800396a:	443b      	add	r3, r7
 800396c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003970:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003972:	e005      	b.n	8003980 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003976:	3301      	adds	r3, #1
 8003978:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800397a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800397c:	2b02      	cmp	r3, #2
 800397e:	d9e8      	bls.n	8003952 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003980:	4b13      	ldr	r3, [pc, #76]	@ (80039d0 <RCC_SetFlashLatency+0xf4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f023 0207 	bic.w	r2, r3, #7
 8003988:	4911      	ldr	r1, [pc, #68]	@ (80039d0 <RCC_SetFlashLatency+0xf4>)
 800398a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800398c:	4313      	orrs	r3, r2
 800398e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003990:	f7fd ffa6 	bl	80018e0 <HAL_GetTick>
 8003994:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003996:	e008      	b.n	80039aa <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003998:	f7fd ffa2 	bl	80018e0 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e007      	b.n	80039ba <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80039aa:	4b09      	ldr	r3, [pc, #36]	@ (80039d0 <RCC_SetFlashLatency+0xf4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d1ef      	bne.n	8003998 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	374c      	adds	r7, #76	@ 0x4c
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd90      	pop	{r4, r7, pc}
 80039c2:	bf00      	nop
 80039c4:	080080ac 	.word	0x080080ac
 80039c8:	080080bc 	.word	0x080080bc
 80039cc:	080080c8 	.word	0x080080c8
 80039d0:	58004000 	.word	0x58004000

080039d4 <LL_RCC_LSE_IsEnabled>:
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80039d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <LL_RCC_LSE_IsEnabled+0x18>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <LL_RCC_LSE_IsEnabled+0x1a>
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <LL_RCC_LSE_IsReady>:
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80039fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d101      	bne.n	8003a10 <LL_RCC_LSE_IsReady+0x18>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <LL_RCC_LSE_IsReady+0x1a>
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <LL_RCC_SetRFWKPClockSource>:
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a2c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <LL_RCC_SetSMPSClockSource>:
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003a50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a56:	f023 0203 	bic.w	r2, r3, #3
 8003a5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <LL_RCC_SetSMPSPrescaler>:
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003a78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003a82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <LL_RCC_SetUSARTClockSource>:
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa8:	f023 0203 	bic.w	r2, r3, #3
 8003aac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <LL_RCC_SetLPUARTClockSource>:
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ad8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <LL_RCC_SetI2CClockSource>:
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003afc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	401a      	ands	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003b14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <LL_RCC_SetLPTIMClockSource>:
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003b32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b36:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	041b      	lsls	r3, r3, #16
 8003b40:	43db      	mvns	r3, r3
 8003b42:	401a      	ands	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	041b      	lsls	r3, r3, #16
 8003b48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <LL_RCC_SetSAIClockSource>:
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <LL_RCC_SetRNGClockSource>:
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003b92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003b9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <LL_RCC_SetCLK48ClockSource>:
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <LL_RCC_SetUSBClockSource>:
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff ffe3 	bl	8003bb6 <LL_RCC_SetCLK48ClockSource>
}
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <LL_RCC_SetADCClockSource>:
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003c00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c08:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003c0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <LL_RCC_SetRTCClockSource>:
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <LL_RCC_GetRTCClockSource>:
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <LL_RCC_ForceBackupDomainReset>:
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003c82:	bf00      	nop
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <LL_RCC_ReleaseBackupDomainReset>:
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003ca4:	bf00      	nop
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <LL_RCC_PLLSAI1_Enable>:
{
 8003cae:	b480      	push	{r7}
 8003cb0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003cb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cbc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003cc0:	6013      	str	r3, [r2, #0]
}
 8003cc2:	bf00      	nop
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <LL_RCC_PLLSAI1_Disable>:
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003cd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003cde:	6013      	str	r3, [r2, #0]
}
 8003ce0:	bf00      	nop
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <LL_RCC_PLLSAI1_IsReady>:
{
 8003cea:	b480      	push	{r7}
 8003cec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003cee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cfc:	d101      	bne.n	8003d02 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
	...

08003d10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003d18:	2300      	movs	r3, #0
 8003d1a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	f643 737f 	movw	r3, #16255	@ 0x3f7f
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d007      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f423 537d 	bic.w	r3, r3, #16192	@ 0x3f40
 8003d36:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8003d3e:	219a      	movs	r1, #154	@ 0x9a
 8003d40:	485b      	ldr	r0, [pc, #364]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8003d42:	f7fd fbd1 	bl	80014e8 <assert_failed>

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d04b      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d012      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d62:	d00d      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d6c:	d008      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d72:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d76:	d003      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8003d78:	21a1      	movs	r1, #161	@ 0xa1
 8003d7a:	484d      	ldr	r0, [pc, #308]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8003d7c:	f7fd fbb4 	bl	80014e8 <assert_failed>

    switch (PeriphClkInit->Sai1ClockSelection)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d84:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d88:	d021      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003d8a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d8e:	d81b      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8003d90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d94:	d01d      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8003d96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d9a:	d815      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00b      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
 8003da0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003da4:	d110      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003db6:	e00d      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xc4>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fa8d 	bl	80042dc <RCCEx_PLLSAI1_ConfigNP>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003dc6:	e005      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	77fb      	strb	r3, [r7, #31]
        break;
 8003dcc:	e002      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        break;
 8003dce:	bf00      	nop
 8003dd0:	e000      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        break;
 8003dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd4:	7ffb      	ldrb	r3, [r7, #31]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d105      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff febd 	bl	8003b5e <LL_RCC_SetSAIClockSource>
 8003de4:	e001      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de6:	7ffb      	ldrb	r3, [r7, #31]
 8003de8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d060      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003df6:	f7ff ff2b 	bl	8003c50 <LL_RCC_GetRTCClockSource>
 8003dfa:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d012      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x11a>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e0c:	d00d      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x11a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e16:	d008      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x11a>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e20:	d003      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x11a>
 8003e22:	21d2      	movs	r1, #210	@ 0xd2
 8003e24:	4822      	ldr	r0, [pc, #136]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8003e26:	f7fd fb5f 	bl	80014e8 <assert_failed>

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d03f      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003e34:	f7fe f9d6 	bl	80021e4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d105      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x13a>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff feee 	bl	8003c24 <LL_RCC_SetRTCClockSource>
 8003e48:	e02e      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003e4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e52:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003e54:	f7ff ff09 	bl	8003c6a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003e58:	f7ff ff18 	bl	8003c8c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	4313      	orrs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003e6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003e74:	f7ff fdae 	bl	80039d4 <LL_RCC_LSE_IsEnabled>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d114      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x198>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e7e:	f7fd fd2f 	bl	80018e0 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003e84:	e00b      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x18e>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e86:	f7fd fd2b 	bl	80018e0 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d902      	bls.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x18e>
            {
              ret = HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	77fb      	strb	r3, [r7, #31]
              break;
 8003e9c:	e004      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x198>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003e9e:	f7ff fdab 	bl	80039f8 <LL_RCC_LSE_IsReady>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d1ee      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x176>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003ea8:	7ffb      	ldrb	r3, [r7, #31]
 8003eaa:	77bb      	strb	r3, [r7, #30]
 8003eac:	e004      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003eae:	bf00      	nop
 8003eb0:	080080d8 	.word	0x080080d8
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb4:	7ffb      	ldrb	r3, [r7, #31]
 8003eb6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d019      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d010      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x1de>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d00c      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x1de>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d008      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x1de>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d004      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x1de>
 8003ee4:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8003ee8:	4896      	ldr	r0, [pc, #600]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003eea:	f7fd fafd 	bl	80014e8 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff fdd0 	bl	8003a98 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d01c      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d013      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x224>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f14:	d00e      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x224>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f1e:	d009      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x224>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f28:	d004      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x224>
 8003f2a:	f240 111b 	movw	r1, #283	@ 0x11b
 8003f2e:	4885      	ldr	r0, [pc, #532]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f30:	f7fd fada 	bl	80014e8 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff fdc3 	bl	8003ac4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d01d      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003f52:	d013      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f58:	4a7b      	ldr	r2, [pc, #492]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d00e      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f62:	4a7a      	ldr	r2, [pc, #488]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d009      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6c:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 8003f70:	d004      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f72:	f240 1125 	movw	r1, #293	@ 0x125
 8003f76:	4873      	ldr	r0, [pc, #460]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f78:	f7fd fab6 	bl	80014e8 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff fdd2 	bl	8003b2a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d01d      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f9a:	d013      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa0:	4a6b      	ldr	r2, [pc, #428]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00e      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003faa:	4a6a      	ldr	r2, [pc, #424]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d009      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb4:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8003fb8:	d004      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003fba:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8003fbe:	4861      	ldr	r0, [pc, #388]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003fc0:	f7fd fa92 	bl	80014e8 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fdae 	bl	8003b2a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d018      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003fe2:	d00e      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	4a5b      	ldr	r2, [pc, #364]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d009      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	4a5a      	ldr	r2, [pc, #360]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d004      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
 8003ff8:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8003ffc:	4851      	ldr	r0, [pc, #324]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ffe:	f7fd fa73 	bl	80014e8 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff fd72 	bl	8003af0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d018      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x33a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004020:	d00e      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004026:	4a4e      	ldr	r2, [pc, #312]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d009      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004030:	4a4c      	ldr	r2, [pc, #304]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d004      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004036:	f240 113f 	movw	r1, #319	@ 0x13f
 800403a:	4842      	ldr	r0, [pc, #264]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800403c:	f7fd fa54 	bl	80014e8 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff fd53 	bl	8003af0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d03a      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800405a:	2b00      	cmp	r3, #0
 800405c:	d013      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004062:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004066:	d00e      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800406c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004070:	d009      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004076:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800407a:	d004      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800407c:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8004080:	4830      	ldr	r0, [pc, #192]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004082:	f7fd fa31 	bl	80014e8 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff fda9 	bl	8003be2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004094:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004098:	d107      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x39a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800409a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040a8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040b2:	d10b      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3304      	adds	r3, #4
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 f9a7 	bl	800440c <RCCEx_PLLSAI1_ConfigNQ>
 80040be:	4603      	mov	r3, r0
 80040c0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80040c2:	7ffb      	ldrb	r3, [r7, #31]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* set overall return value */
        status = ret;
 80040c8:	7ffb      	ldrb	r3, [r7, #31]
 80040ca:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d065      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040e0:	d021      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80040ea:	d01c      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f0:	f1b3 5fe0 	cmp.w	r3, #469762048	@ 0x1c000000
 80040f4:	d017      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fa:	f1b3 5fa0 	cmp.w	r3, #335544320	@ 0x14000000
 80040fe:	d012      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00e      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004110:	d009      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004116:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800411a:	d004      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800411c:	f44f 71b3 	mov.w	r1, #358	@ 0x166
 8004120:	4808      	ldr	r0, [pc, #32]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004122:	f7fd f9e1 	bl	80014e8 <assert_failed>

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800412e:	d01b      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004134:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004138:	d016      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x458>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413e:	2b00      	cmp	r3, #0
 8004140:	d118      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004142:	e011      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8004144:	080080d8 	.word	0x080080d8
 8004148:	000c0004 	.word	0x000c0004
 800414c:	000c0008 	.word	0x000c0008
 8004150:	00300010 	.word	0x00300010
 8004154:	00300020 	.word	0x00300020
 8004158:	00030100 	.word	0x00030100
 800415c:	00030200 	.word	0x00030200
 8004160:	00301000 	.word	0x00301000
 8004164:	00302000 	.word	0x00302000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800416c:	4618      	mov	r0, r3
 800416e:	f7ff fd0c 	bl	8003b8a <LL_RCC_SetRNGClockSource>
 8004172:	e00a      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004178:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	2000      	movs	r0, #0
 8004180:	f7ff fd03 	bl	8003b8a <LL_RCC_SetRNGClockSource>
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f7ff fd16 	bl	8003bb6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004192:	d107      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800419e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d03a      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d013      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041c0:	d00e      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041ca:	d009      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041d4:	d004      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80041d6:	f44f 71bb 	mov.w	r1, #374	@ 0x176
 80041da:	483f      	ldr	r0, [pc, #252]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041dc:	f7fd f984 	bl	80014e8 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff fd07 	bl	8003bf8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041f2:	d107      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004202:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004208:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800420c:	d10b      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	3304      	adds	r3, #4
 8004212:	4618      	mov	r0, r3
 8004214:	f000 f992 	bl	800453c <RCCEx_PLLSAI1_ConfigNR>
 8004218:	4603      	mov	r3, r0
 800421a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800421c:	7ffb      	ldrb	r3, [r7, #31]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* set overall return value */
        status = ret;
 8004222:	7ffb      	ldrb	r3, [r7, #31]
 8004224:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d017      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x552>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00e      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x548>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004242:	d009      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004248:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800424c:	d004      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x548>
 800424e:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8004252:	4821      	ldr	r0, [pc, #132]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004254:	f7fd f948 	bl	80014e8 <assert_failed>

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff fbdd 	bl	8003a1c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d02f      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004272:	2b00      	cmp	r3, #0
 8004274:	d010      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800427a:	2b10      	cmp	r3, #16
 800427c:	d00c      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004282:	2b20      	cmp	r3, #32
 8004284:	d008      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428a:	2b30      	cmp	r3, #48	@ 0x30
 800428c:	d004      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800428e:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8004292:	4811      	ldr	r0, [pc, #68]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004294:	f7fd f928 	bl	80014e8 <assert_failed>
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00c      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d008      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d004      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80042b0:	f240 11a1 	movw	r1, #417	@ 0x1a1
 80042b4:	4808      	ldr	r0, [pc, #32]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042b6:	f7fd f917 	bl	80014e8 <assert_failed>

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff fbd6 	bl	8003a70 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff fbbd 	bl	8003a48 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80042ce:	7fbb      	ldrb	r3, [r7, #30]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3720      	adds	r7, #32
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	080080d8 	.word	0x080080d8

080042dc <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b05      	cmp	r3, #5
 80042ee:	d903      	bls.n	80042f8 <RCCEx_PLLSAI1_ConfigNP+0x1c>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80042f6:	d904      	bls.n	8004302 <RCCEx_PLLSAI1_ConfigNP+0x26>
 80042f8:	f240 7176 	movw	r1, #1910	@ 0x776
 80042fc:	4842      	ldr	r0, [pc, #264]	@ (8004408 <RCCEx_PLLSAI1_ConfigNP+0x12c>)
 80042fe:	f7fd f8f3 	bl	80014e8 <assert_failed>
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800430a:	d304      	bcc.n	8004316 <RCCEx_PLLSAI1_ConfigNP+0x3a>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f5b3 1f78 	cmp.w	r3, #4063232	@ 0x3e0000
 8004314:	d904      	bls.n	8004320 <RCCEx_PLLSAI1_ConfigNP+0x44>
 8004316:	f240 7177 	movw	r1, #1911	@ 0x777
 800431a:	483b      	ldr	r0, [pc, #236]	@ (8004408 <RCCEx_PLLSAI1_ConfigNP+0x12c>)
 800431c:	f7fd f8e4 	bl	80014e8 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10b      	bne.n	8004344 <RCCEx_PLLSAI1_ConfigNP+0x68>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d105      	bne.n	8004344 <RCCEx_PLLSAI1_ConfigNP+0x68>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d007      	beq.n	8004354 <RCCEx_PLLSAI1_ConfigNP+0x78>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 800434c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d004      	beq.n	800435e <RCCEx_PLLSAI1_ConfigNP+0x82>
 8004354:	f44f 61ef 	mov.w	r1, #1912	@ 0x778
 8004358:	482b      	ldr	r0, [pc, #172]	@ (8004408 <RCCEx_PLLSAI1_ConfigNP+0x12c>)
 800435a:	f7fd f8c5 	bl	80014e8 <assert_failed>

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800435e:	f7ff fcb5 	bl	8003ccc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004362:	f7fd fabd 	bl	80018e0 <HAL_GetTick>
 8004366:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004368:	e009      	b.n	800437e <RCCEx_PLLSAI1_ConfigNP+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800436a:	f7fd fab9 	bl	80018e0 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d902      	bls.n	800437e <RCCEx_PLLSAI1_ConfigNP+0xa2>
    {
      status = HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	73fb      	strb	r3, [r7, #15]
      break;
 800437c:	e004      	b.n	8004388 <RCCEx_PLLSAI1_ConfigNP+0xac>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800437e:	f7ff fcb4 	bl	8003cea <LL_RCC_PLLSAI1_IsReady>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1f0      	bne.n	800436a <RCCEx_PLLSAI1_ConfigNP+0x8e>
    }
  }

  if (status == HAL_OK)
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d137      	bne.n	80043fe <RCCEx_PLLSAI1_ConfigNP+0x122>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800438e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043a2:	4313      	orrs	r3, r2
 80043a4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80043a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043b8:	4313      	orrs	r3, r2
 80043ba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80043bc:	f7ff fc77 	bl	8003cae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c0:	f7fd fa8e 	bl	80018e0 <HAL_GetTick>
 80043c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043c6:	e009      	b.n	80043dc <RCCEx_PLLSAI1_ConfigNP+0x100>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043c8:	f7fd fa8a 	bl	80018e0 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d902      	bls.n	80043dc <RCCEx_PLLSAI1_ConfigNP+0x100>
      {
        status = HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	73fb      	strb	r3, [r7, #15]
        break;
 80043da:	e004      	b.n	80043e6 <RCCEx_PLLSAI1_ConfigNP+0x10a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043dc:	f7ff fc85 	bl	8003cea <LL_RCC_PLLSAI1_IsReady>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d1f0      	bne.n	80043c8 <RCCEx_PLLSAI1_ConfigNP+0xec>
      }
    }

    if (status == HAL_OK)
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d108      	bne.n	80043fe <RCCEx_PLLSAI1_ConfigNP+0x122>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80043ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043f0:	691a      	ldr	r2, [r3, #16]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043fa:	4313      	orrs	r3, r2
 80043fc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	080080d8 	.word	0x080080d8

0800440c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b05      	cmp	r3, #5
 800441e:	d903      	bls.n	8004428 <RCCEx_PLLSAI1_ConfigNQ+0x1c>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b7f      	cmp	r3, #127	@ 0x7f
 8004426:	d904      	bls.n	8004432 <RCCEx_PLLSAI1_ConfigNQ+0x26>
 8004428:	f240 71bb 	movw	r1, #1979	@ 0x7bb
 800442c:	4842      	ldr	r0, [pc, #264]	@ (8004538 <RCCEx_PLLSAI1_ConfigNQ+0x12c>)
 800442e:	f7fd f85b 	bl	80014e8 <assert_failed>
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800443a:	d304      	bcc.n	8004446 <RCCEx_PLLSAI1_ConfigNQ+0x3a>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 8004444:	d904      	bls.n	8004450 <RCCEx_PLLSAI1_ConfigNQ+0x44>
 8004446:	f240 71bc 	movw	r1, #1980	@ 0x7bc
 800444a:	483b      	ldr	r0, [pc, #236]	@ (8004538 <RCCEx_PLLSAI1_ConfigNQ+0x12c>)
 800444c:	f7fd f84c 	bl	80014e8 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10b      	bne.n	8004474 <RCCEx_PLLSAI1_ConfigNQ+0x68>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d105      	bne.n	8004474 <RCCEx_PLLSAI1_ConfigNQ+0x68>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d007      	beq.n	8004484 <RCCEx_PLLSAI1_ConfigNQ+0x78>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 800447c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d004      	beq.n	800448e <RCCEx_PLLSAI1_ConfigNQ+0x82>
 8004484:	f240 71bd 	movw	r1, #1981	@ 0x7bd
 8004488:	482b      	ldr	r0, [pc, #172]	@ (8004538 <RCCEx_PLLSAI1_ConfigNQ+0x12c>)
 800448a:	f7fd f82d 	bl	80014e8 <assert_failed>

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800448e:	f7ff fc1d 	bl	8003ccc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004492:	f7fd fa25 	bl	80018e0 <HAL_GetTick>
 8004496:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004498:	e009      	b.n	80044ae <RCCEx_PLLSAI1_ConfigNQ+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800449a:	f7fd fa21 	bl	80018e0 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d902      	bls.n	80044ae <RCCEx_PLLSAI1_ConfigNQ+0xa2>
    {
      status = HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	73fb      	strb	r3, [r7, #15]
      break;
 80044ac:	e004      	b.n	80044b8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80044ae:	f7ff fc1c 	bl	8003cea <LL_RCC_PLLSAI1_IsReady>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f0      	bne.n	800449a <RCCEx_PLLSAI1_ConfigNQ+0x8e>
    }
  }

  if (status == HAL_OK)
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d137      	bne.n	800452e <RCCEx_PLLSAI1_ConfigNQ+0x122>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80044be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	021b      	lsls	r3, r3, #8
 80044ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044d2:	4313      	orrs	r3, r2
 80044d4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80044d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044e8:	4313      	orrs	r3, r2
 80044ea:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80044ec:	f7ff fbdf 	bl	8003cae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f0:	f7fd f9f6 	bl	80018e0 <HAL_GetTick>
 80044f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80044f6:	e009      	b.n	800450c <RCCEx_PLLSAI1_ConfigNQ+0x100>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044f8:	f7fd f9f2 	bl	80018e0 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d902      	bls.n	800450c <RCCEx_PLLSAI1_ConfigNQ+0x100>
      {
        status = HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	73fb      	strb	r3, [r7, #15]
        break;
 800450a:	e004      	b.n	8004516 <RCCEx_PLLSAI1_ConfigNQ+0x10a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800450c:	f7ff fbed 	bl	8003cea <LL_RCC_PLLSAI1_IsReady>
 8004510:	4603      	mov	r3, r0
 8004512:	2b01      	cmp	r3, #1
 8004514:	d1f0      	bne.n	80044f8 <RCCEx_PLLSAI1_ConfigNQ+0xec>
      }
    }

    if (status == HAL_OK)
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d108      	bne.n	800452e <RCCEx_PLLSAI1_ConfigNQ+0x122>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800451c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004520:	691a      	ldr	r2, [r3, #16]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800452a:	4313      	orrs	r3, r2
 800452c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800452e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	080080d8 	.word	0x080080d8

0800453c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004544:	2300      	movs	r3, #0
 8004546:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b05      	cmp	r3, #5
 800454e:	d903      	bls.n	8004558 <RCCEx_PLLSAI1_ConfigNR+0x1c>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b7f      	cmp	r3, #127	@ 0x7f
 8004556:	d904      	bls.n	8004562 <RCCEx_PLLSAI1_ConfigNR+0x26>
 8004558:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800455c:	4842      	ldr	r0, [pc, #264]	@ (8004668 <RCCEx_PLLSAI1_ConfigNR+0x12c>)
 800455e:	f7fc ffc3 	bl	80014e8 <assert_failed>
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800456a:	d304      	bcc.n	8004576 <RCCEx_PLLSAI1_ConfigNR+0x3a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8004574:	d904      	bls.n	8004580 <RCCEx_PLLSAI1_ConfigNR+0x44>
 8004576:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800457a:	483b      	ldr	r0, [pc, #236]	@ (8004668 <RCCEx_PLLSAI1_ConfigNR+0x12c>)
 800457c:	f7fc ffb4 	bl	80014e8 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10b      	bne.n	80045a4 <RCCEx_PLLSAI1_ConfigNR+0x68>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d105      	bne.n	80045a4 <RCCEx_PLLSAI1_ConfigNR+0x68>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d007      	beq.n	80045b4 <RCCEx_PLLSAI1_ConfigNR+0x78>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 80045ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d004      	beq.n	80045be <RCCEx_PLLSAI1_ConfigNR+0x82>
 80045b4:	f640 0101 	movw	r1, #2049	@ 0x801
 80045b8:	482b      	ldr	r0, [pc, #172]	@ (8004668 <RCCEx_PLLSAI1_ConfigNR+0x12c>)
 80045ba:	f7fc ff95 	bl	80014e8 <assert_failed>

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80045be:	f7ff fb85 	bl	8003ccc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80045c2:	f7fd f98d 	bl	80018e0 <HAL_GetTick>
 80045c6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80045c8:	e009      	b.n	80045de <RCCEx_PLLSAI1_ConfigNR+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045ca:	f7fd f989 	bl	80018e0 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d902      	bls.n	80045de <RCCEx_PLLSAI1_ConfigNR+0xa2>
    {
      status = HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	73fb      	strb	r3, [r7, #15]
      break;
 80045dc:	e004      	b.n	80045e8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80045de:	f7ff fb84 	bl	8003cea <LL_RCC_PLLSAI1_IsReady>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f0      	bne.n	80045ca <RCCEx_PLLSAI1_ConfigNR+0x8e>
    }
  }

  if (status == HAL_OK)
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d137      	bne.n	800465e <RCCEx_PLLSAI1_ConfigNR+0x122>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80045ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	021b      	lsls	r3, r3, #8
 80045fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004602:	4313      	orrs	r3, r2
 8004604:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004606:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004618:	4313      	orrs	r3, r2
 800461a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800461c:	f7ff fb47 	bl	8003cae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004620:	f7fd f95e 	bl	80018e0 <HAL_GetTick>
 8004624:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004626:	e009      	b.n	800463c <RCCEx_PLLSAI1_ConfigNR+0x100>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004628:	f7fd f95a 	bl	80018e0 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d902      	bls.n	800463c <RCCEx_PLLSAI1_ConfigNR+0x100>
      {
        status = HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	73fb      	strb	r3, [r7, #15]
        break;
 800463a:	e004      	b.n	8004646 <RCCEx_PLLSAI1_ConfigNR+0x10a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800463c:	f7ff fb55 	bl	8003cea <LL_RCC_PLLSAI1_IsReady>
 8004640:	4603      	mov	r3, r0
 8004642:	2b01      	cmp	r3, #1
 8004644:	d1f0      	bne.n	8004628 <RCCEx_PLLSAI1_ConfigNR+0xec>
      }
    }

    if (status == HAL_OK)
 8004646:	7bfb      	ldrb	r3, [r7, #15]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d108      	bne.n	800465e <RCCEx_PLLSAI1_ConfigNR+0x122>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800464c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800465a:	4313      	orrs	r3, r2
 800465c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800465e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	080080d8 	.word	0x080080d8

0800466c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e0e4      	b.n	800484c <HAL_RTC_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a73      	ldr	r2, [pc, #460]	@ (8004854 <HAL_RTC_Init+0x1e8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d004      	beq.n	8004696 <HAL_RTC_Init+0x2a>
 800468c:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8004690:	4871      	ldr	r0, [pc, #452]	@ (8004858 <HAL_RTC_Init+0x1ec>)
 8004692:	f7fc ff29 	bl	80014e8 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b40      	cmp	r3, #64	@ 0x40
 800469c:	d008      	beq.n	80046b0 <HAL_RTC_Init+0x44>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d004      	beq.n	80046b0 <HAL_RTC_Init+0x44>
 80046a6:	f240 110b 	movw	r1, #267	@ 0x10b
 80046aa:	486b      	ldr	r0, [pc, #428]	@ (8004858 <HAL_RTC_Init+0x1ec>)
 80046ac:	f7fc ff1c 	bl	80014e8 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80046b6:	d904      	bls.n	80046c2 <HAL_RTC_Init+0x56>
 80046b8:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80046bc:	4866      	ldr	r0, [pc, #408]	@ (8004858 <HAL_RTC_Init+0x1ec>)
 80046be:	f7fc ff13 	bl	80014e8 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046ca:	d304      	bcc.n	80046d6 <HAL_RTC_Init+0x6a>
 80046cc:	f240 110d 	movw	r1, #269	@ 0x10d
 80046d0:	4861      	ldr	r0, [pc, #388]	@ (8004858 <HAL_RTC_Init+0x1ec>)
 80046d2:	f7fc ff09 	bl	80014e8 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d013      	beq.n	8004706 <HAL_RTC_Init+0x9a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046e6:	d00e      	beq.n	8004706 <HAL_RTC_Init+0x9a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046f0:	d009      	beq.n	8004706 <HAL_RTC_Init+0x9a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80046fa:	d004      	beq.n	8004706 <HAL_RTC_Init+0x9a>
 80046fc:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8004700:	4855      	ldr	r0, [pc, #340]	@ (8004858 <HAL_RTC_Init+0x1ec>)
 8004702:	f7fc fef1 	bl	80014e8 <assert_failed>
  assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d008      	beq.n	8004720 <HAL_RTC_Init+0xb4>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	2b02      	cmp	r3, #2
 8004714:	d004      	beq.n	8004720 <HAL_RTC_Init+0xb4>
 8004716:	f240 110f 	movw	r1, #271	@ 0x10f
 800471a:	484f      	ldr	r0, [pc, #316]	@ (8004858 <HAL_RTC_Init+0x1ec>)
 800471c:	f7fc fee4 	bl	80014e8 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <HAL_RTC_Init+0xd0>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004730:	d004      	beq.n	800473c <HAL_RTC_Init+0xd0>
 8004732:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8004736:	4848      	ldr	r0, [pc, #288]	@ (8004858 <HAL_RTC_Init+0x1ec>)
 8004738:	f7fc fed6 	bl	80014e8 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_RTC_Init+0xea>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d004      	beq.n	8004756 <HAL_RTC_Init+0xea>
 800474c:	f240 1111 	movw	r1, #273	@ 0x111
 8004750:	4841      	ldr	r0, [pc, #260]	@ (8004858 <HAL_RTC_Init+0x1ec>)
 8004752:	f7fc fec9 	bl	80014e8 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_RTC_Init+0x104>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fc ff22 	bl	80015b4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f003 0310 	and.w	r3, r3, #16
 8004782:	2b10      	cmp	r3, #16
 8004784:	d058      	beq.n	8004838 <HAL_RTC_Init+0x1cc>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	22ca      	movs	r2, #202	@ 0xca
 800478c:	625a      	str	r2, [r3, #36]	@ 0x24
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2253      	movs	r2, #83	@ 0x53
 8004794:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f886 	bl	80048a8 <RTC_EnterInitMode>
 800479c:	4603      	mov	r3, r0
 800479e:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d12c      	bne.n	8004800 <HAL_RTC_Init+0x194>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6812      	ldr	r2, [r2, #0]
 80047b0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80047b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047b8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6899      	ldr	r1, [r3, #8]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	68d2      	ldr	r2, [r2, #12]
 80047e0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6919      	ldr	r1, [r3, #16]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	041a      	lsls	r2, r3, #16
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f88e 	bl	8004918 <RTC_ExitInitMode>
 80047fc:	4603      	mov	r3, r0
 80047fe:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d113      	bne.n	800482e <HAL_RTC_Init+0x1c2>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0203 	bic.w	r2, r2, #3
 8004814:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69da      	ldr	r2, [r3, #28]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	22ff      	movs	r2, #255	@ 0xff
 8004834:	625a      	str	r2, [r3, #36]	@ 0x24
 8004836:	e001      	b.n	800483c <HAL_RTC_Init+0x1d0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800483c:	7bfb      	ldrb	r3, [r7, #15]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d103      	bne.n	800484a <HAL_RTC_Init+0x1de>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800484a:	7bfb      	ldrb	r3, [r7, #15]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40002800 	.word	0x40002800
 8004858:	08008114 	.word	0x08008114

0800485c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a0d      	ldr	r2, [pc, #52]	@ (80048a4 <HAL_RTC_WaitForSynchro+0x48>)
 800486e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004870:	f7fd f836 	bl	80018e0 <HAL_GetTick>
 8004874:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004876:	e009      	b.n	800488c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004878:	f7fd f832 	bl	80018e0 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004886:	d901      	bls.n	800488c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e007      	b.n	800489c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0ee      	beq.n	8004878 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	0001ff5f 	.word	0x0001ff5f

080048a8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d123      	bne.n	800490e <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80048d4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048d6:	f7fd f803 	bl	80018e0 <HAL_GetTick>
 80048da:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80048dc:	e00d      	b.n	80048fa <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048de:	f7fc ffff 	bl	80018e0 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048ec:	d905      	bls.n	80048fa <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2204      	movs	r2, #4
 80048f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004904:	2b00      	cmp	r3, #0
 8004906:	d102      	bne.n	800490e <RTC_EnterInitMode+0x66>
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d1e7      	bne.n	80048de <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800490e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004932:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10b      	bne.n	800495a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7ff ff8a 	bl	800485c <HAL_RTC_WaitForSynchro>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d005      	beq.n	800495a <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2204      	movs	r2, #4
 8004952:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800495a:	7bfb      	ldrb	r3, [r7, #15]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800496a:	2300      	movs	r3, #0
 800496c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800496e:	f107 0308 	add.w	r3, r7, #8
 8004972:	2218      	movs	r2, #24
 8004974:	2100      	movs	r1, #0
 8004976:	4618      	mov	r0, r3
 8004978:	f001 f8dd 	bl	8005b36 <Osal_MemSet>
  rq.ogf = 0x3f;
 800497c:	233f      	movs	r3, #63	@ 0x3f
 800497e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8004980:	2381      	movs	r3, #129	@ 0x81
 8004982:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004984:	1dfb      	adds	r3, r7, #7
 8004986:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004988:	2301      	movs	r3, #1
 800498a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800498c:	f107 0308 	add.w	r3, r7, #8
 8004990:	2100      	movs	r1, #0
 8004992:	4618      	mov	r0, r3
 8004994:	f001 fc5e 	bl	8006254 <hci_send_req>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	da01      	bge.n	80049a2 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800499e:	23ff      	movs	r3, #255	@ 0xff
 80049a0:	e000      	b.n	80049a4 <aci_gap_set_non_discoverable+0x40>
  return status;
 80049a2:	79fb      	ldrb	r3, [r7, #7]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3720      	adds	r7, #32
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80049ac:	b5b0      	push	{r4, r5, r7, lr}
 80049ae:	b0ce      	sub	sp, #312	@ 0x138
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4605      	mov	r5, r0
 80049b4:	460c      	mov	r4, r1
 80049b6:	4610      	mov	r0, r2
 80049b8:	4619      	mov	r1, r3
 80049ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80049be:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80049c2:	462a      	mov	r2, r5
 80049c4:	701a      	strb	r2, [r3, #0]
 80049c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80049ca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80049ce:	4622      	mov	r2, r4
 80049d0:	801a      	strh	r2, [r3, #0]
 80049d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80049d6:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80049da:	4602      	mov	r2, r0
 80049dc:	801a      	strh	r2, [r3, #0]
 80049de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80049e2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80049e6:	460a      	mov	r2, r1
 80049e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80049ea:	f107 0310 	add.w	r3, r7, #16
 80049ee:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80049f2:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80049f6:	3308      	adds	r3, #8
 80049f8:	f107 0210 	add.w	r2, r7, #16
 80049fc:	4413      	add	r3, r2
 80049fe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8004a02:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8004a06:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3309      	adds	r3, #9
 8004a0e:	f107 0210 	add.w	r2, r7, #16
 8004a12:	4413      	add	r3, r2
 8004a14:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8004a18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004a1c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8004a2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004a2e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004a32:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8004a36:	7812      	ldrb	r2, [r2, #0]
 8004a38:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004a3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004a3e:	3301      	adds	r3, #1
 8004a40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8004a44:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004a48:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004a4c:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8004a50:	8812      	ldrh	r2, [r2, #0]
 8004a52:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8004a56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004a5a:	3302      	adds	r3, #2
 8004a5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8004a60:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004a64:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004a68:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8004a6c:	8812      	ldrh	r2, [r2, #0]
 8004a6e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8004a72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004a76:	3302      	adds	r3, #2
 8004a78:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8004a7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004a80:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004a84:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8004a88:	7812      	ldrb	r2, [r2, #0]
 8004a8a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004a8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004a90:	3301      	adds	r3, #1
 8004a92:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8004a96:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004a9a:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8004a9e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8004aa0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8004aaa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004aae:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8004ab2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8004ab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004ab8:	3301      	adds	r3, #1
 8004aba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8004abe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004ac2:	3308      	adds	r3, #8
 8004ac4:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8004ac8:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8004acc:	4618      	mov	r0, r3
 8004ace:	f001 f822 	bl	8005b16 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8004ad2:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8004ad6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004ada:	4413      	add	r3, r2
 8004adc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8004ae0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004ae4:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8004ae8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004aea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004aee:	3301      	adds	r3, #1
 8004af0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8004af4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004af8:	3301      	adds	r3, #1
 8004afa:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8004afe:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8004b02:	4618      	mov	r0, r3
 8004b04:	f001 f807 	bl	8005b16 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8004b08:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8004b0c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004b10:	4413      	add	r3, r2
 8004b12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8004b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004b1a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8004b1e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004b20:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004b24:	3302      	adds	r3, #2
 8004b26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8004b2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004b2e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8004b32:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8004b34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004b38:	3302      	adds	r3, #2
 8004b3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004b3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004b42:	2218      	movs	r2, #24
 8004b44:	2100      	movs	r1, #0
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fff5 	bl	8005b36 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004b4c:	233f      	movs	r3, #63	@ 0x3f
 8004b4e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8004b52:	2383      	movs	r3, #131	@ 0x83
 8004b54:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8004b58:	f107 0310 	add.w	r3, r7, #16
 8004b5c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8004b60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004b64:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8004b68:	f107 030f 	add.w	r3, r7, #15
 8004b6c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8004b70:	2301      	movs	r3, #1
 8004b72:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004b76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f001 fb69 	bl	8006254 <hci_send_req>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	da01      	bge.n	8004b8c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8004b88:	23ff      	movs	r3, #255	@ 0xff
 8004b8a:	e004      	b.n	8004b96 <aci_gap_set_discoverable+0x1ea>
  return status;
 8004b8c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004b90:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8004b94:	781b      	ldrb	r3, [r3, #0]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bdb0      	pop	{r4, r5, r7, pc}

08004ba0 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b0cc      	sub	sp, #304	@ 0x130
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004bac:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8004bb0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8004bb2:	f107 0310 	add.w	r3, r7, #16
 8004bb6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8004bba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004bbe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8004bcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004bd0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004bd4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8004bd8:	7812      	ldrb	r2, [r2, #0]
 8004bda:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004bdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004be0:	3301      	adds	r3, #1
 8004be2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004be6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004bea:	2218      	movs	r2, #24
 8004bec:	2100      	movs	r1, #0
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 ffa1 	bl	8005b36 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004bf4:	233f      	movs	r3, #63	@ 0x3f
 8004bf6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8004bfa:	2385      	movs	r3, #133	@ 0x85
 8004bfc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8004c00:	f107 0310 	add.w	r3, r7, #16
 8004c04:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8004c08:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004c0c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8004c10:	f107 030f 	add.w	r3, r7, #15
 8004c14:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004c1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004c22:	2100      	movs	r1, #0
 8004c24:	4618      	mov	r0, r3
 8004c26:	f001 fb15 	bl	8006254 <hci_send_req>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	da01      	bge.n	8004c34 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8004c30:	23ff      	movs	r3, #255	@ 0xff
 8004c32:	e004      	b.n	8004c3e <aci_gap_set_io_capability+0x9e>
  return status;
 8004c34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c38:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004c3c:	781b      	ldrb	r3, [r3, #0]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8004c48:	b5b0      	push	{r4, r5, r7, lr}
 8004c4a:	b0cc      	sub	sp, #304	@ 0x130
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	4605      	mov	r5, r0
 8004c50:	460c      	mov	r4, r1
 8004c52:	4610      	mov	r0, r2
 8004c54:	4619      	mov	r1, r3
 8004c56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c5a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8004c5e:	462a      	mov	r2, r5
 8004c60:	701a      	strb	r2, [r3, #0]
 8004c62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c66:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8004c6a:	4622      	mov	r2, r4
 8004c6c:	701a      	strb	r2, [r3, #0]
 8004c6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c72:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8004c76:	4602      	mov	r2, r0
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004c82:	460a      	mov	r2, r1
 8004c84:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8004c86:	f107 0310 	add.w	r3, r7, #16
 8004c8a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8004c8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004c92:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004c96:	2200      	movs	r2, #0
 8004c98:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8004ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004ca4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004ca8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8004cac:	7812      	ldrb	r2, [r2, #0]
 8004cae:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004cb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8004cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004cbe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004cc2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8004cc6:	7812      	ldrb	r2, [r2, #0]
 8004cc8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004cca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004cce:	3301      	adds	r3, #1
 8004cd0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8004cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004cd8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004cdc:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8004ce0:	7812      	ldrb	r2, [r2, #0]
 8004ce2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004ce4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004ce8:	3301      	adds	r3, #1
 8004cea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8004cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004cf2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004cf6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8004cfa:	7812      	ldrb	r2, [r2, #0]
 8004cfc:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8004cfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004d02:	3301      	adds	r3, #1
 8004d04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8004d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004d0c:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8004d10:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004d12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004d16:	3301      	adds	r3, #1
 8004d18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8004d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004d20:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8004d24:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004d26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8004d30:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004d34:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8004d38:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8004d3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004d3e:	3301      	adds	r3, #1
 8004d40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8004d44:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004d48:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8004d4c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8004d50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004d54:	3304      	adds	r3, #4
 8004d56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8004d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004d5e:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8004d62:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8004d64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004d68:	3301      	adds	r3, #1
 8004d6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004d6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004d72:	2218      	movs	r2, #24
 8004d74:	2100      	movs	r1, #0
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fedd 	bl	8005b36 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004d7c:	233f      	movs	r3, #63	@ 0x3f
 8004d7e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8004d82:	2386      	movs	r3, #134	@ 0x86
 8004d84:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8004d88:	f107 0310 	add.w	r3, r7, #16
 8004d8c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8004d90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004d94:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8004d98:	f107 030f 	add.w	r3, r7, #15
 8004d9c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8004da0:	2301      	movs	r3, #1
 8004da2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004da6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004daa:	2100      	movs	r1, #0
 8004dac:	4618      	mov	r0, r3
 8004dae:	f001 fa51 	bl	8006254 <hci_send_req>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	da01      	bge.n	8004dbc <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8004db8:	23ff      	movs	r3, #255	@ 0xff
 8004dba:	e004      	b.n	8004dc6 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8004dbc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004dc0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004dc4:	781b      	ldrb	r3, [r3, #0]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bdb0      	pop	{r4, r5, r7, pc}

08004dd0 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8004dd0:	b590      	push	{r4, r7, lr}
 8004dd2:	b0cd      	sub	sp, #308	@ 0x134
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	4608      	mov	r0, r1
 8004dda:	4611      	mov	r1, r2
 8004ddc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004de0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004dea:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8004dee:	4622      	mov	r2, r4
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004df6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	701a      	strb	r2, [r3, #0]
 8004dfe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004e02:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8004e06:	460a      	mov	r2, r1
 8004e08:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8004e0a:	f107 0310 	add.w	r3, r7, #16
 8004e0e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004e12:	f107 0308 	add.w	r3, r7, #8
 8004e16:	2207      	movs	r2, #7
 8004e18:	2100      	movs	r1, #0
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fe8b 	bl	8005b36 <Osal_MemSet>
  int index_input = 0;
 8004e20:	2300      	movs	r3, #0
 8004e22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8004e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004e2a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004e2e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8004e32:	7812      	ldrb	r2, [r2, #0]
 8004e34:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004e36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8004e40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004e44:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004e48:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8004e4c:	7812      	ldrb	r2, [r2, #0]
 8004e4e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004e50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004e54:	3301      	adds	r3, #1
 8004e56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8004e5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004e5e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004e62:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8004e66:	7812      	ldrb	r2, [r2, #0]
 8004e68:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004e6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004e6e:	3301      	adds	r3, #1
 8004e70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004e74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004e78:	2218      	movs	r2, #24
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fe5a 	bl	8005b36 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004e82:	233f      	movs	r3, #63	@ 0x3f
 8004e84:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8004e88:	238a      	movs	r3, #138	@ 0x8a
 8004e8a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8004e8e:	f107 0310 	add.w	r3, r7, #16
 8004e92:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8004e96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004e9a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8004e9e:	f107 0308 	add.w	r3, r7, #8
 8004ea2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8004ea6:	2307      	movs	r3, #7
 8004ea8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004eac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f001 f9ce 	bl	8006254 <hci_send_req>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	da01      	bge.n	8004ec2 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8004ebe:	23ff      	movs	r3, #255	@ 0xff
 8004ec0:	e02e      	b.n	8004f20 <aci_gap_init+0x150>
  if ( resp.Status )
 8004ec2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004ec6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <aci_gap_init+0x10c>
    return resp.Status;
 8004ed0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004ed4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	e021      	b.n	8004f20 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8004edc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004ee0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004ee4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004eee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8004ef6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004efa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004efe:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004f08:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8004f0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004f0e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004f12:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004f1c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd90      	pop	{r4, r7, pc}

08004f2a <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b0cc      	sub	sp, #304	@ 0x130
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	4602      	mov	r2, r0
 8004f32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004f36:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004f3a:	6019      	str	r1, [r3, #0]
 8004f3c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004f40:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8004f44:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8004f46:	f107 0310 	add.w	r3, r7, #16
 8004f4a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8004f4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004f52:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8004f56:	2200      	movs	r2, #0
 8004f58:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8004f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004f64:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8004f68:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8004f6c:	7812      	ldrb	r2, [r2, #0]
 8004f6e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004f70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004f74:	3301      	adds	r3, #1
 8004f76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8004f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004f7e:	1c58      	adds	r0, r3, #1
 8004f80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004f84:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8004f88:	781a      	ldrb	r2, [r3, #0]
 8004f8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004f8e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004f92:	6819      	ldr	r1, [r3, #0]
 8004f94:	f000 fdbf 	bl	8005b16 <Osal_MemCpy>
  index_input += AdvDataLen;
 8004f98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004f9c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004fac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004fb0:	2218      	movs	r2, #24
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 fdbe 	bl	8005b36 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004fba:	233f      	movs	r3, #63	@ 0x3f
 8004fbc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8004fc0:	238e      	movs	r3, #142	@ 0x8e
 8004fc2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8004fc6:	f107 0310 	add.w	r3, r7, #16
 8004fca:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8004fce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004fd2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8004fd6:	f107 030f 	add.w	r3, r7, #15
 8004fda:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004fe4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4618      	mov	r0, r3
 8004fec:	f001 f932 	bl	8006254 <hci_send_req>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	da01      	bge.n	8004ffa <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8004ff6:	23ff      	movs	r3, #255	@ 0xff
 8004ff8:	e004      	b.n	8005004 <aci_gap_update_adv_data+0xda>
  return status;
 8004ffa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004ffe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005002:	781b      	ldrb	r3, [r3, #0]
}
 8005004:	4618      	mov	r0, r3
 8005006:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b088      	sub	sp, #32
 8005012:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005018:	f107 0308 	add.w	r3, r7, #8
 800501c:	2218      	movs	r2, #24
 800501e:	2100      	movs	r1, #0
 8005020:	4618      	mov	r0, r3
 8005022:	f000 fd88 	bl	8005b36 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005026:	233f      	movs	r3, #63	@ 0x3f
 8005028:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800502a:	2392      	movs	r3, #146	@ 0x92
 800502c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800502e:	1dfb      	adds	r3, r7, #7
 8005030:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005032:	2301      	movs	r3, #1
 8005034:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005036:	f107 0308 	add.w	r3, r7, #8
 800503a:	2100      	movs	r1, #0
 800503c:	4618      	mov	r0, r3
 800503e:	f001 f909 	bl	8006254 <hci_send_req>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	da01      	bge.n	800504c <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005048:	23ff      	movs	r3, #255	@ 0xff
 800504a:	e000      	b.n	800504e <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800504c:	79fb      	ldrb	r3, [r7, #7]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3720      	adds	r7, #32
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b088      	sub	sp, #32
 800505a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800505c:	2300      	movs	r3, #0
 800505e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005060:	f107 0308 	add.w	r3, r7, #8
 8005064:	2218      	movs	r2, #24
 8005066:	2100      	movs	r1, #0
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fd64 	bl	8005b36 <Osal_MemSet>
  rq.ogf = 0x3f;
 800506e:	233f      	movs	r3, #63	@ 0x3f
 8005070:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8005072:	f240 1301 	movw	r3, #257	@ 0x101
 8005076:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005078:	1dfb      	adds	r3, r7, #7
 800507a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800507c:	2301      	movs	r3, #1
 800507e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005080:	f107 0308 	add.w	r3, r7, #8
 8005084:	2100      	movs	r1, #0
 8005086:	4618      	mov	r0, r3
 8005088:	f001 f8e4 	bl	8006254 <hci_send_req>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	da01      	bge.n	8005096 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8005092:	23ff      	movs	r3, #255	@ 0xff
 8005094:	e000      	b.n	8005098 <aci_gatt_init+0x42>
  return status;
 8005096:	79fb      	ldrb	r3, [r7, #7]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3720      	adds	r7, #32
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80050a0:	b590      	push	{r4, r7, lr}
 80050a2:	b0cf      	sub	sp, #316	@ 0x13c
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4604      	mov	r4, r0
 80050a8:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80050ac:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 80050b0:	6001      	str	r1, [r0, #0]
 80050b2:	4610      	mov	r0, r2
 80050b4:	4619      	mov	r1, r3
 80050b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80050ba:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80050be:	4622      	mov	r2, r4
 80050c0:	701a      	strb	r2, [r3, #0]
 80050c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80050c6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80050ca:	4602      	mov	r2, r0
 80050cc:	701a      	strb	r2, [r3, #0]
 80050ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80050d2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80050d6:	460a      	mov	r2, r1
 80050d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80050da:	f107 0310 	add.w	r3, r7, #16
 80050de:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80050e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80050e6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d00a      	beq.n	8005106 <aci_gatt_add_service+0x66>
 80050f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80050f4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d101      	bne.n	8005102 <aci_gatt_add_service+0x62>
 80050fe:	2311      	movs	r3, #17
 8005100:	e002      	b.n	8005108 <aci_gatt_add_service+0x68>
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <aci_gatt_add_service+0x68>
 8005106:	2303      	movs	r3, #3
 8005108:	f107 0210 	add.w	r2, r7, #16
 800510c:	4413      	add	r3, r2
 800510e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005112:	f107 030c 	add.w	r3, r7, #12
 8005116:	2203      	movs	r2, #3
 8005118:	2100      	movs	r1, #0
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fd0b 	bl	8005b36 <Osal_MemSet>
  int index_input = 0;
 8005120:	2300      	movs	r3, #0
 8005122:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8005126:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800512a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800512e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8005132:	7812      	ldrb	r2, [r2, #0]
 8005134:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005136:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800513a:	3301      	adds	r3, #1
 800513c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8005140:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005144:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d002      	beq.n	8005154 <aci_gatt_add_service+0xb4>
 800514e:	2b02      	cmp	r3, #2
 8005150:	d004      	beq.n	800515c <aci_gatt_add_service+0xbc>
 8005152:	e007      	b.n	8005164 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8005154:	2302      	movs	r3, #2
 8005156:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800515a:	e005      	b.n	8005168 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800515c:	2310      	movs	r3, #16
 800515e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8005162:	e001      	b.n	8005168 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8005164:	2397      	movs	r3, #151	@ 0x97
 8005166:	e06c      	b.n	8005242 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8005168:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800516c:	1c58      	adds	r0, r3, #1
 800516e:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8005172:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005176:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800517a:	6819      	ldr	r1, [r3, #0]
 800517c:	f000 fccb 	bl	8005b16 <Osal_MemCpy>
    index_input += size;
 8005180:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8005184:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005188:	4413      	add	r3, r2
 800518a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800518e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005192:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005196:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800519a:	7812      	ldrb	r2, [r2, #0]
 800519c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800519e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80051a2:	3301      	adds	r3, #1
 80051a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80051a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80051ac:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80051b0:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80051b4:	7812      	ldrb	r2, [r2, #0]
 80051b6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80051b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80051bc:	3301      	adds	r3, #1
 80051be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80051c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80051c6:	2218      	movs	r2, #24
 80051c8:	2100      	movs	r1, #0
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fcb3 	bl	8005b36 <Osal_MemSet>
  rq.ogf = 0x3f;
 80051d0:	233f      	movs	r3, #63	@ 0x3f
 80051d2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 80051d6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80051da:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80051de:	f107 0310 	add.w	r3, r7, #16
 80051e2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80051e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80051ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80051ee:	f107 030c 	add.w	r3, r7, #12
 80051f2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80051f6:	2303      	movs	r3, #3
 80051f8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80051fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005200:	2100      	movs	r1, #0
 8005202:	4618      	mov	r0, r3
 8005204:	f001 f826 	bl	8006254 <hci_send_req>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	da01      	bge.n	8005212 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800520e:	23ff      	movs	r3, #255	@ 0xff
 8005210:	e017      	b.n	8005242 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8005212:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005216:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d005      	beq.n	800522c <aci_gatt_add_service+0x18c>
    return resp.Status;
 8005220:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005224:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	e00a      	b.n	8005242 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800522c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005230:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005234:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005238:	b29a      	uxth	r2, r3
 800523a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800523e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8005248:	46bd      	mov	sp, r7
 800524a:	bd90      	pop	{r4, r7, pc}

0800524c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800524c:	b590      	push	{r4, r7, lr}
 800524e:	b0d1      	sub	sp, #324	@ 0x144
 8005250:	af00      	add	r7, sp, #0
 8005252:	4604      	mov	r4, r0
 8005254:	4608      	mov	r0, r1
 8005256:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800525a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800525e:	600a      	str	r2, [r1, #0]
 8005260:	4619      	mov	r1, r3
 8005262:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005266:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800526a:	4622      	mov	r2, r4
 800526c:	801a      	strh	r2, [r3, #0]
 800526e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005272:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005276:	4602      	mov	r2, r0
 8005278:	701a      	strb	r2, [r3, #0]
 800527a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800527e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8005282:	460a      	mov	r2, r1
 8005284:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8005286:	f107 0318 	add.w	r3, r7, #24
 800528a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800528e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005292:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d00a      	beq.n	80052b2 <aci_gatt_add_char+0x66>
 800529c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80052a0:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d101      	bne.n	80052ae <aci_gatt_add_char+0x62>
 80052aa:	2313      	movs	r3, #19
 80052ac:	e002      	b.n	80052b4 <aci_gatt_add_char+0x68>
 80052ae:	2303      	movs	r3, #3
 80052b0:	e000      	b.n	80052b4 <aci_gatt_add_char+0x68>
 80052b2:	2305      	movs	r3, #5
 80052b4:	f107 0218 	add.w	r2, r7, #24
 80052b8:	4413      	add	r3, r2
 80052ba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80052be:	f107 0314 	add.w	r3, r7, #20
 80052c2:	2203      	movs	r2, #3
 80052c4:	2100      	movs	r1, #0
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fc35 	bl	8005b36 <Osal_MemSet>
  int index_input = 0;
 80052cc:	2300      	movs	r3, #0
 80052ce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 80052d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80052d6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80052da:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80052de:	8812      	ldrh	r2, [r2, #0]
 80052e0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80052e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80052e6:	3302      	adds	r3, #2
 80052e8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80052ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80052f0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80052f4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80052f8:	7812      	ldrb	r2, [r2, #0]
 80052fa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80052fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005300:	3301      	adds	r3, #1
 8005302:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8005306:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800530a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d002      	beq.n	800531a <aci_gatt_add_char+0xce>
 8005314:	2b02      	cmp	r3, #2
 8005316:	d004      	beq.n	8005322 <aci_gatt_add_char+0xd6>
 8005318:	e007      	b.n	800532a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800531a:	2302      	movs	r3, #2
 800531c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005320:	e005      	b.n	800532e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8005322:	2310      	movs	r3, #16
 8005324:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005328:	e001      	b.n	800532e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800532a:	2397      	movs	r3, #151	@ 0x97
 800532c:	e091      	b.n	8005452 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800532e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005332:	1cd8      	adds	r0, r3, #3
 8005334:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8005338:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800533c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005340:	6819      	ldr	r1, [r3, #0]
 8005342:	f000 fbe8 	bl	8005b16 <Osal_MemCpy>
    index_input += size;
 8005346:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800534a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800534e:	4413      	add	r3, r2
 8005350:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8005354:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005358:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800535c:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8005360:	8812      	ldrh	r2, [r2, #0]
 8005362:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005364:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005368:	3302      	adds	r3, #2
 800536a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800536e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005372:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8005376:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8005378:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800537c:	3301      	adds	r3, #1
 800537e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8005382:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005386:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800538a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800538c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005390:	3301      	adds	r3, #1
 8005392:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8005396:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800539a:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800539e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80053a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80053a4:	3301      	adds	r3, #1
 80053a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80053aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80053ae:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 80053b2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80053b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80053b8:	3301      	adds	r3, #1
 80053ba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80053be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80053c2:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 80053c6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80053c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80053cc:	3301      	adds	r3, #1
 80053ce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80053d2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80053d6:	2218      	movs	r2, #24
 80053d8:	2100      	movs	r1, #0
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fbab 	bl	8005b36 <Osal_MemSet>
  rq.ogf = 0x3f;
 80053e0:	233f      	movs	r3, #63	@ 0x3f
 80053e2:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 80053e6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80053ea:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80053ee:	f107 0318 	add.w	r3, r7, #24
 80053f2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80053f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80053fa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80053fe:	f107 0314 	add.w	r3, r7, #20
 8005402:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8005406:	2303      	movs	r3, #3
 8005408:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800540c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005410:	2100      	movs	r1, #0
 8005412:	4618      	mov	r0, r3
 8005414:	f000 ff1e 	bl	8006254 <hci_send_req>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	da01      	bge.n	8005422 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800541e:	23ff      	movs	r3, #255	@ 0xff
 8005420:	e017      	b.n	8005452 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8005422:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005426:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d005      	beq.n	800543c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8005430:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005434:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	e00a      	b.n	8005452 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800543c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005440:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005444:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005448:	b29a      	uxth	r2, r3
 800544a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800544e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8005458:	46bd      	mov	sp, r7
 800545a:	bd90      	pop	{r4, r7, pc}

0800545c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800545c:	b5b0      	push	{r4, r5, r7, lr}
 800545e:	b0cc      	sub	sp, #304	@ 0x130
 8005460:	af00      	add	r7, sp, #0
 8005462:	4605      	mov	r5, r0
 8005464:	460c      	mov	r4, r1
 8005466:	4610      	mov	r0, r2
 8005468:	4619      	mov	r1, r3
 800546a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800546e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005472:	462a      	mov	r2, r5
 8005474:	801a      	strh	r2, [r3, #0]
 8005476:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800547a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800547e:	4622      	mov	r2, r4
 8005480:	801a      	strh	r2, [r3, #0]
 8005482:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005486:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800548a:	4602      	mov	r2, r0
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005492:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8005496:	460a      	mov	r2, r1
 8005498:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800549a:	f107 0310 	add.w	r3, r7, #16
 800549e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80054a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80054a6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80054aa:	2200      	movs	r2, #0
 80054ac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80054ae:	2300      	movs	r3, #0
 80054b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 80054b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80054b8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80054bc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80054c0:	8812      	ldrh	r2, [r2, #0]
 80054c2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80054c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80054c8:	3302      	adds	r3, #2
 80054ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 80054ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80054d2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80054d6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80054da:	8812      	ldrh	r2, [r2, #0]
 80054dc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80054de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80054e2:	3302      	adds	r3, #2
 80054e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 80054e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80054ec:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80054f0:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80054f4:	7812      	ldrb	r2, [r2, #0]
 80054f6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80054f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80054fc:	3301      	adds	r3, #1
 80054fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8005502:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005506:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800550a:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800550e:	7812      	ldrb	r2, [r2, #0]
 8005510:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005512:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005516:	3301      	adds	r3, #1
 8005518:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800551c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005520:	1d98      	adds	r0, r3, #6
 8005522:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005526:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	461a      	mov	r2, r3
 800552e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005532:	f000 faf0 	bl	8005b16 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8005536:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800553a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005544:	4413      	add	r3, r2
 8005546:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800554a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800554e:	2218      	movs	r2, #24
 8005550:	2100      	movs	r1, #0
 8005552:	4618      	mov	r0, r3
 8005554:	f000 faef 	bl	8005b36 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005558:	233f      	movs	r3, #63	@ 0x3f
 800555a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800555e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8005562:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005566:	f107 0310 	add.w	r3, r7, #16
 800556a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800556e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005572:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005576:	f107 030f 	add.w	r3, r7, #15
 800557a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800557e:	2301      	movs	r3, #1
 8005580:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005584:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005588:	2100      	movs	r1, #0
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fe62 	bl	8006254 <hci_send_req>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	da01      	bge.n	800559a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8005596:	23ff      	movs	r3, #255	@ 0xff
 8005598:	e004      	b.n	80055a4 <aci_gatt_update_char_value+0x148>
  return status;
 800559a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800559e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80055a2:	781b      	ldrb	r3, [r3, #0]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bdb0      	pop	{r4, r5, r7, pc}

080055ae <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b0cc      	sub	sp, #304	@ 0x130
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	4602      	mov	r2, r0
 80055b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80055ba:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80055be:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 80055c0:	f107 0310 	add.w	r3, r7, #16
 80055c4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80055c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80055cc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80055d4:	2300      	movs	r3, #0
 80055d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80055da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80055de:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80055e2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80055e6:	8812      	ldrh	r2, [r2, #0]
 80055e8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80055ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80055ee:	3302      	adds	r3, #2
 80055f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80055f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80055f8:	2218      	movs	r2, #24
 80055fa:	2100      	movs	r1, #0
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 fa9a 	bl	8005b36 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005602:	233f      	movs	r3, #63	@ 0x3f
 8005604:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8005608:	f240 1325 	movw	r3, #293	@ 0x125
 800560c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005610:	f107 0310 	add.w	r3, r7, #16
 8005614:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005618:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800561c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005620:	f107 030f 	add.w	r3, r7, #15
 8005624:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005628:	2301      	movs	r3, #1
 800562a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800562e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005632:	2100      	movs	r1, #0
 8005634:	4618      	mov	r0, r3
 8005636:	f000 fe0d 	bl	8006254 <hci_send_req>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	da01      	bge.n	8005644 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8005640:	23ff      	movs	r3, #255	@ 0xff
 8005642:	e004      	b.n	800564e <aci_gatt_confirm_indication+0xa0>
  return status;
 8005644:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005648:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800564c:	781b      	ldrb	r3, [r3, #0]
}
 800564e:	4618      	mov	r0, r3
 8005650:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b0cc      	sub	sp, #304	@ 0x130
 800565c:	af00      	add	r7, sp, #0
 800565e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005662:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800566c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005670:	4602      	mov	r2, r0
 8005672:	701a      	strb	r2, [r3, #0]
 8005674:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005678:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800567c:	460a      	mov	r2, r1
 800567e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8005680:	f107 0310 	add.w	r3, r7, #16
 8005684:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005688:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800568c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005690:	2200      	movs	r2, #0
 8005692:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005694:	2300      	movs	r3, #0
 8005696:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800569a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800569e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80056a2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80056a6:	7812      	ldrb	r2, [r2, #0]
 80056a8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80056aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056ae:	3301      	adds	r3, #1
 80056b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 80056b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80056b8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80056bc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80056c0:	7812      	ldrb	r2, [r2, #0]
 80056c2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80056c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056c8:	3301      	adds	r3, #1
 80056ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80056ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80056d2:	1c98      	adds	r0, r3, #2
 80056d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80056d8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80056dc:	781a      	ldrb	r2, [r3, #0]
 80056de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80056e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80056e6:	6819      	ldr	r1, [r3, #0]
 80056e8:	f000 fa15 	bl	8005b16 <Osal_MemCpy>
  index_input += Length;
 80056ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80056f0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80056fa:	4413      	add	r3, r2
 80056fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005700:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005704:	2218      	movs	r2, #24
 8005706:	2100      	movs	r1, #0
 8005708:	4618      	mov	r0, r3
 800570a:	f000 fa14 	bl	8005b36 <Osal_MemSet>
  rq.ogf = 0x3f;
 800570e:	233f      	movs	r3, #63	@ 0x3f
 8005710:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8005714:	230c      	movs	r3, #12
 8005716:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800571a:	f107 0310 	add.w	r3, r7, #16
 800571e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005722:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005726:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800572a:	f107 030f 	add.w	r3, r7, #15
 800572e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005732:	2301      	movs	r3, #1
 8005734:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005738:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800573c:	2100      	movs	r1, #0
 800573e:	4618      	mov	r0, r3
 8005740:	f000 fd88 	bl	8006254 <hci_send_req>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	da01      	bge.n	800574e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800574a:	23ff      	movs	r3, #255	@ 0xff
 800574c:	e004      	b.n	8005758 <aci_hal_write_config_data+0x100>
  return status;
 800574e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005752:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005756:	781b      	ldrb	r3, [r3, #0]
}
 8005758:	4618      	mov	r0, r3
 800575a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b0cc      	sub	sp, #304	@ 0x130
 8005766:	af00      	add	r7, sp, #0
 8005768:	4602      	mov	r2, r0
 800576a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800576e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005772:	701a      	strb	r2, [r3, #0]
 8005774:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005778:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800577c:	460a      	mov	r2, r1
 800577e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8005780:	f107 0310 	add.w	r3, r7, #16
 8005784:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005788:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800578c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005790:	2200      	movs	r2, #0
 8005792:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005794:	2300      	movs	r3, #0
 8005796:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800579a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800579e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80057a2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80057a6:	7812      	ldrb	r2, [r2, #0]
 80057a8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80057aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80057ae:	3301      	adds	r3, #1
 80057b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 80057b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80057b8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80057bc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80057c0:	7812      	ldrb	r2, [r2, #0]
 80057c2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80057c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80057c8:	3301      	adds	r3, #1
 80057ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80057ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80057d2:	2218      	movs	r2, #24
 80057d4:	2100      	movs	r1, #0
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 f9ad 	bl	8005b36 <Osal_MemSet>
  rq.ogf = 0x3f;
 80057dc:	233f      	movs	r3, #63	@ 0x3f
 80057de:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 80057e2:	230f      	movs	r3, #15
 80057e4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80057e8:	f107 0310 	add.w	r3, r7, #16
 80057ec:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80057f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80057f4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80057f8:	f107 030f 	add.w	r3, r7, #15
 80057fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005800:	2301      	movs	r3, #1
 8005802:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005806:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800580a:	2100      	movs	r1, #0
 800580c:	4618      	mov	r0, r3
 800580e:	f000 fd21 	bl	8006254 <hci_send_req>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	da01      	bge.n	800581c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8005818:	23ff      	movs	r3, #255	@ 0xff
 800581a:	e004      	b.n	8005826 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800581c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005820:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005824:	781b      	ldrb	r3, [r3, #0]
}
 8005826:	4618      	mov	r0, r3
 8005828:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b0cc      	sub	sp, #304	@ 0x130
 8005834:	af00      	add	r7, sp, #0
 8005836:	4602      	mov	r2, r0
 8005838:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800583c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005840:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8005842:	f107 0310 	add.w	r3, r7, #16
 8005846:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800584a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800584e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005852:	2200      	movs	r2, #0
 8005854:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005856:	2300      	movs	r3, #0
 8005858:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800585c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005860:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005864:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005868:	8812      	ldrh	r2, [r2, #0]
 800586a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800586c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005870:	3302      	adds	r3, #2
 8005872:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005876:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800587a:	2218      	movs	r2, #24
 800587c:	2100      	movs	r1, #0
 800587e:	4618      	mov	r0, r3
 8005880:	f000 f959 	bl	8005b36 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005884:	233f      	movs	r3, #63	@ 0x3f
 8005886:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800588a:	2318      	movs	r3, #24
 800588c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005890:	f107 0310 	add.w	r3, r7, #16
 8005894:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005898:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800589c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80058a0:	f107 030f 	add.w	r3, r7, #15
 80058a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80058a8:	2301      	movs	r3, #1
 80058aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80058ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80058b2:	2100      	movs	r1, #0
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 fccd 	bl	8006254 <hci_send_req>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	da01      	bge.n	80058c4 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80058c0:	23ff      	movs	r3, #255	@ 0xff
 80058c2:	e004      	b.n	80058ce <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80058c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80058c8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80058cc:	781b      	ldrb	r3, [r3, #0]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80058de:	2300      	movs	r3, #0
 80058e0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80058e2:	f107 0308 	add.w	r3, r7, #8
 80058e6:	2218      	movs	r2, #24
 80058e8:	2100      	movs	r1, #0
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 f923 	bl	8005b36 <Osal_MemSet>
  rq.ogf = 0x03;
 80058f0:	2303      	movs	r3, #3
 80058f2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80058f4:	2303      	movs	r3, #3
 80058f6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80058f8:	1dfb      	adds	r3, r7, #7
 80058fa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80058fc:	2301      	movs	r3, #1
 80058fe:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005900:	f107 0308 	add.w	r3, r7, #8
 8005904:	2100      	movs	r1, #0
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fca4 	bl	8006254 <hci_send_req>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	da01      	bge.n	8005916 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005912:	23ff      	movs	r3, #255	@ 0xff
 8005914:	e000      	b.n	8005918 <hci_reset+0x40>
  return status;
 8005916:	79fb      	ldrb	r3, [r7, #7]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3720      	adds	r7, #32
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b0ce      	sub	sp, #312	@ 0x138
 8005924:	af00      	add	r7, sp, #0
 8005926:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800592a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800592e:	6019      	str	r1, [r3, #0]
 8005930:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005934:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800593e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005942:	4602      	mov	r2, r0
 8005944:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8005946:	f107 0318 	add.w	r3, r7, #24
 800594a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800594e:	f107 0310 	add.w	r3, r7, #16
 8005952:	2205      	movs	r2, #5
 8005954:	2100      	movs	r1, #0
 8005956:	4618      	mov	r0, r3
 8005958:	f000 f8ed 	bl	8005b36 <Osal_MemSet>
  int index_input = 0;
 800595c:	2300      	movs	r3, #0
 800595e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Connection_Handle = Connection_Handle;
 8005962:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005966:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800596a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800596e:	8812      	ldrh	r2, [r2, #0]
 8005970:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005972:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005976:	3302      	adds	r3, #2
 8005978:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800597c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005980:	2218      	movs	r2, #24
 8005982:	2100      	movs	r1, #0
 8005984:	4618      	mov	r0, r3
 8005986:	f000 f8d6 	bl	8005b36 <Osal_MemSet>
  rq.ogf = 0x08;
 800598a:	2308      	movs	r3, #8
 800598c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x030;
 8005990:	2330      	movs	r3, #48	@ 0x30
 8005992:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8005996:	f107 0318 	add.w	r3, r7, #24
 800599a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800599e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80059a2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80059a6:	f107 0310 	add.w	r3, r7, #16
 80059aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80059ae:	2305      	movs	r3, #5
 80059b0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80059b4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80059b8:	2100      	movs	r1, #0
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 fc4a 	bl	8006254 <hci_send_req>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	da01      	bge.n	80059ca <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 80059c6:	23ff      	movs	r3, #255	@ 0xff
 80059c8:	e023      	b.n	8005a12 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 80059ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80059ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d005      	beq.n	80059e4 <hci_le_read_phy+0xc4>
    return resp.Status;
 80059d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80059dc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	e016      	b.n	8005a12 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 80059e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80059e8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80059ec:	78da      	ldrb	r2, [r3, #3]
 80059ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80059f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 80059fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80059fe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005a02:	791a      	ldrb	r2, [r3, #4]
 8005a04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005a08:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8005a1c:	b590      	push	{r4, r7, lr}
 8005a1e:	b0cd      	sub	sp, #308	@ 0x134
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	4604      	mov	r4, r0
 8005a24:	4608      	mov	r0, r1
 8005a26:	4611      	mov	r1, r2
 8005a28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a2c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005a30:	4622      	mov	r2, r4
 8005a32:	701a      	strb	r2, [r3, #0]
 8005a34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a38:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a44:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005a48:	460a      	mov	r2, r1
 8005a4a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8005a4c:	f107 0310 	add.w	r3, r7, #16
 8005a50:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005a54:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a58:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8005a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005a6a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005a6e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005a72:	7812      	ldrb	r2, [r2, #0]
 8005a74:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005a76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8005a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005a84:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005a88:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005a8c:	7812      	ldrb	r2, [r2, #0]
 8005a8e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005a90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a94:	3301      	adds	r3, #1
 8005a96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8005a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005a9e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005aa2:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005aa6:	7812      	ldrb	r2, [r2, #0]
 8005aa8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005aaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005aae:	3301      	adds	r3, #1
 8005ab0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005ab4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005ab8:	2218      	movs	r2, #24
 8005aba:	2100      	movs	r1, #0
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 f83a 	bl	8005b36 <Osal_MemSet>
  rq.ogf = 0x08;
 8005ac2:	2308      	movs	r3, #8
 8005ac4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8005ac8:	2331      	movs	r3, #49	@ 0x31
 8005aca:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005ace:	f107 0310 	add.w	r3, r7, #16
 8005ad2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005ad6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ada:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005ade:	f107 030f 	add.w	r3, r7, #15
 8005ae2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005aec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005af0:	2100      	movs	r1, #0
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fbae 	bl	8006254 <hci_send_req>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	da01      	bge.n	8005b02 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8005afe:	23ff      	movs	r3, #255	@ 0xff
 8005b00:	e004      	b.n	8005b0c <hci_le_set_default_phy+0xf0>
  return status;
 8005b02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b06:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005b0a:	781b      	ldrb	r3, [r3, #0]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd90      	pop	{r4, r7, pc}

08005b16 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b084      	sub	sp, #16
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	60f8      	str	r0, [r7, #12]
 8005b1e:	60b9      	str	r1, [r7, #8]
 8005b20:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	68b9      	ldr	r1, [r7, #8]
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f002 fa40 	bl	8007fac <memcpy>
 8005b2c:	4603      	mov	r3, r0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b084      	sub	sp, #16
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	68b9      	ldr	r1, [r7, #8]
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f002 fa04 	bl	8007f54 <memset>
 8005b4c:	4603      	mov	r3, r0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
	...

08005b58 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08a      	sub	sp, #40	@ 0x28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8005b60:	2300      	movs	r3, #0
 8005b62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	2bff      	cmp	r3, #255	@ 0xff
 8005b72:	d14c      	bne.n	8005c0e <PeerToPeer_Event_Handler+0xb6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	3302      	adds	r3, #2
 8005b78:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	461a      	mov	r2, r3
 8005b82:	f640 4301 	movw	r3, #3073	@ 0xc01
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d13d      	bne.n	8005c06 <PeerToPeer_Event_Handler+0xae>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	3302      	adds	r3, #2
 8005b8e:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	885b      	ldrh	r3, [r3, #2]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	461a      	mov	r2, r3
 8005b98:	4b20      	ldr	r3, [pc, #128]	@ (8005c1c <PeerToPeer_Event_Handler+0xc4>)
 8005b9a:	889b      	ldrh	r3, [r3, #4]
 8005b9c:	3302      	adds	r3, #2
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d118      	bne.n	8005bd4 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	7a1b      	ldrb	r3, [r3, #8]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d007      	beq.n	8005bc4 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8005bb8:	f107 0308 	add.w	r3, r7, #8
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f001 fc51 	bl	8007464 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 8005bc2:	e022      	b.n	8005c0a <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8005bc8:	f107 0308 	add.w	r3, r7, #8
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f001 fc49 	bl	8007464 <P2PS_STM_App_Notification>
        break;
 8005bd2:	e01a      	b.n	8005c0a <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	885b      	ldrh	r3, [r3, #2]
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8005c1c <PeerToPeer_Event_Handler+0xc4>)
 8005bde:	885b      	ldrh	r3, [r3, #2]
 8005be0:	3301      	adds	r3, #1
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d111      	bne.n	8005c0a <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	88db      	ldrh	r3, [r3, #6]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8005bfa:	f107 0308 	add.w	r3, r7, #8
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 fc30 	bl	8007464 <P2PS_STM_App_Notification>
        break;
 8005c04:	e001      	b.n	8005c0a <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 8005c06:	bf00      	nop
 8005c08:	e002      	b.n	8005c10 <PeerToPeer_Event_Handler+0xb8>
        break;
 8005c0a:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8005c0c:	e000      	b.n	8005c10 <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 8005c0e:	bf00      	nop
  }

  return(return_value);
 8005c10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8005c14:	4618      	mov	r0, r3
 8005c16:	3728      	adds	r7, #40	@ 0x28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	2000002c 	.word	0x2000002c

08005c20 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08a      	sub	sp, #40	@ 0x28
 8005c24:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8005c26:	484a      	ldr	r0, [pc, #296]	@ (8005d50 <P2PS_STM_Init+0x130>)
 8005c28:	f000 f94a 	bl	8005ec0 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8005c2c:	238f      	movs	r3, #143	@ 0x8f
 8005c2e:	703b      	strb	r3, [r7, #0]
 8005c30:	23e5      	movs	r3, #229	@ 0xe5
 8005c32:	707b      	strb	r3, [r7, #1]
 8005c34:	23b3      	movs	r3, #179	@ 0xb3
 8005c36:	70bb      	strb	r3, [r7, #2]
 8005c38:	23d5      	movs	r3, #213	@ 0xd5
 8005c3a:	70fb      	strb	r3, [r7, #3]
 8005c3c:	232e      	movs	r3, #46	@ 0x2e
 8005c3e:	713b      	strb	r3, [r7, #4]
 8005c40:	237f      	movs	r3, #127	@ 0x7f
 8005c42:	717b      	strb	r3, [r7, #5]
 8005c44:	234a      	movs	r3, #74	@ 0x4a
 8005c46:	71bb      	strb	r3, [r7, #6]
 8005c48:	2398      	movs	r3, #152	@ 0x98
 8005c4a:	71fb      	strb	r3, [r7, #7]
 8005c4c:	232a      	movs	r3, #42	@ 0x2a
 8005c4e:	723b      	strb	r3, [r7, #8]
 8005c50:	2348      	movs	r3, #72	@ 0x48
 8005c52:	727b      	strb	r3, [r7, #9]
 8005c54:	237a      	movs	r3, #122	@ 0x7a
 8005c56:	72bb      	strb	r3, [r7, #10]
 8005c58:	23cc      	movs	r3, #204	@ 0xcc
 8005c5a:	72fb      	strb	r3, [r7, #11]
 8005c5c:	2340      	movs	r3, #64	@ 0x40
 8005c5e:	733b      	strb	r3, [r7, #12]
 8005c60:	23fe      	movs	r3, #254	@ 0xfe
 8005c62:	737b      	strb	r3, [r7, #13]
 8005c64:	2300      	movs	r3, #0
 8005c66:	73bb      	strb	r3, [r7, #14]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8005c6c:	4639      	mov	r1, r7
 8005c6e:	4b39      	ldr	r3, [pc, #228]	@ (8005d54 <P2PS_STM_Init+0x134>)
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	2306      	movs	r3, #6
 8005c74:	2201      	movs	r2, #1
 8005c76:	2002      	movs	r0, #2
 8005c78:	f7ff fa12 	bl	80050a0 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8005c7c:	2319      	movs	r3, #25
 8005c7e:	703b      	strb	r3, [r7, #0]
 8005c80:	23ed      	movs	r3, #237	@ 0xed
 8005c82:	707b      	strb	r3, [r7, #1]
 8005c84:	2382      	movs	r3, #130	@ 0x82
 8005c86:	70bb      	strb	r3, [r7, #2]
 8005c88:	23ae      	movs	r3, #174	@ 0xae
 8005c8a:	70fb      	strb	r3, [r7, #3]
 8005c8c:	23ed      	movs	r3, #237	@ 0xed
 8005c8e:	713b      	strb	r3, [r7, #4]
 8005c90:	2321      	movs	r3, #33	@ 0x21
 8005c92:	717b      	strb	r3, [r7, #5]
 8005c94:	234c      	movs	r3, #76	@ 0x4c
 8005c96:	71bb      	strb	r3, [r7, #6]
 8005c98:	239d      	movs	r3, #157	@ 0x9d
 8005c9a:	71fb      	strb	r3, [r7, #7]
 8005c9c:	2341      	movs	r3, #65	@ 0x41
 8005c9e:	723b      	strb	r3, [r7, #8]
 8005ca0:	2345      	movs	r3, #69	@ 0x45
 8005ca2:	727b      	strb	r3, [r7, #9]
 8005ca4:	2322      	movs	r3, #34	@ 0x22
 8005ca6:	72bb      	strb	r3, [r7, #10]
 8005ca8:	238e      	movs	r3, #142	@ 0x8e
 8005caa:	72fb      	strb	r3, [r7, #11]
 8005cac:	2341      	movs	r3, #65	@ 0x41
 8005cae:	733b      	strb	r3, [r7, #12]
 8005cb0:	23fe      	movs	r3, #254	@ 0xfe
 8005cb2:	737b      	strb	r3, [r7, #13]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	73bb      	strb	r3, [r7, #14]
 8005cb8:	2300      	movs	r3, #0
 8005cba:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8005cbc:	4b25      	ldr	r3, [pc, #148]	@ (8005d54 <P2PS_STM_Init+0x134>)
 8005cbe:	8818      	ldrh	r0, [r3, #0]
 8005cc0:	463a      	mov	r2, r7
 8005cc2:	4b25      	ldr	r3, [pc, #148]	@ (8005d58 <P2PS_STM_Init+0x138>)
 8005cc4:	9305      	str	r3, [sp, #20]
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	9304      	str	r3, [sp, #16]
 8005cca:	230a      	movs	r3, #10
 8005ccc:	9303      	str	r3, [sp, #12]
 8005cce:	2301      	movs	r3, #1
 8005cd0:	9302      	str	r3, [sp, #8]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	9301      	str	r3, [sp, #4]
 8005cd6:	2306      	movs	r3, #6
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	2302      	movs	r3, #2
 8005cdc:	2102      	movs	r1, #2
 8005cde:	f7ff fab5 	bl	800524c <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8005ce2:	2319      	movs	r3, #25
 8005ce4:	703b      	strb	r3, [r7, #0]
 8005ce6:	23ed      	movs	r3, #237	@ 0xed
 8005ce8:	707b      	strb	r3, [r7, #1]
 8005cea:	2382      	movs	r3, #130	@ 0x82
 8005cec:	70bb      	strb	r3, [r7, #2]
 8005cee:	23ae      	movs	r3, #174	@ 0xae
 8005cf0:	70fb      	strb	r3, [r7, #3]
 8005cf2:	23ed      	movs	r3, #237	@ 0xed
 8005cf4:	713b      	strb	r3, [r7, #4]
 8005cf6:	2321      	movs	r3, #33	@ 0x21
 8005cf8:	717b      	strb	r3, [r7, #5]
 8005cfa:	234c      	movs	r3, #76	@ 0x4c
 8005cfc:	71bb      	strb	r3, [r7, #6]
 8005cfe:	239d      	movs	r3, #157	@ 0x9d
 8005d00:	71fb      	strb	r3, [r7, #7]
 8005d02:	2341      	movs	r3, #65	@ 0x41
 8005d04:	723b      	strb	r3, [r7, #8]
 8005d06:	2345      	movs	r3, #69	@ 0x45
 8005d08:	727b      	strb	r3, [r7, #9]
 8005d0a:	2322      	movs	r3, #34	@ 0x22
 8005d0c:	72bb      	strb	r3, [r7, #10]
 8005d0e:	238e      	movs	r3, #142	@ 0x8e
 8005d10:	72fb      	strb	r3, [r7, #11]
 8005d12:	2342      	movs	r3, #66	@ 0x42
 8005d14:	733b      	strb	r3, [r7, #12]
 8005d16:	23fe      	movs	r3, #254	@ 0xfe
 8005d18:	737b      	strb	r3, [r7, #13]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	73bb      	strb	r3, [r7, #14]
 8005d1e:	2300      	movs	r3, #0
 8005d20:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8005d22:	4b0c      	ldr	r3, [pc, #48]	@ (8005d54 <P2PS_STM_Init+0x134>)
 8005d24:	8818      	ldrh	r0, [r3, #0]
 8005d26:	463a      	mov	r2, r7
 8005d28:	4b0c      	ldr	r3, [pc, #48]	@ (8005d5c <P2PS_STM_Init+0x13c>)
 8005d2a:	9305      	str	r3, [sp, #20]
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	9304      	str	r3, [sp, #16]
 8005d30:	230a      	movs	r3, #10
 8005d32:	9303      	str	r3, [sp, #12]
 8005d34:	2301      	movs	r3, #1
 8005d36:	9302      	str	r3, [sp, #8]
 8005d38:	2300      	movs	r3, #0
 8005d3a:	9301      	str	r3, [sp, #4]
 8005d3c:	2310      	movs	r3, #16
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	2302      	movs	r3, #2
 8005d42:	2102      	movs	r1, #2
 8005d44:	f7ff fa82 	bl	800524c <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8005d48:	bf00      	nop
}
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	08005b59 	.word	0x08005b59
 8005d54:	2000002c 	.word	0x2000002c
 8005d58:	2000002e 	.word	0x2000002e
 8005d5c:	20000030 	.word	0x20000030

08005d60 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0
  return;
 8005d64:	bf00      	nop
}
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8005d6e:	b480      	push	{r7}
 8005d70:	af00      	add	r7, sp, #0
  return;
 8005d72:	bf00      	nop
}
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	af00      	add	r7, sp, #0
  return;
 8005d80:	bf00      	nop
}
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	af00      	add	r7, sp, #0
  return;
 8005d8e:	bf00      	nop
}
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0
  return;
 8005d9c:	bf00      	nop
}
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8005da6:	b480      	push	{r7}
 8005da8:	af00      	add	r7, sp, #0
  return;
 8005daa:	bf00      	nop
}
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0
  return;
 8005db8:	bf00      	nop
}
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	af00      	add	r7, sp, #0
  return;
 8005dc6:	bf00      	nop
}
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
  return;
 8005dd4:	bf00      	nop
}
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8005dde:	b480      	push	{r7}
 8005de0:	af00      	add	r7, sp, #0
  return;
 8005de2:	bf00      	nop
}
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
  return;
 8005df0:	bf00      	nop
}
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	af00      	add	r7, sp, #0
  return;
 8005dfe:	bf00      	nop
}
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
  return;
 8005e0c:	bf00      	nop
}
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8005e16:	b480      	push	{r7}
 8005e18:	af00      	add	r7, sp, #0
  return;
 8005e1a:	bf00      	nop
}
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
  return;
 8005e28:	bf00      	nop
}
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8005e32:	b480      	push	{r7}
 8005e34:	af00      	add	r7, sp, #0
  return;
 8005e36:	bf00      	nop
}
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 8005e40:	b480      	push	{r7}
 8005e42:	af00      	add	r7, sp, #0
  return;
 8005e44:	bf00      	nop
}
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
	...

08005e50 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8005e54:	4b04      	ldr	r3, [pc, #16]	@ (8005e68 <SVCCTL_Init+0x18>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8005e5a:	4b04      	ldr	r3, [pc, #16]	@ (8005e6c <SVCCTL_Init+0x1c>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8005e60:	f000 f806 	bl	8005e70 <SVCCTL_SvcInit>

  return;
 8005e64:	bf00      	nop
}
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	20000034 	.word	0x20000034
 8005e6c:	20000054 	.word	0x20000054

08005e70 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	af00      	add	r7, sp, #0
  BAS_Init();
 8005e74:	f7ff ff74 	bl	8005d60 <BAS_Init>

  BLS_Init();
 8005e78:	f7ff ff79 	bl	8005d6e <BLS_Init>

  CRS_STM_Init();
 8005e7c:	f7ff ff7e 	bl	8005d7c <CRS_STM_Init>

  DIS_Init();
 8005e80:	f7ff ff83 	bl	8005d8a <DIS_Init>

  EDS_STM_Init();
 8005e84:	f7ff ff88 	bl	8005d98 <EDS_STM_Init>

  HIDS_Init();
 8005e88:	f7ff ff8d 	bl	8005da6 <HIDS_Init>

  HRS_Init();
 8005e8c:	f7ff ff92 	bl	8005db4 <HRS_Init>

  HTS_Init();
 8005e90:	f7ff ff97 	bl	8005dc2 <HTS_Init>

  IAS_Init();
 8005e94:	f7ff ff9c 	bl	8005dd0 <IAS_Init>

  LLS_Init();
 8005e98:	f7ff ffa1 	bl	8005dde <LLS_Init>

  TPS_Init();
 8005e9c:	f7ff ffa6 	bl	8005dec <TPS_Init>

  MOTENV_STM_Init();
 8005ea0:	f7ff ffab 	bl	8005dfa <MOTENV_STM_Init>

  P2PS_STM_Init();
 8005ea4:	f7ff febc 	bl	8005c20 <P2PS_STM_Init>

  ZDD_STM_Init();
 8005ea8:	f7ff ffae 	bl	8005e08 <ZDD_STM_Init>

  OTAS_STM_Init();
 8005eac:	f7ff ffb3 	bl	8005e16 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8005eb0:	f7ff ffbf 	bl	8005e32 <BVOPUS_STM_Init>

  MESH_Init();
 8005eb4:	f7ff ffb6 	bl	8005e24 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8005eb8:	f7ff ffc2 	bl	8005e40 <SVCCTL_InitCustomSvc>
  
  return;
 8005ebc:	bf00      	nop
}
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8005ec8:	4b09      	ldr	r3, [pc, #36]	@ (8005ef0 <SVCCTL_RegisterSvcHandler+0x30>)
 8005eca:	7f1b      	ldrb	r3, [r3, #28]
 8005ecc:	4619      	mov	r1, r3
 8005ece:	4a08      	ldr	r2, [pc, #32]	@ (8005ef0 <SVCCTL_RegisterSvcHandler+0x30>)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8005ed6:	4b06      	ldr	r3, [pc, #24]	@ (8005ef0 <SVCCTL_RegisterSvcHandler+0x30>)
 8005ed8:	7f1b      	ldrb	r3, [r3, #28]
 8005eda:	3301      	adds	r3, #1
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	4b04      	ldr	r3, [pc, #16]	@ (8005ef0 <SVCCTL_RegisterSvcHandler+0x30>)
 8005ee0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8005ee2:	bf00      	nop
}
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	20000034 	.word	0x20000034

08005ef4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3301      	adds	r3, #1
 8005f00:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8005f02:	2300      	movs	r3, #0
 8005f04:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	2bff      	cmp	r3, #255	@ 0xff
 8005f0c:	d125      	bne.n	8005f5a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	3302      	adds	r3, #2
 8005f12:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005f1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f22:	d118      	bne.n	8005f56 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005f24:	2300      	movs	r3, #0
 8005f26:	757b      	strb	r3, [r7, #21]
 8005f28:	e00d      	b.n	8005f46 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8005f2a:	7d7b      	ldrb	r3, [r7, #21]
 8005f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8005f98 <SVCCTL_UserEvtRx+0xa4>)
 8005f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	4798      	blx	r3
 8005f36:	4603      	mov	r3, r0
 8005f38:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d108      	bne.n	8005f52 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005f40:	7d7b      	ldrb	r3, [r7, #21]
 8005f42:	3301      	adds	r3, #1
 8005f44:	757b      	strb	r3, [r7, #21]
 8005f46:	4b14      	ldr	r3, [pc, #80]	@ (8005f98 <SVCCTL_UserEvtRx+0xa4>)
 8005f48:	7f1b      	ldrb	r3, [r3, #28]
 8005f4a:	7d7a      	ldrb	r2, [r7, #21]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d3ec      	bcc.n	8005f2a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8005f50:	e002      	b.n	8005f58 <SVCCTL_UserEvtRx+0x64>
              break;
 8005f52:	bf00      	nop
          break;
 8005f54:	e000      	b.n	8005f58 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8005f56:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8005f58:	e000      	b.n	8005f5c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8005f5a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8005f5c:	7dfb      	ldrb	r3, [r7, #23]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d00f      	beq.n	8005f82 <SVCCTL_UserEvtRx+0x8e>
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	dc10      	bgt.n	8005f88 <SVCCTL_UserEvtRx+0x94>
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <SVCCTL_UserEvtRx+0x7c>
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d006      	beq.n	8005f7c <SVCCTL_UserEvtRx+0x88>
 8005f6e:	e00b      	b.n	8005f88 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 ffa3 	bl	8006ebc <SVCCTL_App_Notification>
 8005f76:	4603      	mov	r3, r0
 8005f78:	75bb      	strb	r3, [r7, #22]
      break;
 8005f7a:	e008      	b.n	8005f8e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	75bb      	strb	r3, [r7, #22]
      break;
 8005f80:	e005      	b.n	8005f8e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8005f82:	2300      	movs	r3, #0
 8005f84:	75bb      	strb	r3, [r7, #22]
      break;
 8005f86:	e002      	b.n	8005f8e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	75bb      	strb	r3, [r7, #22]
      break;
 8005f8c:	bf00      	nop
  }

  return (return_status);
 8005f8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3718      	adds	r7, #24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	20000034 	.word	0x20000034

08005f9c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005fa4:	f107 030c 	add.w	r3, r7, #12
 8005fa8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	212e      	movs	r1, #46	@ 0x2e
 8005fb4:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8005fb8:	f000 fae8 	bl	800658c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	330b      	adds	r3, #11
 8005fc0:	78db      	ldrb	r3, [r3, #3]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3720      	adds	r7, #32
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b088      	sub	sp, #32
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005fd2:	f107 030c 	add.w	r3, r7, #12
 8005fd6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	210f      	movs	r1, #15
 8005fe2:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8005fe6:	f000 fad1 	bl	800658c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	330b      	adds	r3, #11
 8005fee:	78db      	ldrb	r3, [r3, #3]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3720      	adds	r7, #32
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b088      	sub	sp, #32
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006000:	f107 030c 	add.w	r3, r7, #12
 8006004:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	2110      	movs	r1, #16
 800600c:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8006010:	f000 fabc 	bl	800658c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	330b      	adds	r3, #11
 8006018:	78db      	ldrb	r3, [r3, #3]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3720      	adds	r7, #32
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
	...

08006024 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8006024:	b480      	push	{r7}
 8006026:	b08b      	sub	sp, #44	@ 0x2c
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800602c:	2300      	movs	r3, #0
 800602e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8006030:	2300      	movs	r3, #0
 8006032:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8006034:	2300      	movs	r3, #0
 8006036:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8006038:	2300      	movs	r3, #0
 800603a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800603c:	2300      	movs	r3, #0
 800603e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8006040:	2300      	movs	r3, #0
 8006042:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8006044:	2300      	movs	r3, #0
 8006046:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8006048:	2300      	movs	r3, #0
 800604a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800604c:	4b4a      	ldr	r3, [pc, #296]	@ (8006178 <SHCI_GetWirelessFwInfo+0x154>)
 800604e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006050:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006054:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800605e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a44      	ldr	r2, [pc, #272]	@ (800617c <SHCI_GetWirelessFwInfo+0x158>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d10f      	bne.n	8006090 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	e01a      	b.n	80060c6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006098:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800609c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80060c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c8:	0e1b      	lsrs	r3, r3, #24
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80060d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d2:	0c1b      	lsrs	r3, r3, #16
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80060da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060dc:	0a1b      	lsrs	r3, r3, #8
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80060e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e6:	091b      	lsrs	r3, r3, #4
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	f003 030f 	and.w	r3, r3, #15
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80060f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	f003 030f 	and.w	r3, r3, #15
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	0e1b      	lsrs	r3, r3, #24
 8006106:	b2da      	uxtb	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	0c1b      	lsrs	r3, r3, #16
 8006110:	b2da      	uxtb	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	0a1b      	lsrs	r3, r3, #8
 800611a:	b2da      	uxtb	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	b2da      	uxtb	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	b2da      	uxtb	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	0e1b      	lsrs	r3, r3, #24
 8006134:	b2da      	uxtb	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	0c1b      	lsrs	r3, r3, #16
 800613e:	b2da      	uxtb	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	0a1b      	lsrs	r3, r3, #8
 8006148:	b2da      	uxtb	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	0e1b      	lsrs	r3, r3, #24
 8006152:	b2da      	uxtb	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	0c1b      	lsrs	r3, r3, #16
 800615c:	b2da      	uxtb	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	b2da      	uxtb	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	372c      	adds	r7, #44	@ 0x2c
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	58004000 	.word	0x58004000
 800617c:	a94656b9 	.word	0xa94656b9

08006180 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	4a08      	ldr	r2, [pc, #32]	@ (80061b0 <hci_init+0x30>)
 8006190:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8006192:	4a08      	ldr	r2, [pc, #32]	@ (80061b4 <hci_init+0x34>)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8006198:	4806      	ldr	r0, [pc, #24]	@ (80061b4 <hci_init+0x34>)
 800619a:	f000 f979 	bl	8006490 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 f8da 	bl	800635c <TlInit>

  return;
 80061a8:	bf00      	nop
}
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	2000018c 	.word	0x2000018c
 80061b4:	20000164 	.word	0x20000164

080061b8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80061be:	4822      	ldr	r0, [pc, #136]	@ (8006248 <hci_user_evt_proc+0x90>)
 80061c0:	f000 fd32 	bl	8006c28 <LST_is_empty>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d12b      	bne.n	8006222 <hci_user_evt_proc+0x6a>
 80061ca:	4b20      	ldr	r3, [pc, #128]	@ (800624c <hci_user_evt_proc+0x94>)
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d027      	beq.n	8006222 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80061d2:	f107 030c 	add.w	r3, r7, #12
 80061d6:	4619      	mov	r1, r3
 80061d8:	481b      	ldr	r0, [pc, #108]	@ (8006248 <hci_user_evt_proc+0x90>)
 80061da:	f000 fdb4 	bl	8006d46 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80061de:	4b1c      	ldr	r3, [pc, #112]	@ (8006250 <hci_user_evt_proc+0x98>)
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00c      	beq.n	8006200 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80061ea:	2301      	movs	r3, #1
 80061ec:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80061ee:	4b18      	ldr	r3, [pc, #96]	@ (8006250 <hci_user_evt_proc+0x98>)
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	1d3a      	adds	r2, r7, #4
 80061f4:	4610      	mov	r0, r2
 80061f6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80061f8:	793a      	ldrb	r2, [r7, #4]
 80061fa:	4b14      	ldr	r3, [pc, #80]	@ (800624c <hci_user_evt_proc+0x94>)
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	e002      	b.n	8006206 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006200:	4b12      	ldr	r3, [pc, #72]	@ (800624c <hci_user_evt_proc+0x94>)
 8006202:	2201      	movs	r2, #1
 8006204:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006206:	4b11      	ldr	r3, [pc, #68]	@ (800624c <hci_user_evt_proc+0x94>)
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d004      	beq.n	8006218 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4618      	mov	r0, r3
 8006212:	f000 fc0d 	bl	8006a30 <TL_MM_EvtDone>
 8006216:	e004      	b.n	8006222 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4619      	mov	r1, r3
 800621c:	480a      	ldr	r0, [pc, #40]	@ (8006248 <hci_user_evt_proc+0x90>)
 800621e:	f000 fd25 	bl	8006c6c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006222:	4809      	ldr	r0, [pc, #36]	@ (8006248 <hci_user_evt_proc+0x90>)
 8006224:	f000 fd00 	bl	8006c28 <LST_is_empty>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d107      	bne.n	800623e <hci_user_evt_proc+0x86>
 800622e:	4b07      	ldr	r3, [pc, #28]	@ (800624c <hci_user_evt_proc+0x94>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006236:	4804      	ldr	r0, [pc, #16]	@ (8006248 <hci_user_evt_proc+0x90>)
 8006238:	f001 f8bb 	bl	80073b2 <hci_notify_asynch_evt>
  }


  return;
 800623c:	bf00      	nop
 800623e:	bf00      	nop
}
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	2000005c 	.word	0x2000005c
 800624c:	20000068 	.word	0x20000068
 8006250:	20000164 	.word	0x20000164

08006254 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b088      	sub	sp, #32
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	460b      	mov	r3, r1
 800625e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8006260:	2000      	movs	r0, #0
 8006262:	f000 f8d1 	bl	8006408 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8006266:	2300      	movs	r3, #0
 8006268:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	885b      	ldrh	r3, [r3, #2]
 800626e:	b21b      	sxth	r3, r3
 8006270:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006274:	b21a      	sxth	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	b21b      	sxth	r3, r3
 800627c:	029b      	lsls	r3, r3, #10
 800627e:	b21b      	sxth	r3, r3
 8006280:	4313      	orrs	r3, r2
 8006282:	b21b      	sxth	r3, r3
 8006284:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8006286:	4b33      	ldr	r3, [pc, #204]	@ (8006354 <hci_send_req+0x100>)
 8006288:	2201      	movs	r2, #1
 800628a:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	b2d9      	uxtb	r1, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689a      	ldr	r2, [r3, #8]
 8006296:	8bbb      	ldrh	r3, [r7, #28]
 8006298:	4618      	mov	r0, r3
 800629a:	f000 f88f 	bl	80063bc <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800629e:	e04e      	b.n	800633e <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80062a0:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80062a4:	f001 f89c 	bl	80073e0 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80062a8:	e043      	b.n	8006332 <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80062aa:	f107 030c 	add.w	r3, r7, #12
 80062ae:	4619      	mov	r1, r3
 80062b0:	4829      	ldr	r0, [pc, #164]	@ (8006358 <hci_send_req+0x104>)
 80062b2:	f000 fd48 	bl	8006d46 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	7a5b      	ldrb	r3, [r3, #9]
 80062ba:	2b0f      	cmp	r3, #15
 80062bc:	d114      	bne.n	80062e8 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	330b      	adds	r3, #11
 80062c2:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	885b      	ldrh	r3, [r3, #2]
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	8bba      	ldrh	r2, [r7, #28]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d104      	bne.n	80062da <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	7812      	ldrb	r2, [r2, #0]
 80062d8:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	785b      	ldrb	r3, [r3, #1]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d027      	beq.n	8006332 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80062e2:	2301      	movs	r3, #1
 80062e4:	77fb      	strb	r3, [r7, #31]
 80062e6:	e024      	b.n	8006332 <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	330b      	adds	r3, #11
 80062ec:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	8bba      	ldrh	r2, [r7, #28]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d114      	bne.n	8006326 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	7a9b      	ldrb	r3, [r3, #10]
 8006300:	3b03      	subs	r3, #3
 8006302:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	695a      	ldr	r2, [r3, #20]
 8006308:	7dfb      	ldrb	r3, [r7, #23]
 800630a:	429a      	cmp	r2, r3
 800630c:	bfa8      	it	ge
 800630e:	461a      	movge	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6918      	ldr	r0, [r3, #16]
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	1cd9      	adds	r1, r3, #3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	461a      	mov	r2, r3
 8006322:	f001 fe43 	bl	8007fac <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800632e:	2301      	movs	r3, #1
 8006330:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006332:	4809      	ldr	r0, [pc, #36]	@ (8006358 <hci_send_req+0x104>)
 8006334:	f000 fc78 	bl	8006c28 <LST_is_empty>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0b5      	beq.n	80062aa <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800633e:	7ffb      	ldrb	r3, [r7, #31]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d0ad      	beq.n	80062a0 <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8006344:	2001      	movs	r0, #1
 8006346:	f000 f85f 	bl	8006408 <NotifyCmdStatus>

  return 0;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3720      	adds	r7, #32
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	20000190 	.word	0x20000190
 8006358:	20000184 	.word	0x20000184

0800635c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8006364:	480f      	ldr	r0, [pc, #60]	@ (80063a4 <TlInit+0x48>)
 8006366:	f000 fc4f 	bl	8006c08 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800636a:	4a0f      	ldr	r2, [pc, #60]	@ (80063a8 <TlInit+0x4c>)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8006370:	480e      	ldr	r0, [pc, #56]	@ (80063ac <TlInit+0x50>)
 8006372:	f000 fc49 	bl	8006c08 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006376:	4b0e      	ldr	r3, [pc, #56]	@ (80063b0 <TlInit+0x54>)
 8006378:	2201      	movs	r2, #1
 800637a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800637c:	4b0d      	ldr	r3, [pc, #52]	@ (80063b4 <TlInit+0x58>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00a      	beq.n	800639a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8006388:	4b0b      	ldr	r3, [pc, #44]	@ (80063b8 <TlInit+0x5c>)
 800638a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800638c:	4b09      	ldr	r3, [pc, #36]	@ (80063b4 <TlInit+0x58>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f107 0208 	add.w	r2, r7, #8
 8006394:	4610      	mov	r0, r2
 8006396:	4798      	blx	r3
  }

  return;
 8006398:	bf00      	nop
 800639a:	bf00      	nop
}
 800639c:	3718      	adds	r7, #24
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	20000184 	.word	0x20000184
 80063a8:	20000064 	.word	0x20000064
 80063ac:	2000005c 	.word	0x2000005c
 80063b0:	20000068 	.word	0x20000068
 80063b4:	20000164 	.word	0x20000164
 80063b8:	08006449 	.word	0x08006449

080063bc <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	4603      	mov	r3, r0
 80063c4:	603a      	str	r2, [r7, #0]
 80063c6:	80fb      	strh	r3, [r7, #6]
 80063c8:	460b      	mov	r3, r1
 80063ca:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80063cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006400 <SendCmd+0x44>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	88fa      	ldrh	r2, [r7, #6]
 80063d2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80063d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006400 <SendCmd+0x44>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	797a      	ldrb	r2, [r7, #5]
 80063dc:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80063de:	4b08      	ldr	r3, [pc, #32]	@ (8006400 <SendCmd+0x44>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	330c      	adds	r3, #12
 80063e4:	797a      	ldrb	r2, [r7, #5]
 80063e6:	6839      	ldr	r1, [r7, #0]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f001 fddf 	bl	8007fac <memcpy>

  hciContext.io.Send(0,0);
 80063ee:	4b05      	ldr	r3, [pc, #20]	@ (8006404 <SendCmd+0x48>)
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	2100      	movs	r1, #0
 80063f4:	2000      	movs	r0, #0
 80063f6:	4798      	blx	r3

  return;
 80063f8:	bf00      	nop
}
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	20000064 	.word	0x20000064
 8006404:	20000164 	.word	0x20000164

08006408 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	4603      	mov	r3, r0
 8006410:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8006412:	79fb      	ldrb	r3, [r7, #7]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d108      	bne.n	800642a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8006418:	4b0a      	ldr	r3, [pc, #40]	@ (8006444 <NotifyCmdStatus+0x3c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00d      	beq.n	800643c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8006420:	4b08      	ldr	r3, [pc, #32]	@ (8006444 <NotifyCmdStatus+0x3c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2000      	movs	r0, #0
 8006426:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8006428:	e008      	b.n	800643c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800642a:	4b06      	ldr	r3, [pc, #24]	@ (8006444 <NotifyCmdStatus+0x3c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d004      	beq.n	800643c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8006432:	4b04      	ldr	r3, [pc, #16]	@ (8006444 <NotifyCmdStatus+0x3c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2001      	movs	r0, #1
 8006438:	4798      	blx	r3
  return;
 800643a:	bf00      	nop
 800643c:	bf00      	nop
}
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	2000018c 	.word	0x2000018c

08006448 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	7a5b      	ldrb	r3, [r3, #9]
 8006454:	2b0f      	cmp	r3, #15
 8006456:	d003      	beq.n	8006460 <TlEvtReceived+0x18>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	7a5b      	ldrb	r3, [r3, #9]
 800645c:	2b0e      	cmp	r3, #14
 800645e:	d107      	bne.n	8006470 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8006460:	6879      	ldr	r1, [r7, #4]
 8006462:	4809      	ldr	r0, [pc, #36]	@ (8006488 <TlEvtReceived+0x40>)
 8006464:	f000 fc28 	bl	8006cb8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8006468:	2000      	movs	r0, #0
 800646a:	f000 ffae 	bl	80073ca <hci_cmd_resp_release>
 800646e:	e006      	b.n	800647e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8006470:	6879      	ldr	r1, [r7, #4]
 8006472:	4806      	ldr	r0, [pc, #24]	@ (800648c <TlEvtReceived+0x44>)
 8006474:	f000 fc20 	bl	8006cb8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006478:	4804      	ldr	r0, [pc, #16]	@ (800648c <TlEvtReceived+0x44>)
 800647a:	f000 ff9a 	bl	80073b2 <hci_notify_asynch_evt>
  }

  return;
 800647e:	bf00      	nop
}
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20000184 	.word	0x20000184
 800648c:	2000005c 	.word	0x2000005c

08006490 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a05      	ldr	r2, [pc, #20]	@ (80064b0 <hci_register_io_bus+0x20>)
 800649c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a04      	ldr	r2, [pc, #16]	@ (80064b4 <hci_register_io_bus+0x24>)
 80064a2:	611a      	str	r2, [r3, #16]

  return;
 80064a4:	bf00      	nop
}
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	080067a9 	.word	0x080067a9
 80064b4:	08006811 	.word	0x08006811

080064b8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	4a08      	ldr	r2, [pc, #32]	@ (80064e8 <shci_init+0x30>)
 80064c8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80064ca:	4a08      	ldr	r2, [pc, #32]	@ (80064ec <shci_init+0x34>)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80064d0:	4806      	ldr	r0, [pc, #24]	@ (80064ec <shci_init+0x34>)
 80064d2:	f000 f915 	bl	8006700 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 f898 	bl	8006610 <TlInit>

  return;
 80064e0:	bf00      	nop
}
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	200001b4 	.word	0x200001b4
 80064ec:	20000194 	.word	0x20000194

080064f0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80064f6:	4822      	ldr	r0, [pc, #136]	@ (8006580 <shci_user_evt_proc+0x90>)
 80064f8:	f000 fb96 	bl	8006c28 <LST_is_empty>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d12b      	bne.n	800655a <shci_user_evt_proc+0x6a>
 8006502:	4b20      	ldr	r3, [pc, #128]	@ (8006584 <shci_user_evt_proc+0x94>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d027      	beq.n	800655a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800650a:	f107 030c 	add.w	r3, r7, #12
 800650e:	4619      	mov	r1, r3
 8006510:	481b      	ldr	r0, [pc, #108]	@ (8006580 <shci_user_evt_proc+0x90>)
 8006512:	f000 fc18 	bl	8006d46 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8006516:	4b1c      	ldr	r3, [pc, #112]	@ (8006588 <shci_user_evt_proc+0x98>)
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00c      	beq.n	8006538 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8006522:	2301      	movs	r3, #1
 8006524:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006526:	4b18      	ldr	r3, [pc, #96]	@ (8006588 <shci_user_evt_proc+0x98>)
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	1d3a      	adds	r2, r7, #4
 800652c:	4610      	mov	r0, r2
 800652e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8006530:	793a      	ldrb	r2, [r7, #4]
 8006532:	4b14      	ldr	r3, [pc, #80]	@ (8006584 <shci_user_evt_proc+0x94>)
 8006534:	701a      	strb	r2, [r3, #0]
 8006536:	e002      	b.n	800653e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006538:	4b12      	ldr	r3, [pc, #72]	@ (8006584 <shci_user_evt_proc+0x94>)
 800653a:	2201      	movs	r2, #1
 800653c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800653e:	4b11      	ldr	r3, [pc, #68]	@ (8006584 <shci_user_evt_proc+0x94>)
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d004      	beq.n	8006550 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fa71 	bl	8006a30 <TL_MM_EvtDone>
 800654e:	e004      	b.n	800655a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4619      	mov	r1, r3
 8006554:	480a      	ldr	r0, [pc, #40]	@ (8006580 <shci_user_evt_proc+0x90>)
 8006556:	f000 fb89 	bl	8006c6c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800655a:	4809      	ldr	r0, [pc, #36]	@ (8006580 <shci_user_evt_proc+0x90>)
 800655c:	f000 fb64 	bl	8006c28 <LST_is_empty>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d107      	bne.n	8006576 <shci_user_evt_proc+0x86>
 8006566:	4b07      	ldr	r3, [pc, #28]	@ (8006584 <shci_user_evt_proc+0x94>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800656e:	4804      	ldr	r0, [pc, #16]	@ (8006580 <shci_user_evt_proc+0x90>)
 8006570:	f7fa f81a 	bl	80005a8 <shci_notify_asynch_evt>
  }


  return;
 8006574:	bf00      	nop
 8006576:	bf00      	nop
}
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	2000006c 	.word	0x2000006c
 8006584:	2000007c 	.word	0x2000007c
 8006588:	20000194 	.word	0x20000194

0800658c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	60ba      	str	r2, [r7, #8]
 8006594:	607b      	str	r3, [r7, #4]
 8006596:	4603      	mov	r3, r0
 8006598:	81fb      	strh	r3, [r7, #14]
 800659a:	460b      	mov	r3, r1
 800659c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800659e:	2000      	movs	r0, #0
 80065a0:	f000 f868 	bl	8006674 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80065a4:	4b17      	ldr	r3, [pc, #92]	@ (8006604 <shci_send+0x78>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	89fa      	ldrh	r2, [r7, #14]
 80065aa:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80065ae:	4b15      	ldr	r3, [pc, #84]	@ (8006604 <shci_send+0x78>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	7b7a      	ldrb	r2, [r7, #13]
 80065b4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80065b6:	4b13      	ldr	r3, [pc, #76]	@ (8006604 <shci_send+0x78>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	330c      	adds	r3, #12
 80065bc:	7b7a      	ldrb	r2, [r7, #13]
 80065be:	68b9      	ldr	r1, [r7, #8]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f001 fcf3 	bl	8007fac <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 80065c6:	4b10      	ldr	r3, [pc, #64]	@ (8006608 <shci_send+0x7c>)
 80065c8:	2201      	movs	r2, #1
 80065ca:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80065cc:	4b0f      	ldr	r3, [pc, #60]	@ (800660c <shci_send+0x80>)
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	2100      	movs	r1, #0
 80065d2:	2000      	movs	r0, #0
 80065d4:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80065d6:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80065da:	f7f9 fffc 	bl	80005d6 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f103 0008 	add.w	r0, r3, #8
 80065e4:	4b07      	ldr	r3, [pc, #28]	@ (8006604 <shci_send+0x78>)
 80065e6:	6819      	ldr	r1, [r3, #0]
 80065e8:	4b06      	ldr	r3, [pc, #24]	@ (8006604 <shci_send+0x78>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	789b      	ldrb	r3, [r3, #2]
 80065ee:	3303      	adds	r3, #3
 80065f0:	461a      	mov	r2, r3
 80065f2:	f001 fcdb 	bl	8007fac <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80065f6:	2001      	movs	r0, #1
 80065f8:	f000 f83c 	bl	8006674 <Cmd_SetStatus>

  return;
 80065fc:	bf00      	nop
}
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	20000078 	.word	0x20000078
 8006608:	200001b8 	.word	0x200001b8
 800660c:	20000194 	.word	0x20000194

08006610 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8006618:	4a10      	ldr	r2, [pc, #64]	@ (800665c <TlInit+0x4c>)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800661e:	4810      	ldr	r0, [pc, #64]	@ (8006660 <TlInit+0x50>)
 8006620:	f000 faf2 	bl	8006c08 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006624:	2001      	movs	r0, #1
 8006626:	f000 f825 	bl	8006674 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800662a:	4b0e      	ldr	r3, [pc, #56]	@ (8006664 <TlInit+0x54>)
 800662c:	2201      	movs	r2, #1
 800662e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8006630:	4b0d      	ldr	r3, [pc, #52]	@ (8006668 <TlInit+0x58>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00c      	beq.n	8006652 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800663c:	4b0b      	ldr	r3, [pc, #44]	@ (800666c <TlInit+0x5c>)
 800663e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8006640:	4b0b      	ldr	r3, [pc, #44]	@ (8006670 <TlInit+0x60>)
 8006642:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8006644:	4b08      	ldr	r3, [pc, #32]	@ (8006668 <TlInit+0x58>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f107 020c 	add.w	r2, r7, #12
 800664c:	4610      	mov	r0, r2
 800664e:	4798      	blx	r3
  }

  return;
 8006650:	bf00      	nop
 8006652:	bf00      	nop
}
 8006654:	3718      	adds	r7, #24
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	20000078 	.word	0x20000078
 8006660:	2000006c 	.word	0x2000006c
 8006664:	2000007c 	.word	0x2000007c
 8006668:	20000194 	.word	0x20000194
 800666c:	080066c5 	.word	0x080066c5
 8006670:	080066dd 	.word	0x080066dd

08006674 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	4603      	mov	r3, r0
 800667c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800667e:	79fb      	ldrb	r3, [r7, #7]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10b      	bne.n	800669c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8006684:	4b0d      	ldr	r3, [pc, #52]	@ (80066bc <Cmd_SetStatus+0x48>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800668c:	4b0b      	ldr	r3, [pc, #44]	@ (80066bc <Cmd_SetStatus+0x48>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2000      	movs	r0, #0
 8006692:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8006694:	4b0a      	ldr	r3, [pc, #40]	@ (80066c0 <Cmd_SetStatus+0x4c>)
 8006696:	2200      	movs	r2, #0
 8006698:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800669a:	e00b      	b.n	80066b4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800669c:	4b08      	ldr	r3, [pc, #32]	@ (80066c0 <Cmd_SetStatus+0x4c>)
 800669e:	2201      	movs	r2, #1
 80066a0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80066a2:	4b06      	ldr	r3, [pc, #24]	@ (80066bc <Cmd_SetStatus+0x48>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d004      	beq.n	80066b4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80066aa:	4b04      	ldr	r3, [pc, #16]	@ (80066bc <Cmd_SetStatus+0x48>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2001      	movs	r0, #1
 80066b0:	4798      	blx	r3
  return;
 80066b2:	bf00      	nop
 80066b4:	bf00      	nop
}
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	200001b4 	.word	0x200001b4
 80066c0:	20000074 	.word	0x20000074

080066c4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80066cc:	2000      	movs	r0, #0
 80066ce:	f7f9 ff77 	bl	80005c0 <shci_cmd_resp_release>

  return;
 80066d2:	bf00      	nop
}
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
	...

080066dc <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80066e4:	6879      	ldr	r1, [r7, #4]
 80066e6:	4805      	ldr	r0, [pc, #20]	@ (80066fc <TlUserEvtReceived+0x20>)
 80066e8:	f000 fae6 	bl	8006cb8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80066ec:	4803      	ldr	r0, [pc, #12]	@ (80066fc <TlUserEvtReceived+0x20>)
 80066ee:	f7f9 ff5b 	bl	80005a8 <shci_notify_asynch_evt>

  return;
 80066f2:	bf00      	nop
}
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	2000006c 	.word	0x2000006c

08006700 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a05      	ldr	r2, [pc, #20]	@ (8006720 <shci_register_io_bus+0x20>)
 800670c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a04      	ldr	r2, [pc, #16]	@ (8006724 <shci_register_io_bus+0x24>)
 8006712:	611a      	str	r2, [r3, #16]

  return;
 8006714:	bf00      	nop
}
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	080068bd 	.word	0x080068bd
 8006724:	08006911 	.word	0x08006911

08006728 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800672c:	f001 f85a 	bl	80077e4 <HW_IPCC_Enable>

  return;
 8006730:	bf00      	nop
}
 8006732:	bd80      	pop	{r7, pc}

08006734 <TL_Init>:


void TL_Init( void )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8006738:	4b10      	ldr	r3, [pc, #64]	@ (800677c <TL_Init+0x48>)
 800673a:	4a11      	ldr	r2, [pc, #68]	@ (8006780 <TL_Init+0x4c>)
 800673c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800673e:	4b0f      	ldr	r3, [pc, #60]	@ (800677c <TL_Init+0x48>)
 8006740:	4a10      	ldr	r2, [pc, #64]	@ (8006784 <TL_Init+0x50>)
 8006742:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8006744:	4b0d      	ldr	r3, [pc, #52]	@ (800677c <TL_Init+0x48>)
 8006746:	4a10      	ldr	r2, [pc, #64]	@ (8006788 <TL_Init+0x54>)
 8006748:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800674a:	4b0c      	ldr	r3, [pc, #48]	@ (800677c <TL_Init+0x48>)
 800674c:	4a0f      	ldr	r2, [pc, #60]	@ (800678c <TL_Init+0x58>)
 800674e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8006750:	4b0a      	ldr	r3, [pc, #40]	@ (800677c <TL_Init+0x48>)
 8006752:	4a0f      	ldr	r2, [pc, #60]	@ (8006790 <TL_Init+0x5c>)
 8006754:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8006756:	4b09      	ldr	r3, [pc, #36]	@ (800677c <TL_Init+0x48>)
 8006758:	4a0e      	ldr	r2, [pc, #56]	@ (8006794 <TL_Init+0x60>)
 800675a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800675c:	4b07      	ldr	r3, [pc, #28]	@ (800677c <TL_Init+0x48>)
 800675e:	4a0e      	ldr	r2, [pc, #56]	@ (8006798 <TL_Init+0x64>)
 8006760:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8006762:	4b06      	ldr	r3, [pc, #24]	@ (800677c <TL_Init+0x48>)
 8006764:	4a0d      	ldr	r2, [pc, #52]	@ (800679c <TL_Init+0x68>)
 8006766:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8006768:	4b04      	ldr	r3, [pc, #16]	@ (800677c <TL_Init+0x48>)
 800676a:	4a0d      	ldr	r2, [pc, #52]	@ (80067a0 <TL_Init+0x6c>)
 800676c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800676e:	4b03      	ldr	r3, [pc, #12]	@ (800677c <TL_Init+0x48>)
 8006770:	4a0c      	ldr	r2, [pc, #48]	@ (80067a4 <TL_Init+0x70>)
 8006772:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8006774:	f001 f84a 	bl	800780c <HW_IPCC_Init>

  return;
 8006778:	bf00      	nop
}
 800677a:	bd80      	pop	{r7, pc}
 800677c:	20030000 	.word	0x20030000
 8006780:	20030028 	.word	0x20030028
 8006784:	20030048 	.word	0x20030048
 8006788:	20030058 	.word	0x20030058
 800678c:	20030068 	.word	0x20030068
 8006790:	20030070 	.word	0x20030070
 8006794:	20030078 	.word	0x20030078
 8006798:	20030080 	.word	0x20030080
 800679c:	2003009c 	.word	0x2003009c
 80067a0:	200300a0 	.word	0x200300a0
 80067a4:	200300ac 	.word	0x200300ac

080067a8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80067b4:	4811      	ldr	r0, [pc, #68]	@ (80067fc <TL_BLE_Init+0x54>)
 80067b6:	f000 fa27 	bl	8006c08 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80067ba:	4b11      	ldr	r3, [pc, #68]	@ (8006800 <TL_BLE_Init+0x58>)
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4a0c      	ldr	r2, [pc, #48]	@ (8006804 <TL_BLE_Init+0x5c>)
 80067d4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	4a08      	ldr	r2, [pc, #32]	@ (80067fc <TL_BLE_Init+0x54>)
 80067da:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80067dc:	f001 f82c 	bl	8007838 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a08      	ldr	r2, [pc, #32]	@ (8006808 <TL_BLE_Init+0x60>)
 80067e6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	4a07      	ldr	r2, [pc, #28]	@ (800680c <TL_BLE_Init+0x64>)
 80067ee:	6013      	str	r3, [r2, #0]

  return 0;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	200300c8 	.word	0x200300c8
 8006800:	20030000 	.word	0x20030000
 8006804:	20030a58 	.word	0x20030a58
 8006808:	200001c4 	.word	0x200001c4
 800680c:	200001c8 	.word	0x200001c8

08006810 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800681c:	4b09      	ldr	r3, [pc, #36]	@ (8006844 <TL_BLE_SendCmd+0x34>)
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2201      	movs	r2, #1
 8006824:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8006826:	4b07      	ldr	r3, [pc, #28]	@ (8006844 <TL_BLE_SendCmd+0x34>)
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4619      	mov	r1, r3
 800682e:	2001      	movs	r0, #1
 8006830:	f000 f96c 	bl	8006b0c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8006834:	f001 f81a 	bl	800786c <HW_IPCC_BLE_SendCmd>

  return 0;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	20030000 	.word	0x20030000

08006848 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800684e:	e01c      	b.n	800688a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8006850:	1d3b      	adds	r3, r7, #4
 8006852:	4619      	mov	r1, r3
 8006854:	4812      	ldr	r0, [pc, #72]	@ (80068a0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8006856:	f000 fa76 	bl	8006d46 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	7a5b      	ldrb	r3, [r3, #9]
 800685e:	2b0f      	cmp	r3, #15
 8006860:	d003      	beq.n	800686a <HW_IPCC_BLE_RxEvtNot+0x22>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	7a5b      	ldrb	r3, [r3, #9]
 8006866:	2b0e      	cmp	r3, #14
 8006868:	d105      	bne.n	8006876 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4619      	mov	r1, r3
 800686e:	2002      	movs	r0, #2
 8006870:	f000 f94c 	bl	8006b0c <OutputDbgTrace>
 8006874:	e004      	b.n	8006880 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4619      	mov	r1, r3
 800687a:	2003      	movs	r0, #3
 800687c:	f000 f946 	bl	8006b0c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8006880:	4b08      	ldr	r3, [pc, #32]	@ (80068a4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	4610      	mov	r0, r2
 8006888:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800688a:	4805      	ldr	r0, [pc, #20]	@ (80068a0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800688c:	f000 f9cc 	bl	8006c28 <LST_is_empty>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0dc      	beq.n	8006850 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8006896:	bf00      	nop
}
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	200300c8 	.word	0x200300c8
 80068a4:	200001c4 	.word	0x200001c4

080068a8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80068ac:	4b02      	ldr	r3, [pc, #8]	@ (80068b8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4798      	blx	r3

  return;
 80068b2:	bf00      	nop
}
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	200001c8 	.word	0x200001c8

080068bc <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80068c8:	480d      	ldr	r0, [pc, #52]	@ (8006900 <TL_SYS_Init+0x44>)
 80068ca:	f000 f99d 	bl	8006c08 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80068ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006904 <TL_SYS_Init+0x48>)
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	4a08      	ldr	r2, [pc, #32]	@ (8006900 <TL_SYS_Init+0x44>)
 80068e0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80068e2:	f000 fff5 	bl	80078d0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a07      	ldr	r2, [pc, #28]	@ (8006908 <TL_SYS_Init+0x4c>)
 80068ec:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	4a06      	ldr	r2, [pc, #24]	@ (800690c <TL_SYS_Init+0x50>)
 80068f4:	6013      	str	r3, [r2, #0]

  return 0;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	200300d0 	.word	0x200300d0
 8006904:	20030000 	.word	0x20030000
 8006908:	200001cc 	.word	0x200001cc
 800690c:	200001d0 	.word	0x200001d0

08006910 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	460b      	mov	r3, r1
 800691a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800691c:	4b09      	ldr	r3, [pc, #36]	@ (8006944 <TL_SYS_SendCmd+0x34>)
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2210      	movs	r2, #16
 8006924:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8006926:	4b07      	ldr	r3, [pc, #28]	@ (8006944 <TL_SYS_SendCmd+0x34>)
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4619      	mov	r1, r3
 800692e:	2004      	movs	r0, #4
 8006930:	f000 f8ec 	bl	8006b0c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8006934:	f000 ffe6 	bl	8007904 <HW_IPCC_SYS_SendCmd>

  return 0;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20030000 	.word	0x20030000

08006948 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800694c:	4b07      	ldr	r3, [pc, #28]	@ (800696c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4619      	mov	r1, r3
 8006954:	2005      	movs	r0, #5
 8006956:	f000 f8d9 	bl	8006b0c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800695a:	4b05      	ldr	r3, [pc, #20]	@ (8006970 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a03      	ldr	r2, [pc, #12]	@ (800696c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8006960:	68d2      	ldr	r2, [r2, #12]
 8006962:	6812      	ldr	r2, [r2, #0]
 8006964:	4610      	mov	r0, r2
 8006966:	4798      	blx	r3

  return;
 8006968:	bf00      	nop
}
 800696a:	bd80      	pop	{r7, pc}
 800696c:	20030000 	.word	0x20030000
 8006970:	200001cc 	.word	0x200001cc

08006974 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800697a:	e00e      	b.n	800699a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800697c:	1d3b      	adds	r3, r7, #4
 800697e:	4619      	mov	r1, r3
 8006980:	480b      	ldr	r0, [pc, #44]	@ (80069b0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8006982:	f000 f9e0 	bl	8006d46 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4619      	mov	r1, r3
 800698a:	2006      	movs	r0, #6
 800698c:	f000 f8be 	bl	8006b0c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8006990:	4b08      	ldr	r3, [pc, #32]	@ (80069b4 <HW_IPCC_SYS_EvtNot+0x40>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	4610      	mov	r0, r2
 8006998:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800699a:	4805      	ldr	r0, [pc, #20]	@ (80069b0 <HW_IPCC_SYS_EvtNot+0x3c>)
 800699c:	f000 f944 	bl	8006c28 <LST_is_empty>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d0ea      	beq.n	800697c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80069a6:	bf00      	nop
}
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	200300d0 	.word	0x200300d0
 80069b4:	200001d0 	.word	0x200001d0

080069b8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80069c0:	4817      	ldr	r0, [pc, #92]	@ (8006a20 <TL_MM_Init+0x68>)
 80069c2:	f000 f921 	bl	8006c08 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80069c6:	4817      	ldr	r0, [pc, #92]	@ (8006a24 <TL_MM_Init+0x6c>)
 80069c8:	f000 f91e 	bl	8006c08 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80069cc:	4b16      	ldr	r3, [pc, #88]	@ (8006a28 <TL_MM_Init+0x70>)
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	4a16      	ldr	r2, [pc, #88]	@ (8006a2c <TL_MM_Init+0x74>)
 80069d2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80069d4:	4b15      	ldr	r3, [pc, #84]	@ (8006a2c <TL_MM_Init+0x74>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6892      	ldr	r2, [r2, #8]
 80069dc:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80069de:	4b13      	ldr	r3, [pc, #76]	@ (8006a2c <TL_MM_Init+0x74>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	68d2      	ldr	r2, [r2, #12]
 80069e6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80069e8:	4b10      	ldr	r3, [pc, #64]	@ (8006a2c <TL_MM_Init+0x74>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a0c      	ldr	r2, [pc, #48]	@ (8006a20 <TL_MM_Init+0x68>)
 80069ee:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80069f0:	4b0e      	ldr	r3, [pc, #56]	@ (8006a2c <TL_MM_Init+0x74>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	6812      	ldr	r2, [r2, #0]
 80069f8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80069fa:	4b0c      	ldr	r3, [pc, #48]	@ (8006a2c <TL_MM_Init+0x74>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6852      	ldr	r2, [r2, #4]
 8006a02:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8006a04:	4b09      	ldr	r3, [pc, #36]	@ (8006a2c <TL_MM_Init+0x74>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	6912      	ldr	r2, [r2, #16]
 8006a0c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8006a0e:	4b07      	ldr	r3, [pc, #28]	@ (8006a2c <TL_MM_Init+0x74>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	6952      	ldr	r2, [r2, #20]
 8006a16:	619a      	str	r2, [r3, #24]

  return;
 8006a18:	bf00      	nop
}
 8006a1a:	3708      	adds	r7, #8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	200300b8 	.word	0x200300b8
 8006a24:	200001bc 	.word	0x200001bc
 8006a28:	20030000 	.word	0x20030000
 8006a2c:	200001d4 	.word	0x200001d4

08006a30 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8006a38:	6879      	ldr	r1, [r7, #4]
 8006a3a:	4807      	ldr	r0, [pc, #28]	@ (8006a58 <TL_MM_EvtDone+0x28>)
 8006a3c:	f000 f93c 	bl	8006cb8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8006a40:	6879      	ldr	r1, [r7, #4]
 8006a42:	2000      	movs	r0, #0
 8006a44:	f000 f862 	bl	8006b0c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8006a48:	4804      	ldr	r0, [pc, #16]	@ (8006a5c <TL_MM_EvtDone+0x2c>)
 8006a4a:	f000 ffa1 	bl	8007990 <HW_IPCC_MM_SendFreeBuf>

  return;
 8006a4e:	bf00      	nop
}
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	200001bc 	.word	0x200001bc
 8006a5c:	08006a61 	.word	0x08006a61

08006a60 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8006a66:	e00c      	b.n	8006a82 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8006a68:	1d3b      	adds	r3, r7, #4
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	480a      	ldr	r0, [pc, #40]	@ (8006a98 <SendFreeBuf+0x38>)
 8006a6e:	f000 f96a 	bl	8006d46 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8006a72:	4b0a      	ldr	r3, [pc, #40]	@ (8006a9c <SendFreeBuf+0x3c>)
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	4611      	mov	r1, r2
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f000 f91b 	bl	8006cb8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8006a82:	4805      	ldr	r0, [pc, #20]	@ (8006a98 <SendFreeBuf+0x38>)
 8006a84:	f000 f8d0 	bl	8006c28 <LST_is_empty>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d0ec      	beq.n	8006a68 <SendFreeBuf+0x8>
  }

  return;
 8006a8e:	bf00      	nop
}
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	200001bc 	.word	0x200001bc
 8006a9c:	20030000 	.word	0x20030000

08006aa0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8006aa4:	4805      	ldr	r0, [pc, #20]	@ (8006abc <TL_TRACES_Init+0x1c>)
 8006aa6:	f000 f8af 	bl	8006c08 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8006aaa:	4b05      	ldr	r3, [pc, #20]	@ (8006ac0 <TL_TRACES_Init+0x20>)
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	4a03      	ldr	r2, [pc, #12]	@ (8006abc <TL_TRACES_Init+0x1c>)
 8006ab0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8006ab2:	f000 ffbf 	bl	8007a34 <HW_IPCC_TRACES_Init>

  return;
 8006ab6:	bf00      	nop
}
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	200300c0 	.word	0x200300c0
 8006ac0:	20030000 	.word	0x20030000

08006ac4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8006aca:	e008      	b.n	8006ade <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8006acc:	1d3b      	adds	r3, r7, #4
 8006ace:	4619      	mov	r1, r3
 8006ad0:	4808      	ldr	r0, [pc, #32]	@ (8006af4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8006ad2:	f000 f938 	bl	8006d46 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 f80d 	bl	8006af8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8006ade:	4805      	ldr	r0, [pc, #20]	@ (8006af4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8006ae0:	f000 f8a2 	bl	8006c28 <LST_is_empty>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d0f0      	beq.n	8006acc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8006aea:	bf00      	nop
}
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	200300c0 	.word	0x200300c0

08006af8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	4603      	mov	r3, r0
 8006b14:	6039      	str	r1, [r7, #0]
 8006b16:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 8006b18:	79fb      	ldrb	r3, [r7, #7]
 8006b1a:	2b06      	cmp	r3, #6
 8006b1c:	d845      	bhi.n	8006baa <OutputDbgTrace+0x9e>
 8006b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b24 <OutputDbgTrace+0x18>)
 8006b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b24:	08006b41 	.word	0x08006b41
 8006b28:	08006b65 	.word	0x08006b65
 8006b2c:	08006b6b 	.word	0x08006b6b
 8006b30:	08006b7f 	.word	0x08006b7f
 8006b34:	08006b8b 	.word	0x08006b8b
 8006b38:	08006b91 	.word	0x08006b91
 8006b3c:	08006b9f 	.word	0x08006b9f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	7a5b      	ldrb	r3, [r3, #9]
 8006b48:	2bff      	cmp	r3, #255	@ 0xff
 8006b4a:	d005      	beq.n	8006b58 <OutputDbgTrace+0x4c>
 8006b4c:	2bff      	cmp	r3, #255	@ 0xff
 8006b4e:	dc05      	bgt.n	8006b5c <OutputDbgTrace+0x50>
 8006b50:	2b0e      	cmp	r3, #14
 8006b52:	d005      	beq.n	8006b60 <OutputDbgTrace+0x54>
 8006b54:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8006b56:	e001      	b.n	8006b5c <OutputDbgTrace+0x50>
          break;
 8006b58:	bf00      	nop
 8006b5a:	e027      	b.n	8006bac <OutputDbgTrace+0xa0>
          break;
 8006b5c:	bf00      	nop
 8006b5e:	e025      	b.n	8006bac <OutputDbgTrace+0xa0>
          break;
 8006b60:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8006b62:	e023      	b.n	8006bac <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8006b68:	e020      	b.n	8006bac <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	7a5b      	ldrb	r3, [r3, #9]
 8006b72:	2b0e      	cmp	r3, #14
 8006b74:	d001      	beq.n	8006b7a <OutputDbgTrace+0x6e>
 8006b76:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8006b78:	e000      	b.n	8006b7c <OutputDbgTrace+0x70>
          break;
 8006b7a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006b7c:	e016      	b.n	8006bac <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	7a5b      	ldrb	r3, [r3, #9]
 8006b86:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006b88:	e010      	b.n	8006bac <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8006b8e:	e00d      	b.n	8006bac <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	785b      	ldrb	r3, [r3, #1]
 8006b98:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8006b9a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006b9c:	e006      	b.n	8006bac <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	7a5b      	ldrb	r3, [r3, #9]
 8006ba6:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006ba8:	e000      	b.n	8006bac <OutputDbgTrace+0xa0>

    default:
      break;
 8006baa:	bf00      	nop
  }

  return;
 8006bac:	bf00      	nop
}
 8006bae:	371c      	adds	r7, #28
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8006bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8006c00 <OTP_Read+0x48>)
 8006bc4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8006bc6:	e002      	b.n	8006bce <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3b08      	subs	r3, #8
 8006bcc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3307      	adds	r3, #7
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	79fa      	ldrb	r2, [r7, #7]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d003      	beq.n	8006be2 <OTP_Read+0x2a>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	4a09      	ldr	r2, [pc, #36]	@ (8006c04 <OTP_Read+0x4c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d1f2      	bne.n	8006bc8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	3307      	adds	r3, #7
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	79fa      	ldrb	r2, [r7, #7]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d001      	beq.n	8006bf2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	1fff73f8 	.word	0x1fff73f8
 8006c04:	1fff7000 	.word	0x1fff7000

08006c08 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	605a      	str	r2, [r3, #4]
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b087      	sub	sp, #28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c30:	f3ef 8310 	mrs	r3, PRIMASK
 8006c34:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c36:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006c38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c3a:	b672      	cpsid	i
}
 8006c3c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d102      	bne.n	8006c4e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	75fb      	strb	r3, [r7, #23]
 8006c4c:	e001      	b.n	8006c52 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	75fb      	strb	r3, [r7, #23]
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	f383 8810 	msr	PRIMASK, r3
}
 8006c5c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8006c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	371c      	adds	r7, #28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c76:	f3ef 8310 	mrs	r3, PRIMASK
 8006c7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006c7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c80:	b672      	cpsid	i
}
 8006c82:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	605a      	str	r2, [r3, #4]
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f383 8810 	msr	PRIMASK, r3
}
 8006caa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006cac:	bf00      	nop
 8006cae:	371c      	adds	r7, #28
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8006cc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006cca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ccc:	b672      	cpsid	i
}
 8006cce:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f383 8810 	msr	PRIMASK, r3
}
 8006cf6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006cf8:	bf00      	nop
 8006cfa:	371c      	adds	r7, #28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8006d10:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d12:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006d14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006d16:	b672      	cpsid	i
}
 8006d18:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	6812      	ldr	r2, [r2, #0]
 8006d22:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	6852      	ldr	r2, [r2, #4]
 8006d2c:	605a      	str	r2, [r3, #4]
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f383 8810 	msr	PRIMASK, r3
}
 8006d38:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006d3a:	bf00      	nop
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b086      	sub	sp, #24
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d50:	f3ef 8310 	mrs	r3, PRIMASK
 8006d54:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d56:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006d58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006d5a:	b672      	cpsid	i
}
 8006d5c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7ff ffca 	bl	8006d04 <LST_remove_node>
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	f383 8810 	msr	PRIMASK, r3
}
 8006d7a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006d7c:	bf00      	nop
 8006d7e:	3718      	adds	r7, #24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8006d84:	b480      	push	{r7}
 8006d86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8006d88:	4b03      	ldr	r3, [pc, #12]	@ (8006d98 <LL_FLASH_GetUDN+0x14>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	1fff7580 	.word	0x1fff7580

08006d9c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8006da0:	4b03      	ldr	r3, [pc, #12]	@ (8006db0 <LL_FLASH_GetDeviceID+0x14>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	b2db      	uxtb	r3, r3
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	1fff7584 	.word	0x1fff7584

08006db4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8006db8:	4b03      	ldr	r3, [pc, #12]	@ (8006dc8 <LL_FLASH_GetSTCompanyID+0x14>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	0a1b      	lsrs	r3, r3, #8
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	1fff7584 	.word	0x1fff7584

08006dcc <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8006dcc:	b5b0      	push	{r4, r5, r7, lr}
 8006dce:	b090      	sub	sp, #64	@ 0x40
 8006dd0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8006dd2:	2392      	movs	r3, #146	@ 0x92
 8006dd4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8006dd8:	4b2e      	ldr	r3, [pc, #184]	@ (8006e94 <APP_BLE_Init+0xc8>)
 8006dda:	1d3c      	adds	r4, r7, #4
 8006ddc:	461d      	mov	r5, r3
 8006dde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006de0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006dee:	c403      	stmia	r4!, {r0, r1}
 8006df0:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8006df2:	f000 f919 	bl	8007028 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8006df6:	2101      	movs	r1, #1
 8006df8:	2002      	movs	r0, #2
 8006dfa:	f000 fe53 	bl	8007aa4 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8006dfe:	4a26      	ldr	r2, [pc, #152]	@ (8006e98 <APP_BLE_Init+0xcc>)
 8006e00:	2100      	movs	r1, #0
 8006e02:	2002      	movs	r0, #2
 8006e04:	f000 ff7a 	bl	8007cfc <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8006e08:	1d3b      	adds	r3, r7, #4
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7ff f8c6 	bl	8005f9c <SHCI_C2_BLE_Init>
 8006e10:	4603      	mov	r3, r0
 8006e12:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8006e16:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8006e1e:	f7fa fb5d 	bl	80014dc <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8006e22:	f000 f917 	bl	8007054 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8006e26:	f7ff f813 	bl	8005e50 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8006e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8006e9c <APP_BLE_Init+0xd0>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8006e32:	4b1a      	ldr	r3, [pc, #104]	@ (8006e9c <APP_BLE_Init+0xd0>)
 8006e34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006e38:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8006e3a:	4a19      	ldr	r2, [pc, #100]	@ (8006ea0 <APP_BLE_Init+0xd4>)
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	2001      	movs	r0, #1
 8006e40:	f000 ff5c 	bl	8007cfc <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8006e44:	2006      	movs	r0, #6
 8006e46:	f7fe fcf3 	bl	8005830 <aci_hal_set_radio_activity_mask>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8006e50:	f000 fb4a 	bl	80074e8 <P2PS_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8006e54:	4b13      	ldr	r3, [pc, #76]	@ (8006ea4 <APP_BLE_Init+0xd8>)
 8006e56:	2200      	movs	r2, #0
 8006e58:	4913      	ldr	r1, [pc, #76]	@ (8006ea8 <APP_BLE_Init+0xdc>)
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	f7fa f8f8 	bl	8001050 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8006e60:	4b12      	ldr	r3, [pc, #72]	@ (8006eac <APP_BLE_Init+0xe0>)
 8006e62:	2200      	movs	r2, #0
 8006e64:	4912      	ldr	r1, [pc, #72]	@ (8006eb0 <APP_BLE_Init+0xe4>)
 8006e66:	2000      	movs	r0, #0
 8006e68:	f7fa f8f2 	bl	8001050 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8006e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e9c <APP_BLE_Init+0xd0>)
 8006e6e:	2200      	movs	r2, #0
 8006e70:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8006e72:	4b0a      	ldr	r3, [pc, #40]	@ (8006e9c <APP_BLE_Init+0xd0>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8006e78:	4b0e      	ldr	r3, [pc, #56]	@ (8006eb4 <APP_BLE_Init+0xe8>)
 8006e7a:	2280      	movs	r2, #128	@ 0x80
 8006e7c:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8006e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8006eb8 <APP_BLE_Init+0xec>)
 8006e80:	22a0      	movs	r2, #160	@ 0xa0
 8006e82:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8006e84:	2001      	movs	r0, #1
 8006e86:	f000 f9b7 	bl	80071f8 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8006e8a:	bf00      	nop
}
 8006e8c:	3740      	adds	r7, #64	@ 0x40
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bdb0      	pop	{r4, r5, r7, pc}
 8006e92:	bf00      	nop
 8006e94:	0800814c 	.word	0x0800814c
 8006e98:	080061b9 	.word	0x080061b9
 8006e9c:	200001e0 	.word	0x200001e0
 8006ea0:	08007361 	.word	0x08007361
 8006ea4:	08007395 	.word	0x08007395
 8006ea8:	20000261 	.word	0x20000261
 8006eac:	080073a5 	.word	0x080073a5
 8006eb0:	20000262 	.word	0x20000262
 8006eb4:	20000264 	.word	0x20000264
 8006eb8:	20000266 	.word	0x20000266

08006ebc <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08a      	sub	sp, #40	@ 0x28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8006ec4:	2392      	movs	r3, #146	@ 0x92
 8006ec6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	2bff      	cmp	r3, #255	@ 0xff
 8006ed6:	d076      	beq.n	8006fc6 <SVCCTL_App_Notification+0x10a>
 8006ed8:	2bff      	cmp	r3, #255	@ 0xff
 8006eda:	f300 8098 	bgt.w	800700e <SVCCTL_App_Notification+0x152>
 8006ede:	2b05      	cmp	r3, #5
 8006ee0:	d002      	beq.n	8006ee8 <SVCCTL_App_Notification+0x2c>
 8006ee2:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ee4:	d020      	beq.n	8006f28 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8006ee6:	e092      	b.n	800700e <SVCCTL_App_Notification+0x152>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	3302      	adds	r3, #2
 8006eec:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8007020 <SVCCTL_App_Notification+0x164>)
 8006ef8:	8adb      	ldrh	r3, [r3, #22]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d106      	bne.n	8006f0c <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8006efe:	4b48      	ldr	r3, [pc, #288]	@ (8007020 <SVCCTL_App_Notification+0x164>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8006f04:	4b46      	ldr	r3, [pc, #280]	@ (8007020 <SVCCTL_App_Notification+0x164>)
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8006f0c:	2001      	movs	r0, #1
 8006f0e:	f000 f973 	bl	80071f8 <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8006f12:	4b44      	ldr	r3, [pc, #272]	@ (8007024 <SVCCTL_App_Notification+0x168>)
 8006f14:	2201      	movs	r2, #1
 8006f16:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8006f18:	4b41      	ldr	r3, [pc, #260]	@ (8007020 <SVCCTL_App_Notification+0x164>)
 8006f1a:	8ada      	ldrh	r2, [r3, #22]
 8006f1c:	4b41      	ldr	r3, [pc, #260]	@ (8007024 <SVCCTL_App_Notification+0x168>)
 8006f1e:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 8006f20:	4840      	ldr	r0, [pc, #256]	@ (8007024 <SVCCTL_App_Notification+0x168>)
 8006f22:	f000 facd 	bl	80074c0 <P2PS_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8006f26:	e075      	b.n	8007014 <SVCCTL_App_Notification+0x158>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	3302      	adds	r3, #2
 8006f2c:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	2b0c      	cmp	r3, #12
 8006f34:	d005      	beq.n	8006f42 <SVCCTL_App_Notification+0x86>
 8006f36:	2b0c      	cmp	r3, #12
 8006f38:	dc41      	bgt.n	8006fbe <SVCCTL_App_Notification+0x102>
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d017      	beq.n	8006f6e <SVCCTL_App_Notification+0xb2>
 8006f3e:	2b03      	cmp	r3, #3
          break;
 8006f40:	e03d      	b.n	8006fbe <SVCCTL_App_Notification+0x102>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	3301      	adds	r3, #1
 8006f46:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 8006f48:	4b35      	ldr	r3, [pc, #212]	@ (8007020 <SVCCTL_App_Notification+0x164>)
 8006f4a:	8adb      	ldrh	r3, [r3, #22]
 8006f4c:	f107 020a 	add.w	r2, r7, #10
 8006f50:	f107 010b 	add.w	r1, r7, #11
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7fe fce3 	bl	8005920 <hci_le_read_phy>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8006f60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d12c      	bne.n	8006fc2 <SVCCTL_App_Notification+0x106>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 8006f68:	7afb      	ldrb	r3, [r7, #11]
 8006f6a:	2b02      	cmp	r3, #2
          break;
 8006f6c:	e029      	b.n	8006fc2 <SVCCTL_App_Notification+0x106>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	3301      	adds	r3, #1
 8006f72:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8006f74:	4b2a      	ldr	r3, [pc, #168]	@ (8007020 <SVCCTL_App_Notification+0x164>)
 8006f76:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fa f8e2 	bl	8001144 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8006f80:	4b27      	ldr	r3, [pc, #156]	@ (8007020 <SVCCTL_App_Notification+0x164>)
 8006f82:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006f86:	2b04      	cmp	r3, #4
 8006f88:	d104      	bne.n	8006f94 <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8006f8a:	4b25      	ldr	r3, [pc, #148]	@ (8007020 <SVCCTL_App_Notification+0x164>)
 8006f8c:	2206      	movs	r2, #6
 8006f8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8006f92:	e003      	b.n	8006f9c <SVCCTL_App_Notification+0xe0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8006f94:	4b22      	ldr	r3, [pc, #136]	@ (8007020 <SVCCTL_App_Notification+0x164>)
 8006f96:	2205      	movs	r2, #5
 8006f98:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8007020 <SVCCTL_App_Notification+0x164>)
 8006fa6:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8006fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8007024 <SVCCTL_App_Notification+0x168>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8006fae:	4b1c      	ldr	r3, [pc, #112]	@ (8007020 <SVCCTL_App_Notification+0x164>)
 8006fb0:	8ada      	ldrh	r2, [r3, #22]
 8006fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8007024 <SVCCTL_App_Notification+0x168>)
 8006fb4:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 8006fb6:	481b      	ldr	r0, [pc, #108]	@ (8007024 <SVCCTL_App_Notification+0x168>)
 8006fb8:	f000 fa82 	bl	80074c0 <P2PS_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8006fbc:	e002      	b.n	8006fc4 <SVCCTL_App_Notification+0x108>
          break;
 8006fbe:	bf00      	nop
 8006fc0:	e028      	b.n	8007014 <SVCCTL_App_Notification+0x158>
          break;
 8006fc2:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8006fc4:	e026      	b.n	8007014 <SVCCTL_App_Notification+0x158>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	3302      	adds	r3, #2
 8006fca:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d00f      	beq.n	8006ffa <SVCCTL_App_Notification+0x13e>
 8006fda:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	dc17      	bgt.n	8007012 <SVCCTL_App_Notification+0x156>
 8006fe2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fe6:	d00e      	beq.n	8007006 <SVCCTL_App_Notification+0x14a>
 8006fe8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fec:	dc11      	bgt.n	8007012 <SVCCTL_App_Notification+0x156>
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	d00b      	beq.n	800700a <SVCCTL_App_Notification+0x14e>
 8006ff2:	f240 4207 	movw	r2, #1031	@ 0x407
 8006ff6:	4293      	cmp	r3, r2
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8006ff8:	e008      	b.n	800700c <SVCCTL_App_Notification+0x150>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8006ffa:	4b09      	ldr	r3, [pc, #36]	@ (8007020 <SVCCTL_App_Notification+0x164>)
 8006ffc:	8adb      	ldrh	r3, [r3, #22]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fe fad5 	bl	80055ae <aci_gatt_confirm_indication>
        break;
 8007004:	e002      	b.n	800700c <SVCCTL_App_Notification+0x150>
          break;
 8007006:	bf00      	nop
 8007008:	e003      	b.n	8007012 <SVCCTL_App_Notification+0x156>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800700a:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800700c:	e001      	b.n	8007012 <SVCCTL_App_Notification+0x156>
      break;
 800700e:	bf00      	nop
 8007010:	e000      	b.n	8007014 <SVCCTL_App_Notification+0x158>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007012:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8007014:	2301      	movs	r3, #1
}
 8007016:	4618      	mov	r0, r3
 8007018:	3728      	adds	r7, #40	@ 0x28
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	200001e0 	.word	0x200001e0
 8007024:	20000268 	.word	0x20000268

08007028 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800702e:	4b06      	ldr	r3, [pc, #24]	@ (8007048 <Ble_Tl_Init+0x20>)
 8007030:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8007032:	4b06      	ldr	r3, [pc, #24]	@ (800704c <Ble_Tl_Init+0x24>)
 8007034:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8007036:	463b      	mov	r3, r7
 8007038:	4619      	mov	r1, r3
 800703a:	4805      	ldr	r0, [pc, #20]	@ (8007050 <Ble_Tl_Init+0x28>)
 800703c:	f7ff f8a0 	bl	8006180 <hci_init>

  return;
 8007040:	bf00      	nop
}
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	200300d8 	.word	0x200300d8
 800704c:	0800742f 	.word	0x0800742f
 8007050:	080073f7 	.word	0x080073f7

08007054 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8007054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007056:	b08d      	sub	sp, #52	@ 0x34
 8007058:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800705a:	2300      	movs	r3, #0
 800705c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800705e:	2392      	movs	r3, #146	@ 0x92
 8007060:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8007062:	f7fe fc39 	bl	80058d8 <hci_reset>
 8007066:	4603      	mov	r3, r0
 8007068:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800706a:	f000 f935 	bl	80072d8 <BleGetBdAddress>
 800706e:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, CONFIG_DATA_PUBLIC_ADDRESS_LEN, (uint8_t*) p_bd_addr);
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	2106      	movs	r1, #6
 8007074:	2000      	movs	r0, #0
 8007076:	f7fe faef 	bl	8005658 <aci_hal_write_config_data>
 800707a:	4603      	mov	r3, r0
 800707c:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	3305      	adds	r3, #5
 8007082:	781a      	ldrb	r2, [r3, #0]
 8007084:	4b56      	ldr	r3, [pc, #344]	@ (80071e0 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8007086:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	3304      	adds	r3, #4
 800708c:	781a      	ldrb	r2, [r3, #0]
 800708e:	4b54      	ldr	r3, [pc, #336]	@ (80071e0 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8007090:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	3303      	adds	r3, #3
 8007096:	781a      	ldrb	r2, [r3, #0]
 8007098:	4b51      	ldr	r3, [pc, #324]	@ (80071e0 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800709a:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	3302      	adds	r3, #2
 80070a0:	781a      	ldrb	r2, [r3, #0]
 80070a2:	4b4f      	ldr	r3, [pc, #316]	@ (80071e0 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 80070a4:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	3301      	adds	r3, #1
 80070aa:	781a      	ldrb	r2, [r3, #0]
 80070ac:	4b4c      	ldr	r3, [pc, #304]	@ (80071e0 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 80070ae:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	781a      	ldrb	r2, [r3, #0]
 80070b4:	4b4a      	ldr	r3, [pc, #296]	@ (80071e0 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 80070b6:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80070b8:	4a4a      	ldr	r2, [pc, #296]	@ (80071e4 <Ble_Hci_Gap_Gatt_Init+0x190>)
 80070ba:	2110      	movs	r1, #16
 80070bc:	2018      	movs	r0, #24
 80070be:	f7fe facb 	bl	8005658 <aci_hal_write_config_data>
 80070c2:	4603      	mov	r3, r0
 80070c4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80070c6:	4a48      	ldr	r2, [pc, #288]	@ (80071e8 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80070c8:	2110      	movs	r1, #16
 80070ca:	2008      	movs	r0, #8
 80070cc:	f7fe fac4 	bl	8005658 <aci_hal_write_config_data>
 80070d0:	4603      	mov	r3, r0
 80070d2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80070d4:	2118      	movs	r1, #24
 80070d6:	2001      	movs	r0, #1
 80070d8:	f7fe fb43 	bl	8005762 <aci_hal_set_tx_power_level>
 80070dc:	4603      	mov	r3, r0
 80070de:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80070e0:	f7fd ffb9 	bl	8005056 <aci_gatt_init>
 80070e4:	4603      	mov	r3, r0
 80070e6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80070e8:	2300      	movs	r3, #0
 80070ea:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
 80070ee:	f043 0301 	orr.w	r3, r3, #1
 80070f2:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d01f      	beq.n	800713a <Ble_Hci_Gap_Gatt_Init+0xe6>
  {
    const char *name = "P2PSRV1";
 80070fa:	4b3c      	ldr	r3, [pc, #240]	@ (80071ec <Ble_Hci_Gap_Gatt_Init+0x198>)
 80070fc:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80070fe:	1dba      	adds	r2, r7, #6
 8007100:	7bf8      	ldrb	r0, [r7, #15]
 8007102:	1cbb      	adds	r3, r7, #2
 8007104:	9301      	str	r3, [sp, #4]
 8007106:	1d3b      	adds	r3, r7, #4
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	4613      	mov	r3, r2
 800710c:	2207      	movs	r2, #7
 800710e:	2100      	movs	r1, #0
 8007110:	f7fd fe5e 	bl	8004dd0 <aci_gap_init>
 8007114:	4603      	mov	r3, r0
 8007116:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8007118:	88fc      	ldrh	r4, [r7, #6]
 800711a:	88bd      	ldrh	r5, [r7, #4]
 800711c:	68b8      	ldr	r0, [r7, #8]
 800711e:	f7f9 f82d 	bl	800017c <strlen>
 8007122:	4603      	mov	r3, r0
 8007124:	b2da      	uxtb	r2, r3
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	9300      	str	r3, [sp, #0]
 800712a:	4613      	mov	r3, r2
 800712c:	2200      	movs	r2, #0
 800712e:	4629      	mov	r1, r5
 8007130:	4620      	mov	r0, r4
 8007132:	f7fe f993 	bl	800545c <aci_gatt_update_char_value>
 8007136:	4603      	mov	r3, r0
 8007138:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800713a:	88f8      	ldrh	r0, [r7, #6]
 800713c:	8879      	ldrh	r1, [r7, #2]
 800713e:	463b      	mov	r3, r7
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	2302      	movs	r3, #2
 8007144:	2200      	movs	r2, #0
 8007146:	f7fe f989 	bl	800545c <aci_gatt_update_char_value>
 800714a:	4603      	mov	r3, r0
 800714c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800714e:	2202      	movs	r2, #2
 8007150:	2102      	movs	r1, #2
 8007152:	2000      	movs	r0, #0
 8007154:	f7fe fc62 	bl	8005a1c <hci_le_set_default_phy>
 8007158:	4603      	mov	r3, r0
 800715a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800715c:	4b24      	ldr	r3, [pc, #144]	@ (80071f0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800715e:	2201      	movs	r2, #1
 8007160:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8007162:	4b23      	ldr	r3, [pc, #140]	@ (80071f0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	4618      	mov	r0, r3
 8007168:	f7fd fd1a 	bl	8004ba0 <aci_gap_set_io_capability>
 800716c:	4603      	mov	r3, r0
 800716e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8007170:	4b1f      	ldr	r3, [pc, #124]	@ (80071f0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8007172:	2201      	movs	r2, #1
 8007174:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8007176:	4b1e      	ldr	r3, [pc, #120]	@ (80071f0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8007178:	2208      	movs	r2, #8
 800717a:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800717c:	4b1c      	ldr	r3, [pc, #112]	@ (80071f0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800717e:	2210      	movs	r2, #16
 8007180:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8007182:	4b1b      	ldr	r3, [pc, #108]	@ (80071f0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8007184:	2200      	movs	r2, #0
 8007186:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8007188:	4b19      	ldr	r3, [pc, #100]	@ (80071f0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800718a:	4a1a      	ldr	r2, [pc, #104]	@ (80071f4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 800718c:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800718e:	4b18      	ldr	r3, [pc, #96]	@ (80071f0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8007190:	2201      	movs	r2, #1
 8007192:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8007194:	4b16      	ldr	r3, [pc, #88]	@ (80071f0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8007196:	789c      	ldrb	r4, [r3, #2]
 8007198:	4b15      	ldr	r3, [pc, #84]	@ (80071f0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800719a:	785d      	ldrb	r5, [r3, #1]
 800719c:	4b14      	ldr	r3, [pc, #80]	@ (80071f0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800719e:	791b      	ldrb	r3, [r3, #4]
 80071a0:	4a13      	ldr	r2, [pc, #76]	@ (80071f0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80071a2:	7952      	ldrb	r2, [r2, #5]
 80071a4:	4912      	ldr	r1, [pc, #72]	@ (80071f0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80071a6:	78c9      	ldrb	r1, [r1, #3]
 80071a8:	4811      	ldr	r0, [pc, #68]	@ (80071f0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80071aa:	6880      	ldr	r0, [r0, #8]
 80071ac:	2600      	movs	r6, #0
 80071ae:	9604      	str	r6, [sp, #16]
 80071b0:	9003      	str	r0, [sp, #12]
 80071b2:	9102      	str	r1, [sp, #8]
 80071b4:	9201      	str	r2, [sp, #4]
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	2300      	movs	r3, #0
 80071ba:	2201      	movs	r2, #1
 80071bc:	4629      	mov	r1, r5
 80071be:	4620      	mov	r0, r4
 80071c0:	f7fd fd42 	bl	8004c48 <aci_gap_set_authentication_requirement>
 80071c4:	4603      	mov	r3, r0
 80071c6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80071c8:	4b09      	ldr	r3, [pc, #36]	@ (80071f0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80071ca:	789b      	ldrb	r3, [r3, #2]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d003      	beq.n	80071d8 <Ble_Hci_Gap_Gatt_Init+0x184>
  {
    ret = aci_gap_configure_whitelist();
 80071d0:	f7fd ff1d 	bl	800500e <aci_gap_configure_filter_accept_list>
 80071d4:	4603      	mov	r3, r0
 80071d6:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 80071d8:	bf00      	nop
 80071da:	371c      	adds	r7, #28
 80071dc:	46bd      	mov	sp, r7
 80071de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071e0:	20000014 	.word	0x20000014
 80071e4:	08008348 	.word	0x08008348
 80071e8:	08008358 	.word	0x08008358
 80071ec:	08008188 	.word	0x08008188
 80071f0:	200001e0 	.word	0x200001e0
 80071f4:	0001b207 	.word	0x0001b207

080071f8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b08c      	sub	sp, #48	@ 0x30
 80071fc:	af08      	add	r7, sp, #32
 80071fe:	4603      	mov	r3, r0
 8007200:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007202:	2392      	movs	r3, #146	@ 0x92
 8007204:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d106      	bne.n	800721a <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800720c:	4b2b      	ldr	r3, [pc, #172]	@ (80072bc <Adv_Request+0xc4>)
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8007212:	4b2b      	ldr	r3, [pc, #172]	@ (80072c0 <Adv_Request+0xc8>)
 8007214:	881b      	ldrh	r3, [r3, #0]
 8007216:	81bb      	strh	r3, [r7, #12]
 8007218:	e005      	b.n	8007226 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800721a:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 800721e:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8007220:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8007224:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8007226:	4b27      	ldr	r3, [pc, #156]	@ (80072c4 <Adv_Request+0xcc>)
 8007228:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800722c:	4618      	mov	r0, r3
 800722e:	f7f9 ff89 	bl	8001144 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 8007232:	79fb      	ldrb	r3, [r7, #7]
 8007234:	2b02      	cmp	r3, #2
 8007236:	d10d      	bne.n	8007254 <Adv_Request+0x5c>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8007238:	4b22      	ldr	r3, [pc, #136]	@ (80072c4 <Adv_Request+0xcc>)
 800723a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800723e:	2b01      	cmp	r3, #1
 8007240:	d004      	beq.n	800724c <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8007242:	4b20      	ldr	r3, [pc, #128]	@ (80072c4 <Adv_Request+0xcc>)
 8007244:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007248:	2b02      	cmp	r3, #2
 800724a:	d103      	bne.n	8007254 <Adv_Request+0x5c>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 800724c:	f7fd fb8a 	bl	8004964 <aci_gap_set_non_discoverable>
 8007250:	4603      	mov	r3, r0
 8007252:	72fb      	strb	r3, [r7, #11]
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8007254:	4a1b      	ldr	r2, [pc, #108]	@ (80072c4 <Adv_Request+0xcc>)
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 800725c:	4b19      	ldr	r3, [pc, #100]	@ (80072c4 <Adv_Request+0xcc>)
 800725e:	7e1b      	ldrb	r3, [r3, #24]
 8007260:	89ba      	ldrh	r2, [r7, #12]
 8007262:	89f9      	ldrh	r1, [r7, #14]
 8007264:	2000      	movs	r0, #0
 8007266:	9006      	str	r0, [sp, #24]
 8007268:	2000      	movs	r0, #0
 800726a:	9005      	str	r0, [sp, #20]
 800726c:	4816      	ldr	r0, [pc, #88]	@ (80072c8 <Adv_Request+0xd0>)
 800726e:	9004      	str	r0, [sp, #16]
 8007270:	9303      	str	r3, [sp, #12]
 8007272:	4b16      	ldr	r3, [pc, #88]	@ (80072cc <Adv_Request+0xd4>)
 8007274:	9302      	str	r3, [sp, #8]
 8007276:	2308      	movs	r3, #8
 8007278:	9301      	str	r3, [sp, #4]
 800727a:	2300      	movs	r3, #0
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	2300      	movs	r3, #0
 8007280:	2000      	movs	r0, #0
 8007282:	f7fd fb93 	bl	80049ac <aci_gap_set_discoverable>
 8007286:	4603      	mov	r3, r0
 8007288:	72fb      	strb	r3, [r7, #11]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 800728a:	4911      	ldr	r1, [pc, #68]	@ (80072d0 <Adv_Request+0xd8>)
 800728c:	200e      	movs	r0, #14
 800728e:	f7fd fe4c 	bl	8004f2a <aci_gap_update_adv_data>
 8007292:	4603      	mov	r3, r0
 8007294:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 8007296:	7afb      	ldrb	r3, [r7, #11]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10a      	bne.n	80072b2 <Adv_Request+0xba>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
    }
  }
  else
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 800729c:	79fb      	ldrb	r3, [r7, #7]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d107      	bne.n	80072b2 <Adv_Request+0xba>
    {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
      /* Start Timer to STOP ADV - TIMEOUT - and next Restart Low Power Advertising */
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 80072a2:	4b08      	ldr	r3, [pc, #32]	@ (80072c4 <Adv_Request+0xcc>)
 80072a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80072a8:	490a      	ldr	r1, [pc, #40]	@ (80072d4 <Adv_Request+0xdc>)
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7f9 ffce 	bl	800124c <HW_TS_Start>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 80072b0:	bf00      	nop
 80072b2:	bf00      	nop
}
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	20000264 	.word	0x20000264
 80072c0:	20000266 	.word	0x20000266
 80072c4:	200001e0 	.word	0x200001e0
 80072c8:	200001f9 	.word	0x200001f9
 80072cc:	08008368 	.word	0x08008368
 80072d0:	20000014 	.word	0x20000014
 80072d4:	0001e046 	.word	0x0001e046

080072d8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80072de:	f7ff fd51 	bl	8006d84 <LL_FLASH_GetUDN>
 80072e2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ea:	d023      	beq.n	8007334 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80072ec:	f7ff fd62 	bl	8006db4 <LL_FLASH_GetSTCompanyID>
 80072f0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80072f2:	f7ff fd53 	bl	8006d9c <LL_FLASH_GetDeviceID>
 80072f6:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	b2da      	uxtb	r2, r3
 80072fc:	4b16      	ldr	r3, [pc, #88]	@ (8007358 <BleGetBdAddress+0x80>)
 80072fe:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	0a1b      	lsrs	r3, r3, #8
 8007304:	b2da      	uxtb	r2, r3
 8007306:	4b14      	ldr	r3, [pc, #80]	@ (8007358 <BleGetBdAddress+0x80>)
 8007308:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	b2da      	uxtb	r2, r3
 800730e:	4b12      	ldr	r3, [pc, #72]	@ (8007358 <BleGetBdAddress+0x80>)
 8007310:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	b2da      	uxtb	r2, r3
 8007316:	4b10      	ldr	r3, [pc, #64]	@ (8007358 <BleGetBdAddress+0x80>)
 8007318:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	0a1b      	lsrs	r3, r3, #8
 800731e:	b2da      	uxtb	r2, r3
 8007320:	4b0d      	ldr	r3, [pc, #52]	@ (8007358 <BleGetBdAddress+0x80>)
 8007322:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	0c1b      	lsrs	r3, r3, #16
 8007328:	b2da      	uxtb	r2, r3
 800732a:	4b0b      	ldr	r3, [pc, #44]	@ (8007358 <BleGetBdAddress+0x80>)
 800732c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800732e:	4b0a      	ldr	r3, [pc, #40]	@ (8007358 <BleGetBdAddress+0x80>)
 8007330:	617b      	str	r3, [r7, #20]
 8007332:	e00b      	b.n	800734c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8007334:	2000      	movs	r0, #0
 8007336:	f7ff fc3f 	bl	8006bb8 <OTP_Read>
 800733a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d002      	beq.n	8007348 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	617b      	str	r3, [r7, #20]
 8007346:	e001      	b.n	800734c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8007348:	4b04      	ldr	r3, [pc, #16]	@ (800735c <BleGetBdAddress+0x84>)
 800734a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800734c:	697b      	ldr	r3, [r7, #20]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3718      	adds	r7, #24
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	200001d8 	.word	0x200001d8
 800735c:	08008340 	.word	0x08008340

08007360 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8007366:	4b0a      	ldr	r3, [pc, #40]	@ (8007390 <Adv_Cancel+0x30>)
 8007368:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800736c:	2b05      	cmp	r3, #5
 800736e:	d00a      	beq.n	8007386 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007370:	2392      	movs	r3, #146	@ 0x92
 8007372:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8007374:	f7fd faf6 	bl	8004964 <aci_gap_set_non_discoverable>
 8007378:	4603      	mov	r3, r0
 800737a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800737c:	4b04      	ldr	r3, [pc, #16]	@ (8007390 <Adv_Cancel+0x30>)
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8007384:	bf00      	nop
 8007386:	bf00      	nop
}
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	200001e0 	.word	0x200001e0

08007394 <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8007398:	2100      	movs	r1, #0
 800739a:	2001      	movs	r0, #1
 800739c:	f000 fcd0 	bl	8007d40 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 80073a0:	bf00      	nop
}
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 80073a4:	b480      	push	{r7}
 80073a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */

  /* USER CODE END Switch_OFF_GPIO */
}
 80073a8:	bf00      	nop
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b082      	sub	sp, #8
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80073ba:	2100      	movs	r1, #0
 80073bc:	2002      	movs	r0, #2
 80073be:	f000 fcbf 	bl	8007d40 <UTIL_SEQ_SetTask>

  return;
 80073c2:	bf00      	nop
}
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b082      	sub	sp, #8
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80073d2:	2001      	movs	r0, #1
 80073d4:	f000 fd20 	bl	8007e18 <UTIL_SEQ_SetEvt>

  return;
 80073d8:	bf00      	nop
}
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80073e8:	2001      	movs	r0, #1
 80073ea:	f000 fd35 	bl	8007e58 <UTIL_SEQ_WaitEvt>

  return;
 80073ee:	bf00      	nop
}
 80073f0:	3708      	adds	r7, #8
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	3308      	adds	r3, #8
 8007408:	4618      	mov	r0, r3
 800740a:	f7fe fd73 	bl	8005ef4 <SVCCTL_UserEvtRx>
 800740e:	4603      	mov	r3, r0
 8007410:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8007412:	7afb      	ldrb	r3, [r7, #11]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d003      	beq.n	8007420 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2201      	movs	r2, #1
 800741c:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800741e:	e003      	b.n	8007428 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	701a      	strb	r2, [r3, #0]
  return;
 8007426:	bf00      	nop
}
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b084      	sub	sp, #16
 8007432:	af00      	add	r7, sp, #0
 8007434:	4603      	mov	r3, r0
 8007436:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8007438:	79fb      	ldrb	r3, [r7, #7]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d002      	beq.n	8007444 <BLE_StatusNot+0x16>
 800743e:	2b01      	cmp	r3, #1
 8007440:	d006      	beq.n	8007450 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8007442:	e00b      	b.n	800745c <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007444:	2303      	movs	r3, #3
 8007446:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 fca5 	bl	8007d98 <UTIL_SEQ_PauseTask>
      break;
 800744e:	e005      	b.n	800745c <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007450:	2303      	movs	r3, #3
 8007452:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 fcbf 	bl	8007dd8 <UTIL_SEQ_ResumeTask>
      break;
 800745a:	bf00      	nop
  }

  return;
 800745c:	bf00      	nop
}
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	2b03      	cmp	r3, #3
 8007472:	d006      	beq.n	8007482 <P2PS_STM_App_Notification+0x1e>
 8007474:	2b03      	cmp	r3, #3
 8007476:	dc18      	bgt.n	80074aa <P2PS_STM_App_Notification+0x46>
 8007478:	2b00      	cmp	r3, #0
 800747a:	d018      	beq.n	80074ae <P2PS_STM_App_Notification+0x4a>
 800747c:	2b01      	cmp	r3, #1
 800747e:	d018      	beq.n	80074b2 <P2PS_STM_App_Notification+0x4e>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8007480:	e013      	b.n	80074aa <P2PS_STM_App_Notification+0x46>
if (pNotification->DataTransfered.pPayload[1] == 0x01) {
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	3301      	adds	r3, #1
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d106      	bne.n	800749c <P2PS_STM_App_Notification+0x38>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800748e:	2201      	movs	r2, #1
 8007490:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007494:	4809      	ldr	r0, [pc, #36]	@ (80074bc <P2PS_STM_App_Notification+0x58>)
 8007496:	f7fa fe55 	bl	8002144 <HAL_GPIO_WritePin>
      break;
 800749a:	e00b      	b.n	80074b4 <P2PS_STM_App_Notification+0x50>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800749c:	2200      	movs	r2, #0
 800749e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80074a2:	4806      	ldr	r0, [pc, #24]	@ (80074bc <P2PS_STM_App_Notification+0x58>)
 80074a4:	f7fa fe4e 	bl	8002144 <HAL_GPIO_WritePin>
      break;
 80074a8:	e004      	b.n	80074b4 <P2PS_STM_App_Notification+0x50>
      break;
 80074aa:	bf00      	nop
 80074ac:	e002      	b.n	80074b4 <P2PS_STM_App_Notification+0x50>
      break;
 80074ae:	bf00      	nop
 80074b0:	e000      	b.n	80074b4 <P2PS_STM_App_Notification+0x50>
      break;
 80074b2:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 80074b4:	bf00      	nop
}
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	48000400 	.word	0x48000400

080074c0 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d002      	beq.n	80074d6 <P2PS_APP_Notification+0x16>
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d002      	beq.n	80074da <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 80074d4:	e002      	b.n	80074dc <P2PS_APP_Notification+0x1c>
    break;
 80074d6:	bf00      	nop
 80074d8:	e000      	b.n	80074dc <P2PS_APP_Notification+0x1c>
    break;
 80074da:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 80074dc:	bf00      	nop
}
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 80074e8:	b480      	push	{r7}
 80074ea:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 80074ec:	bf00      	nop
}
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
	...

080074f8 <LL_PWR_EnableBootC2>:
{
 80074f8:	b480      	push	{r7}
 80074fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80074fc:	4b05      	ldr	r3, [pc, #20]	@ (8007514 <LL_PWR_EnableBootC2+0x1c>)
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	4a04      	ldr	r2, [pc, #16]	@ (8007514 <LL_PWR_EnableBootC2+0x1c>)
 8007502:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007506:	60d3      	str	r3, [r2, #12]
}
 8007508:	bf00      	nop
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	58000400 	.word	0x58000400

08007518 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8007520:	4b06      	ldr	r3, [pc, #24]	@ (800753c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007522:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007526:	4905      	ldr	r1, [pc, #20]	@ (800753c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4313      	orrs	r3, r2
 800752c:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	58000800 	.word	0x58000800

08007540 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007548:	4b05      	ldr	r3, [pc, #20]	@ (8007560 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800754a:	6a1a      	ldr	r2, [r3, #32]
 800754c:	4904      	ldr	r1, [pc, #16]	@ (8007560 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4313      	orrs	r3, r2
 8007552:	620b      	str	r3, [r1, #32]
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	58000800 	.word	0x58000800

08007564 <LL_AHB3_GRP1_EnableClock>:
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800756c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007570:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007572:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4313      	orrs	r3, r2
 800757a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800757c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007580:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4013      	ands	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007588:	68fb      	ldr	r3, [r7, #12]
}
 800758a:	bf00      	nop
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8007596:	b480      	push	{r7}
 8007598:	b085      	sub	sp, #20
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800759e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075a2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80075a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80075b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075b6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4013      	ands	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80075c0:	68fb      	ldr	r3, [r7, #12]
}
 80075c2:	bf00      	nop
 80075c4:	3714      	adds	r7, #20
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b083      	sub	sp, #12
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	601a      	str	r2, [r3, #0]
}
 80075e2:	bf00      	nop
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b083      	sub	sp, #12
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f043 0201 	orr.w	r2, r3, #1
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	601a      	str	r2, [r3, #0]
}
 8007602:	bf00      	nop
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	041b      	lsls	r3, r3, #16
 8007620:	43db      	mvns	r3, r3
 8007622:	401a      	ands	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	605a      	str	r2, [r3, #4]
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685a      	ldr	r2, [r3, #4]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	041b      	lsls	r3, r3, #16
 8007646:	431a      	orrs	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	605a      	str	r2, [r3, #4]
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	43db      	mvns	r3, r3
 800766a:	401a      	ands	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	605a      	str	r2, [r3, #4]
}
 8007670:	bf00      	nop
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	609a      	str	r2, [r3, #8]
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	041a      	lsls	r2, r3, #16
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	609a      	str	r2, [r3, #8]
}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68da      	ldr	r2, [r3, #12]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	4013      	ands	r3, r2
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d101      	bne.n	80076d2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80076ce:	2301      	movs	r3, #1
 80076d0:	e000      	b.n	80076d4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	69da      	ldr	r2, [r3, #28]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	4013      	ands	r3, r2
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d101      	bne.n	80076fc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80076f8:	2301      	movs	r3, #1
 80076fa:	e000      	b.n	80076fe <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
	...

0800770c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8007710:	2102      	movs	r1, #2
 8007712:	4818      	ldr	r0, [pc, #96]	@ (8007774 <HW_IPCC_Rx_Handler+0x68>)
 8007714:	f7ff ffe4 	bl	80076e0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d008      	beq.n	8007730 <HW_IPCC_Rx_Handler+0x24>
 800771e:	4b15      	ldr	r3, [pc, #84]	@ (8007774 <HW_IPCC_Rx_Handler+0x68>)
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f003 0302 	and.w	r3, r3, #2
 8007726:	2b00      	cmp	r3, #0
 8007728:	d102      	bne.n	8007730 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800772a:	f000 f925 	bl	8007978 <HW_IPCC_SYS_EvtHandler>
 800772e:	e01e      	b.n	800776e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8007730:	2101      	movs	r1, #1
 8007732:	4810      	ldr	r0, [pc, #64]	@ (8007774 <HW_IPCC_Rx_Handler+0x68>)
 8007734:	f7ff ffd4 	bl	80076e0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d008      	beq.n	8007750 <HW_IPCC_Rx_Handler+0x44>
 800773e:	4b0d      	ldr	r3, [pc, #52]	@ (8007774 <HW_IPCC_Rx_Handler+0x68>)
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	2b00      	cmp	r3, #0
 8007748:	d102      	bne.n	8007750 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800774a:	f000 f899 	bl	8007880 <HW_IPCC_BLE_EvtHandler>
 800774e:	e00e      	b.n	800776e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8007750:	2108      	movs	r1, #8
 8007752:	4808      	ldr	r0, [pc, #32]	@ (8007774 <HW_IPCC_Rx_Handler+0x68>)
 8007754:	f7ff ffc4 	bl	80076e0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d008      	beq.n	8007770 <HW_IPCC_Rx_Handler+0x64>
 800775e:	4b05      	ldr	r3, [pc, #20]	@ (8007774 <HW_IPCC_Rx_Handler+0x68>)
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f003 0308 	and.w	r3, r3, #8
 8007766:	2b00      	cmp	r3, #0
 8007768:	d102      	bne.n	8007770 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800776a:	f000 f97d 	bl	8007a68 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800776e:	bf00      	nop
 8007770:	bf00      	nop
}
 8007772:	bd80      	pop	{r7, pc}
 8007774:	58000c00 	.word	0x58000c00

08007778 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800777c:	2102      	movs	r1, #2
 800777e:	4818      	ldr	r0, [pc, #96]	@ (80077e0 <HW_IPCC_Tx_Handler+0x68>)
 8007780:	f7ff ff99 	bl	80076b6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d108      	bne.n	800779c <HW_IPCC_Tx_Handler+0x24>
 800778a:	4b15      	ldr	r3, [pc, #84]	@ (80077e0 <HW_IPCC_Tx_Handler+0x68>)
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d102      	bne.n	800779c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8007796:	f000 f8d3 	bl	8007940 <HW_IPCC_SYS_CmdEvtHandler>
 800779a:	e01e      	b.n	80077da <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800779c:	2108      	movs	r1, #8
 800779e:	4810      	ldr	r0, [pc, #64]	@ (80077e0 <HW_IPCC_Tx_Handler+0x68>)
 80077a0:	f7ff ff89 	bl	80076b6 <LL_C1_IPCC_IsActiveFlag_CHx>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d108      	bne.n	80077bc <HW_IPCC_Tx_Handler+0x44>
 80077aa:	4b0d      	ldr	r3, [pc, #52]	@ (80077e0 <HW_IPCC_Tx_Handler+0x68>)
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d102      	bne.n	80077bc <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 80077b6:	f000 f919 	bl	80079ec <HW_IPCC_MM_FreeBufHandler>
 80077ba:	e00e      	b.n	80077da <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80077bc:	2120      	movs	r1, #32
 80077be:	4808      	ldr	r0, [pc, #32]	@ (80077e0 <HW_IPCC_Tx_Handler+0x68>)
 80077c0:	f7ff ff79 	bl	80076b6 <LL_C1_IPCC_IsActiveFlag_CHx>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d108      	bne.n	80077dc <HW_IPCC_Tx_Handler+0x64>
 80077ca:	4b05      	ldr	r3, [pc, #20]	@ (80077e0 <HW_IPCC_Tx_Handler+0x68>)
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d102      	bne.n	80077dc <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80077d6:	f000 f85f 	bl	8007898 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80077da:	bf00      	nop
 80077dc:	bf00      	nop
}
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	58000c00 	.word	0x58000c00

080077e4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80077e8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80077ec:	f7ff fed3 	bl	8007596 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80077f0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80077f4:	f7ff fea4 	bl	8007540 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80077f8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80077fc:	f7ff fe8c 	bl	8007518 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8007800:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8007802:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8007804:	f7ff fe78 	bl	80074f8 <LL_PWR_EnableBootC2>

  return;
 8007808:	bf00      	nop
}
 800780a:	bd80      	pop	{r7, pc}

0800780c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800780c:	b580      	push	{r7, lr}
 800780e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8007810:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8007814:	f7ff fea6 	bl	8007564 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8007818:	4806      	ldr	r0, [pc, #24]	@ (8007834 <HW_IPCC_Init+0x28>)
 800781a:	f7ff fee8 	bl	80075ee <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800781e:	4805      	ldr	r0, [pc, #20]	@ (8007834 <HW_IPCC_Init+0x28>)
 8007820:	f7ff fed5 	bl	80075ce <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8007824:	202c      	movs	r0, #44	@ 0x2c
 8007826:	f7fa f9ed 	bl	8001c04 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800782a:	202d      	movs	r0, #45	@ 0x2d
 800782c:	f7fa f9ea 	bl	8001c04 <HAL_NVIC_EnableIRQ>

  return;
 8007830:	bf00      	nop
}
 8007832:	bd80      	pop	{r7, pc}
 8007834:	58000c00 	.word	0x58000c00

08007838 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800783e:	f3ef 8310 	mrs	r3, PRIMASK
 8007842:	607b      	str	r3, [r7, #4]
  return(result);
 8007844:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8007846:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8007848:	b672      	cpsid	i
}
 800784a:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800784c:	2101      	movs	r1, #1
 800784e:	4806      	ldr	r0, [pc, #24]	@ (8007868 <HW_IPCC_BLE_Init+0x30>)
 8007850:	f7ff ff02 	bl	8007658 <LL_C1_IPCC_EnableReceiveChannel>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	f383 8810 	msr	PRIMASK, r3
}
 800785e:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8007860:	bf00      	nop
}
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	58000c00 	.word	0x58000c00

0800786c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8007870:	2101      	movs	r1, #1
 8007872:	4802      	ldr	r0, [pc, #8]	@ (800787c <HW_IPCC_BLE_SendCmd+0x10>)
 8007874:	f7ff ff10 	bl	8007698 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8007878:	bf00      	nop
}
 800787a:	bd80      	pop	{r7, pc}
 800787c:	58000c00 	.word	0x58000c00

08007880 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8007884:	f7fe ffe0 	bl	8006848 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8007888:	2101      	movs	r1, #1
 800788a:	4802      	ldr	r0, [pc, #8]	@ (8007894 <HW_IPCC_BLE_EvtHandler+0x14>)
 800788c:	f7ff fef6 	bl	800767c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007890:	bf00      	nop
}
 8007892:	bd80      	pop	{r7, pc}
 8007894:	58000c00 	.word	0x58000c00

08007898 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800789e:	f3ef 8310 	mrs	r3, PRIMASK
 80078a2:	607b      	str	r3, [r7, #4]
  return(result);
 80078a4:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80078a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80078a8:	b672      	cpsid	i
}
 80078aa:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80078ac:	2120      	movs	r1, #32
 80078ae:	4807      	ldr	r0, [pc, #28]	@ (80078cc <HW_IPCC_BLE_AclDataEvtHandler+0x34>)
 80078b0:	f7ff fec0 	bl	8007634 <LL_C1_IPCC_DisableTransmitChannel>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	f383 8810 	msr	PRIMASK, r3
}
 80078be:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_BLE_AclDataAckNot();
 80078c0:	f7fe fff2 	bl	80068a8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80078c4:	bf00      	nop
}
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	58000c00 	.word	0x58000c00

080078d0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078d6:	f3ef 8310 	mrs	r3, PRIMASK
 80078da:	607b      	str	r3, [r7, #4]
  return(result);
 80078dc:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80078de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80078e0:	b672      	cpsid	i
}
 80078e2:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80078e4:	2102      	movs	r1, #2
 80078e6:	4806      	ldr	r0, [pc, #24]	@ (8007900 <HW_IPCC_SYS_Init+0x30>)
 80078e8:	f7ff feb6 	bl	8007658 <LL_C1_IPCC_EnableReceiveChannel>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	f383 8810 	msr	PRIMASK, r3
}
 80078f6:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 80078f8:	bf00      	nop
}
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	58000c00 	.word	0x58000c00

08007904 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800790a:	2102      	movs	r1, #2
 800790c:	480b      	ldr	r0, [pc, #44]	@ (800793c <HW_IPCC_SYS_SendCmd+0x38>)
 800790e:	f7ff fec3 	bl	8007698 <LL_C1_IPCC_SetFlag_CHx>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007912:	f3ef 8310 	mrs	r3, PRIMASK
 8007916:	607b      	str	r3, [r7, #4]
  return(result);
 8007918:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800791a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800791c:	b672      	cpsid	i
}
 800791e:	bf00      	nop
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007920:	2102      	movs	r1, #2
 8007922:	4806      	ldr	r0, [pc, #24]	@ (800793c <HW_IPCC_SYS_SendCmd+0x38>)
 8007924:	f7ff fe73 	bl	800760e <LL_C1_IPCC_EnableTransmitChannel>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f383 8810 	msr	PRIMASK, r3
}
 8007932:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8007934:	bf00      	nop
}
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	58000c00 	.word	0x58000c00

08007940 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007946:	f3ef 8310 	mrs	r3, PRIMASK
 800794a:	607b      	str	r3, [r7, #4]
  return(result);
 800794c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800794e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8007950:	b672      	cpsid	i
}
 8007952:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007954:	2102      	movs	r1, #2
 8007956:	4807      	ldr	r0, [pc, #28]	@ (8007974 <HW_IPCC_SYS_CmdEvtHandler+0x34>)
 8007958:	f7ff fe6c 	bl	8007634 <LL_C1_IPCC_DisableTransmitChannel>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	f383 8810 	msr	PRIMASK, r3
}
 8007966:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_SYS_CmdEvtNot();
 8007968:	f7fe ffee 	bl	8006948 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800796c:	bf00      	nop
}
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	58000c00 	.word	0x58000c00

08007978 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800797c:	f7fe fffa 	bl	8006974 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8007980:	2102      	movs	r1, #2
 8007982:	4802      	ldr	r0, [pc, #8]	@ (800798c <HW_IPCC_SYS_EvtHandler+0x14>)
 8007984:	f7ff fe7a 	bl	800767c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007988:	bf00      	nop
}
 800798a:	bd80      	pop	{r7, pc}
 800798c:	58000c00 	.word	0x58000c00

08007990 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8007998:	2108      	movs	r1, #8
 800799a:	4812      	ldr	r0, [pc, #72]	@ (80079e4 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800799c:	f7ff fe8b 	bl	80076b6 <LL_C1_IPCC_IsActiveFlag_CHx>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d013      	beq.n	80079ce <HW_IPCC_MM_SendFreeBuf+0x3e>
  {
    FreeBufCb = cb;
 80079a6:	4a10      	ldr	r2, [pc, #64]	@ (80079e8 <HW_IPCC_MM_SendFreeBuf+0x58>)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079ac:	f3ef 8310 	mrs	r3, PRIMASK
 80079b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80079b2:	68fb      	ldr	r3, [r7, #12]
    UTILS_ENTER_CRITICAL_SECTION();
 80079b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80079b6:	b672      	cpsid	i
}
 80079b8:	bf00      	nop
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80079ba:	2108      	movs	r1, #8
 80079bc:	4809      	ldr	r0, [pc, #36]	@ (80079e4 <HW_IPCC_MM_SendFreeBuf+0x54>)
 80079be:	f7ff fe26 	bl	800760e <LL_C1_IPCC_EnableTransmitChannel>
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	f383 8810 	msr	PRIMASK, r3
}
 80079cc:	e005      	b.n	80079da <HW_IPCC_MM_SendFreeBuf+0x4a>
    UTILS_EXIT_CRITICAL_SECTION();
  }
  else
  {
    cb();
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4798      	blx	r3

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80079d2:	2108      	movs	r1, #8
 80079d4:	4803      	ldr	r0, [pc, #12]	@ (80079e4 <HW_IPCC_MM_SendFreeBuf+0x54>)
 80079d6:	f7ff fe5f 	bl	8007698 <LL_C1_IPCC_SetFlag_CHx>
  }

  return;
 80079da:	bf00      	nop
}
 80079dc:	3718      	adds	r7, #24
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	58000c00 	.word	0x58000c00
 80079e8:	2000026c 	.word	0x2000026c

080079ec <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079f2:	f3ef 8310 	mrs	r3, PRIMASK
 80079f6:	607b      	str	r3, [r7, #4]
  return(result);
 80079f8:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80079fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80079fc:	b672      	cpsid	i
}
 80079fe:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007a00:	2108      	movs	r1, #8
 8007a02:	480a      	ldr	r0, [pc, #40]	@ (8007a2c <HW_IPCC_MM_FreeBufHandler+0x40>)
 8007a04:	f7ff fe16 	bl	8007634 <LL_C1_IPCC_DisableTransmitChannel>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f383 8810 	msr	PRIMASK, r3
}
 8007a12:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  FreeBufCb();
 8007a14:	4b06      	ldr	r3, [pc, #24]	@ (8007a30 <HW_IPCC_MM_FreeBufHandler+0x44>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007a1a:	2108      	movs	r1, #8
 8007a1c:	4803      	ldr	r0, [pc, #12]	@ (8007a2c <HW_IPCC_MM_FreeBufHandler+0x40>)
 8007a1e:	f7ff fe3b 	bl	8007698 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8007a22:	bf00      	nop
}
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	58000c00 	.word	0x58000c00
 8007a30:	2000026c 	.word	0x2000026c

08007a34 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8007a3e:	607b      	str	r3, [r7, #4]
  return(result);
 8007a40:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8007a42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8007a44:	b672      	cpsid	i
}
 8007a46:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8007a48:	2108      	movs	r1, #8
 8007a4a:	4806      	ldr	r0, [pc, #24]	@ (8007a64 <HW_IPCC_TRACES_Init+0x30>)
 8007a4c:	f7ff fe04 	bl	8007658 <LL_C1_IPCC_EnableReceiveChannel>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	f383 8810 	msr	PRIMASK, r3
}
 8007a5a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8007a5c:	bf00      	nop
}
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	58000c00 	.word	0x58000c00

08007a68 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8007a6c:	f7ff f82a 	bl	8006ac4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8007a70:	2108      	movs	r1, #8
 8007a72:	4802      	ldr	r0, [pc, #8]	@ (8007a7c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8007a74:	f7ff fe02 	bl	800767c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007a78:	bf00      	nop
}
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	58000c00 	.word	0x58000c00

08007a80 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8007a80:	b480      	push	{r7}
 8007a82:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8007a84:	4b05      	ldr	r3, [pc, #20]	@ (8007a9c <UTIL_LPM_Init+0x1c>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8007a8a:	4b05      	ldr	r3, [pc, #20]	@ (8007aa0 <UTIL_LPM_Init+0x20>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8007a90:	bf00      	nop
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	20000270 	.word	0x20000270
 8007aa0:	20000274 	.word	0x20000274

08007aa4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b087      	sub	sp, #28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	460b      	mov	r3, r1
 8007aae:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ab4:	613b      	str	r3, [r7, #16]
  return(result);
 8007ab6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8007ab8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007aba:	b672      	cpsid	i
}
 8007abc:	bf00      	nop
  
  switch(state)
 8007abe:	78fb      	ldrb	r3, [r7, #3]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d008      	beq.n	8007ad6 <UTIL_LPM_SetOffMode+0x32>
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d10e      	bne.n	8007ae6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8007ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8007b00 <UTIL_LPM_SetOffMode+0x5c>)
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8007b00 <UTIL_LPM_SetOffMode+0x5c>)
 8007ad2:	6013      	str	r3, [r2, #0]
      break;
 8007ad4:	e008      	b.n	8007ae8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	43da      	mvns	r2, r3
 8007ada:	4b09      	ldr	r3, [pc, #36]	@ (8007b00 <UTIL_LPM_SetOffMode+0x5c>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4013      	ands	r3, r2
 8007ae0:	4a07      	ldr	r2, [pc, #28]	@ (8007b00 <UTIL_LPM_SetOffMode+0x5c>)
 8007ae2:	6013      	str	r3, [r2, #0]
      break;
 8007ae4:	e000      	b.n	8007ae8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8007ae6:	bf00      	nop
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f383 8810 	msr	PRIMASK, r3
}
 8007af2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8007af4:	bf00      	nop
 8007af6:	371c      	adds	r7, #28
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	20000274 	.word	0x20000274

08007b04 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b090      	sub	sp, #64	@ 0x40
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8007b0c:	4b73      	ldr	r3, [pc, #460]	@ (8007cdc <UTIL_SEQ_Run+0x1d8>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8007b12:	4b72      	ldr	r3, [pc, #456]	@ (8007cdc <UTIL_SEQ_Run+0x1d8>)
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4013      	ands	r3, r2
 8007b1a:	4a70      	ldr	r2, [pc, #448]	@ (8007cdc <UTIL_SEQ_Run+0x1d8>)
 8007b1c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8007b1e:	4b70      	ldr	r3, [pc, #448]	@ (8007ce0 <UTIL_SEQ_Run+0x1dc>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8007b24:	4b6f      	ldr	r3, [pc, #444]	@ (8007ce4 <UTIL_SEQ_Run+0x1e0>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8007b2a:	4b6f      	ldr	r3, [pc, #444]	@ (8007ce8 <UTIL_SEQ_Run+0x1e4>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8007b30:	4b6e      	ldr	r3, [pc, #440]	@ (8007cec <UTIL_SEQ_Run+0x1e8>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8007b36:	e08d      	b.n	8007c54 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8007b3c:	e002      	b.n	8007b44 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8007b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b40:	3301      	adds	r3, #1
 8007b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8007b44:	4a6a      	ldr	r2, [pc, #424]	@ (8007cf0 <UTIL_SEQ_Run+0x1ec>)
 8007b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b48:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4e:	401a      	ands	r2, r3
 8007b50:	4b62      	ldr	r3, [pc, #392]	@ (8007cdc <UTIL_SEQ_Run+0x1d8>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4013      	ands	r3, r2
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0f1      	beq.n	8007b3e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8007b5a:	4a65      	ldr	r2, [pc, #404]	@ (8007cf0 <UTIL_SEQ_Run+0x1ec>)
 8007b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b5e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b64:	401a      	ands	r2, r3
 8007b66:	4b5d      	ldr	r3, [pc, #372]	@ (8007cdc <UTIL_SEQ_Run+0x1d8>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8007b6e:	4a60      	ldr	r2, [pc, #384]	@ (8007cf0 <UTIL_SEQ_Run+0x1ec>)
 8007b70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b72:	00db      	lsls	r3, r3, #3
 8007b74:	4413      	add	r3, r2
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d106      	bne.n	8007b8e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8007b80:	4a5b      	ldr	r2, [pc, #364]	@ (8007cf0 <UTIL_SEQ_Run+0x1ec>)
 8007b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b84:	00db      	lsls	r3, r3, #3
 8007b86:	4413      	add	r3, r2
 8007b88:	f04f 32ff 	mov.w	r2, #4294967295
 8007b8c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8007b8e:	4a58      	ldr	r2, [pc, #352]	@ (8007cf0 <UTIL_SEQ_Run+0x1ec>)
 8007b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	4413      	add	r3, r2
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f000 f9c1 	bl	8007f24 <SEQ_BitPosition>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	4b53      	ldr	r3, [pc, #332]	@ (8007cf4 <UTIL_SEQ_Run+0x1f0>)
 8007ba8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8007baa:	4a51      	ldr	r2, [pc, #324]	@ (8007cf0 <UTIL_SEQ_Run+0x1ec>)
 8007bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bae:	00db      	lsls	r3, r3, #3
 8007bb0:	4413      	add	r3, r2
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	4b4f      	ldr	r3, [pc, #316]	@ (8007cf4 <UTIL_SEQ_Run+0x1f0>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2101      	movs	r1, #1
 8007bba:	fa01 f303 	lsl.w	r3, r1, r3
 8007bbe:	43db      	mvns	r3, r3
 8007bc0:	401a      	ands	r2, r3
 8007bc2:	494b      	ldr	r1, [pc, #300]	@ (8007cf0 <UTIL_SEQ_Run+0x1ec>)
 8007bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	440b      	add	r3, r1
 8007bca:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8007bd0:	61bb      	str	r3, [r7, #24]
  return(result);
 8007bd2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007bd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8007bd6:	b672      	cpsid	i
}
 8007bd8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8007bda:	4b46      	ldr	r3, [pc, #280]	@ (8007cf4 <UTIL_SEQ_Run+0x1f0>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2201      	movs	r2, #1
 8007be0:	fa02 f303 	lsl.w	r3, r2, r3
 8007be4:	43da      	mvns	r2, r3
 8007be6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ce0 <UTIL_SEQ_Run+0x1dc>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4013      	ands	r3, r2
 8007bec:	4a3c      	ldr	r2, [pc, #240]	@ (8007ce0 <UTIL_SEQ_Run+0x1dc>)
 8007bee:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bf4:	e013      	b.n	8007c1e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8007bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	4a3d      	ldr	r2, [pc, #244]	@ (8007cf0 <UTIL_SEQ_Run+0x1ec>)
 8007bfc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8007c00:	4b3c      	ldr	r3, [pc, #240]	@ (8007cf4 <UTIL_SEQ_Run+0x1f0>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2201      	movs	r2, #1
 8007c06:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0a:	43da      	mvns	r2, r3
 8007c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	400a      	ands	r2, r1
 8007c12:	4937      	ldr	r1, [pc, #220]	@ (8007cf0 <UTIL_SEQ_Run+0x1ec>)
 8007c14:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8007c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e8      	bne.n	8007bf6 <UTIL_SEQ_Run+0xf2>
 8007c24:	6a3b      	ldr	r3, [r7, #32]
 8007c26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	f383 8810 	msr	PRIMASK, r3
}
 8007c2e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8007c30:	4b30      	ldr	r3, [pc, #192]	@ (8007cf4 <UTIL_SEQ_Run+0x1f0>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a30      	ldr	r2, [pc, #192]	@ (8007cf8 <UTIL_SEQ_Run+0x1f4>)
 8007c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c3a:	4798      	blx	r3

    local_taskset = TaskSet;
 8007c3c:	4b28      	ldr	r3, [pc, #160]	@ (8007ce0 <UTIL_SEQ_Run+0x1dc>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8007c42:	4b28      	ldr	r3, [pc, #160]	@ (8007ce4 <UTIL_SEQ_Run+0x1e0>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8007c48:	4b27      	ldr	r3, [pc, #156]	@ (8007ce8 <UTIL_SEQ_Run+0x1e4>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8007c4e:	4b27      	ldr	r3, [pc, #156]	@ (8007cec <UTIL_SEQ_Run+0x1e8>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8007c54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c58:	401a      	ands	r2, r3
 8007c5a:	4b20      	ldr	r3, [pc, #128]	@ (8007cdc <UTIL_SEQ_Run+0x1d8>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4013      	ands	r3, r2
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d005      	beq.n	8007c70 <UTIL_SEQ_Run+0x16c>
 8007c64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c68:	4013      	ands	r3, r2
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f43f af64 	beq.w	8007b38 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8007c70:	4b20      	ldr	r3, [pc, #128]	@ (8007cf4 <UTIL_SEQ_Run+0x1f0>)
 8007c72:	f04f 32ff 	mov.w	r2, #4294967295
 8007c76:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8007c78:	f000 f946 	bl	8007f08 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c7c:	f3ef 8310 	mrs	r3, PRIMASK
 8007c80:	613b      	str	r3, [r7, #16]
  return(result);
 8007c82:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8007c84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8007c86:	b672      	cpsid	i
}
 8007c88:	bf00      	nop
  local_taskset = TaskSet;
 8007c8a:	4b15      	ldr	r3, [pc, #84]	@ (8007ce0 <UTIL_SEQ_Run+0x1dc>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8007c90:	4b14      	ldr	r3, [pc, #80]	@ (8007ce4 <UTIL_SEQ_Run+0x1e0>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8007c96:	4b14      	ldr	r3, [pc, #80]	@ (8007ce8 <UTIL_SEQ_Run+0x1e4>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8007c9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca0:	401a      	ands	r2, r3
 8007ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8007cdc <UTIL_SEQ_Run+0x1d8>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d107      	bne.n	8007cbc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8007cac:	4b0f      	ldr	r3, [pc, #60]	@ (8007cec <UTIL_SEQ_Run+0x1e8>)
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8007cb8:	f7f8 fc6f 	bl	800059a <UTIL_SEQ_Idle>
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f383 8810 	msr	PRIMASK, r3
}
 8007cc6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8007cc8:	f000 f925 	bl	8007f16 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8007ccc:	4a03      	ldr	r2, [pc, #12]	@ (8007cdc <UTIL_SEQ_Run+0x1d8>)
 8007cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd0:	6013      	str	r3, [r2, #0]

  return;
 8007cd2:	bf00      	nop
}
 8007cd4:	3740      	adds	r7, #64	@ 0x40
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	20000028 	.word	0x20000028
 8007ce0:	20000278 	.word	0x20000278
 8007ce4:	2000027c 	.word	0x2000027c
 8007ce8:	20000024 	.word	0x20000024
 8007cec:	20000280 	.word	0x20000280
 8007cf0:	20000308 	.word	0x20000308
 8007cf4:	20000284 	.word	0x20000284
 8007cf8:	20000288 	.word	0x20000288

08007cfc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b088      	sub	sp, #32
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d08:	f3ef 8310 	mrs	r3, PRIMASK
 8007d0c:	617b      	str	r3, [r7, #20]
  return(result);
 8007d0e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8007d10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d12:	b672      	cpsid	i
}
 8007d14:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f000 f904 	bl	8007f24 <SEQ_BitPosition>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	4619      	mov	r1, r3
 8007d20:	4a06      	ldr	r2, [pc, #24]	@ (8007d3c <UTIL_SEQ_RegTask+0x40>)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	f383 8810 	msr	PRIMASK, r3
}
 8007d32:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8007d34:	bf00      	nop
}
 8007d36:	3720      	adds	r7, #32
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	20000288 	.word	0x20000288

08007d40 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8007d4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d50:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007d52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d54:	b672      	cpsid	i
}
 8007d56:	bf00      	nop

  TaskSet |= TaskId_bm;
 8007d58:	4b0d      	ldr	r3, [pc, #52]	@ (8007d90 <UTIL_SEQ_SetTask+0x50>)
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	4a0b      	ldr	r2, [pc, #44]	@ (8007d90 <UTIL_SEQ_SetTask+0x50>)
 8007d62:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8007d64:	4a0b      	ldr	r2, [pc, #44]	@ (8007d94 <UTIL_SEQ_SetTask+0x54>)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	431a      	orrs	r2, r3
 8007d70:	4908      	ldr	r1, [pc, #32]	@ (8007d94 <UTIL_SEQ_SetTask+0x54>)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	f383 8810 	msr	PRIMASK, r3
}
 8007d82:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007d84:	bf00      	nop
}
 8007d86:	371c      	adds	r7, #28
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr
 8007d90:	20000278 	.word	0x20000278
 8007d94:	20000308 	.word	0x20000308

08007d98 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b087      	sub	sp, #28
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007da0:	f3ef 8310 	mrs	r3, PRIMASK
 8007da4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007da6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007da8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007daa:	b672      	cpsid	i
}
 8007dac:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	43da      	mvns	r2, r3
 8007db2:	4b08      	ldr	r3, [pc, #32]	@ (8007dd4 <UTIL_SEQ_PauseTask+0x3c>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4013      	ands	r3, r2
 8007db8:	4a06      	ldr	r2, [pc, #24]	@ (8007dd4 <UTIL_SEQ_PauseTask+0x3c>)
 8007dba:	6013      	str	r3, [r2, #0]
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	f383 8810 	msr	PRIMASK, r3
}
 8007dc6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007dc8:	bf00      	nop
}
 8007dca:	371c      	adds	r7, #28
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	20000024 	.word	0x20000024

08007dd8 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b087      	sub	sp, #28
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007de0:	f3ef 8310 	mrs	r3, PRIMASK
 8007de4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007de6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007de8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007dea:	b672      	cpsid	i
}
 8007dec:	bf00      	nop

  TaskMask |= TaskId_bm;
 8007dee:	4b09      	ldr	r3, [pc, #36]	@ (8007e14 <UTIL_SEQ_ResumeTask+0x3c>)
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	4a07      	ldr	r2, [pc, #28]	@ (8007e14 <UTIL_SEQ_ResumeTask+0x3c>)
 8007df8:	6013      	str	r3, [r2, #0]
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	f383 8810 	msr	PRIMASK, r3
}
 8007e04:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007e06:	bf00      	nop
}
 8007e08:	371c      	adds	r7, #28
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	20000024 	.word	0x20000024

08007e18 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b087      	sub	sp, #28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e20:	f3ef 8310 	mrs	r3, PRIMASK
 8007e24:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e26:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007e28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e2a:	b672      	cpsid	i
}
 8007e2c:	bf00      	nop

  EvtSet |= EvtId_bm;
 8007e2e:	4b09      	ldr	r3, [pc, #36]	@ (8007e54 <UTIL_SEQ_SetEvt+0x3c>)
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	4a07      	ldr	r2, [pc, #28]	@ (8007e54 <UTIL_SEQ_SetEvt+0x3c>)
 8007e38:	6013      	str	r3, [r2, #0]
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	f383 8810 	msr	PRIMASK, r3
}
 8007e44:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007e46:	bf00      	nop
}
 8007e48:	371c      	adds	r7, #28
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	2000027c 	.word	0x2000027c

08007e58 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b088      	sub	sp, #32
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8007e60:	4b1f      	ldr	r3, [pc, #124]	@ (8007ee0 <UTIL_SEQ_WaitEvt+0x88>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8007e66:	4b1e      	ldr	r3, [pc, #120]	@ (8007ee0 <UTIL_SEQ_WaitEvt+0x88>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6e:	d102      	bne.n	8007e76 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8007e70:	2300      	movs	r3, #0
 8007e72:	61fb      	str	r3, [r7, #28]
 8007e74:	e005      	b.n	8007e82 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8007e76:	4b1a      	ldr	r3, [pc, #104]	@ (8007ee0 <UTIL_SEQ_WaitEvt+0x88>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e80:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8007e82:	4b18      	ldr	r3, [pc, #96]	@ (8007ee4 <UTIL_SEQ_WaitEvt+0x8c>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8007e88:	4a16      	ldr	r2, [pc, #88]	@ (8007ee4 <UTIL_SEQ_WaitEvt+0x8c>)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8007e8e:	e003      	b.n	8007e98 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8007e90:	6879      	ldr	r1, [r7, #4]
 8007e92:	69f8      	ldr	r0, [r7, #28]
 8007e94:	f000 f82a 	bl	8007eec <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8007e98:	4b13      	ldr	r3, [pc, #76]	@ (8007ee8 <UTIL_SEQ_WaitEvt+0x90>)
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d0f5      	beq.n	8007e90 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8007ea4:	4a0e      	ldr	r2, [pc, #56]	@ (8007ee0 <UTIL_SEQ_WaitEvt+0x88>)
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8007eae:	60bb      	str	r3, [r7, #8]
  return(result);
 8007eb0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007eb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007eb4:	b672      	cpsid	i
}
 8007eb6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	43da      	mvns	r2, r3
 8007ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8007ee8 <UTIL_SEQ_WaitEvt+0x90>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	4a09      	ldr	r2, [pc, #36]	@ (8007ee8 <UTIL_SEQ_WaitEvt+0x90>)
 8007ec4:	6013      	str	r3, [r2, #0]
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f383 8810 	msr	PRIMASK, r3
}
 8007ed0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8007ed2:	4a04      	ldr	r2, [pc, #16]	@ (8007ee4 <UTIL_SEQ_WaitEvt+0x8c>)
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	6013      	str	r3, [r2, #0]
  return;
 8007ed8:	bf00      	nop
}
 8007eda:	3720      	adds	r7, #32
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	20000284 	.word	0x20000284
 8007ee4:	20000280 	.word	0x20000280
 8007ee8:	2000027c 	.word	0x2000027c

08007eec <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	43db      	mvns	r3, r3
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7ff fe02 	bl	8007b04 <UTIL_SEQ_Run>
  return;
 8007f00:	bf00      	nop
}
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8007f08:	b480      	push	{r7}
 8007f0a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007f0c:	bf00      	nop
}
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8007f16:	b480      	push	{r7}
 8007f18:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007f1a:	bf00      	nop
}
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <SEQ_BitPosition+0x16>
    return 32U;
 8007f36:	2320      	movs	r3, #32
 8007f38:	e003      	b.n	8007f42 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	fab3 f383 	clz	r3, r3
 8007f40:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 8007f42:	f1c3 031f 	rsb	r3, r3, #31
 8007f46:	b2db      	uxtb	r3, r3
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <memset>:
 8007f54:	4402      	add	r2, r0
 8007f56:	4603      	mov	r3, r0
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d100      	bne.n	8007f5e <memset+0xa>
 8007f5c:	4770      	bx	lr
 8007f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f62:	e7f9      	b.n	8007f58 <memset+0x4>

08007f64 <__libc_init_array>:
 8007f64:	b570      	push	{r4, r5, r6, lr}
 8007f66:	4d0d      	ldr	r5, [pc, #52]	@ (8007f9c <__libc_init_array+0x38>)
 8007f68:	4c0d      	ldr	r4, [pc, #52]	@ (8007fa0 <__libc_init_array+0x3c>)
 8007f6a:	1b64      	subs	r4, r4, r5
 8007f6c:	10a4      	asrs	r4, r4, #2
 8007f6e:	2600      	movs	r6, #0
 8007f70:	42a6      	cmp	r6, r4
 8007f72:	d109      	bne.n	8007f88 <__libc_init_array+0x24>
 8007f74:	4d0b      	ldr	r5, [pc, #44]	@ (8007fa4 <__libc_init_array+0x40>)
 8007f76:	4c0c      	ldr	r4, [pc, #48]	@ (8007fa8 <__libc_init_array+0x44>)
 8007f78:	f000 f826 	bl	8007fc8 <_init>
 8007f7c:	1b64      	subs	r4, r4, r5
 8007f7e:	10a4      	asrs	r4, r4, #2
 8007f80:	2600      	movs	r6, #0
 8007f82:	42a6      	cmp	r6, r4
 8007f84:	d105      	bne.n	8007f92 <__libc_init_array+0x2e>
 8007f86:	bd70      	pop	{r4, r5, r6, pc}
 8007f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f8c:	4798      	blx	r3
 8007f8e:	3601      	adds	r6, #1
 8007f90:	e7ee      	b.n	8007f70 <__libc_init_array+0xc>
 8007f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f96:	4798      	blx	r3
 8007f98:	3601      	adds	r6, #1
 8007f9a:	e7f2      	b.n	8007f82 <__libc_init_array+0x1e>
 8007f9c:	08008378 	.word	0x08008378
 8007fa0:	08008378 	.word	0x08008378
 8007fa4:	08008378 	.word	0x08008378
 8007fa8:	0800837c 	.word	0x0800837c

08007fac <memcpy>:
 8007fac:	440a      	add	r2, r1
 8007fae:	4291      	cmp	r1, r2
 8007fb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fb4:	d100      	bne.n	8007fb8 <memcpy+0xc>
 8007fb6:	4770      	bx	lr
 8007fb8:	b510      	push	{r4, lr}
 8007fba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fc2:	4291      	cmp	r1, r2
 8007fc4:	d1f9      	bne.n	8007fba <memcpy+0xe>
 8007fc6:	bd10      	pop	{r4, pc}

08007fc8 <_init>:
 8007fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fca:	bf00      	nop
 8007fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fce:	bc08      	pop	{r3}
 8007fd0:	469e      	mov	lr, r3
 8007fd2:	4770      	bx	lr

08007fd4 <_fini>:
 8007fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd6:	bf00      	nop
 8007fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fda:	bc08      	pop	{r3}
 8007fdc:	469e      	mov	lr, r3
 8007fde:	4770      	bx	lr
